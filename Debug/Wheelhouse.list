
Wheelhouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005848  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005908  08005908  00006908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059c4  080059c4  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080059c4  080059c4  000069c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059cc  080059cc  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059cc  080059cc  000069cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059d0  080059d0  000069d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080059d4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  2000005c  08005a30  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  08005a30  00007304  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b218  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001933  00000000  00000000  0001229c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  00013bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000818  00000000  00000000  00014638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011a45  00000000  00000000  00014e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c96b  00000000  00000000  00026895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006cf6d  00000000  00000000  00033200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a016d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c08  00000000  00000000  000a01b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000a2db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080058f0 	.word	0x080058f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	080058f0 	.word	0x080058f0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	@ (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f824 	bl	80002c0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__aeabi_d2uiz>:
 8000284:	b570      	push	{r4, r5, r6, lr}
 8000286:	2200      	movs	r2, #0
 8000288:	4b0c      	ldr	r3, [pc, #48]	@ (80002bc <__aeabi_d2uiz+0x38>)
 800028a:	0004      	movs	r4, r0
 800028c:	000d      	movs	r5, r1
 800028e:	f001 fbb3 	bl	80019f8 <__aeabi_dcmpge>
 8000292:	2800      	cmp	r0, #0
 8000294:	d104      	bne.n	80002a0 <__aeabi_d2uiz+0x1c>
 8000296:	0020      	movs	r0, r4
 8000298:	0029      	movs	r1, r5
 800029a:	f001 fb19 	bl	80018d0 <__aeabi_d2iz>
 800029e:	bd70      	pop	{r4, r5, r6, pc}
 80002a0:	4b06      	ldr	r3, [pc, #24]	@ (80002bc <__aeabi_d2uiz+0x38>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	0020      	movs	r0, r4
 80002a6:	0029      	movs	r1, r5
 80002a8:	f000 ff08 	bl	80010bc <__aeabi_dsub>
 80002ac:	f001 fb10 	bl	80018d0 <__aeabi_d2iz>
 80002b0:	2380      	movs	r3, #128	@ 0x80
 80002b2:	061b      	lsls	r3, r3, #24
 80002b4:	469c      	mov	ip, r3
 80002b6:	4460      	add	r0, ip
 80002b8:	e7f1      	b.n	800029e <__aeabi_d2uiz+0x1a>
 80002ba:	46c0      	nop			@ (mov r8, r8)
 80002bc:	41e00000 	.word	0x41e00000

080002c0 <__udivmoddi4>:
 80002c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002c2:	4657      	mov	r7, sl
 80002c4:	464e      	mov	r6, r9
 80002c6:	4645      	mov	r5, r8
 80002c8:	46de      	mov	lr, fp
 80002ca:	b5e0      	push	{r5, r6, r7, lr}
 80002cc:	0004      	movs	r4, r0
 80002ce:	000d      	movs	r5, r1
 80002d0:	4692      	mov	sl, r2
 80002d2:	4699      	mov	r9, r3
 80002d4:	b083      	sub	sp, #12
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d830      	bhi.n	800033c <__udivmoddi4+0x7c>
 80002da:	d02d      	beq.n	8000338 <__udivmoddi4+0x78>
 80002dc:	4649      	mov	r1, r9
 80002de:	4650      	mov	r0, sl
 80002e0:	f001 fbb2 	bl	8001a48 <__clzdi2>
 80002e4:	0029      	movs	r1, r5
 80002e6:	0006      	movs	r6, r0
 80002e8:	0020      	movs	r0, r4
 80002ea:	f001 fbad 	bl	8001a48 <__clzdi2>
 80002ee:	1a33      	subs	r3, r6, r0
 80002f0:	4698      	mov	r8, r3
 80002f2:	3b20      	subs	r3, #32
 80002f4:	d434      	bmi.n	8000360 <__udivmoddi4+0xa0>
 80002f6:	469b      	mov	fp, r3
 80002f8:	4653      	mov	r3, sl
 80002fa:	465a      	mov	r2, fp
 80002fc:	4093      	lsls	r3, r2
 80002fe:	4642      	mov	r2, r8
 8000300:	001f      	movs	r7, r3
 8000302:	4653      	mov	r3, sl
 8000304:	4093      	lsls	r3, r2
 8000306:	001e      	movs	r6, r3
 8000308:	42af      	cmp	r7, r5
 800030a:	d83b      	bhi.n	8000384 <__udivmoddi4+0xc4>
 800030c:	42af      	cmp	r7, r5
 800030e:	d100      	bne.n	8000312 <__udivmoddi4+0x52>
 8000310:	e079      	b.n	8000406 <__udivmoddi4+0x146>
 8000312:	465b      	mov	r3, fp
 8000314:	1ba4      	subs	r4, r4, r6
 8000316:	41bd      	sbcs	r5, r7
 8000318:	2b00      	cmp	r3, #0
 800031a:	da00      	bge.n	800031e <__udivmoddi4+0x5e>
 800031c:	e076      	b.n	800040c <__udivmoddi4+0x14c>
 800031e:	2200      	movs	r2, #0
 8000320:	2300      	movs	r3, #0
 8000322:	9200      	str	r2, [sp, #0]
 8000324:	9301      	str	r3, [sp, #4]
 8000326:	2301      	movs	r3, #1
 8000328:	465a      	mov	r2, fp
 800032a:	4093      	lsls	r3, r2
 800032c:	9301      	str	r3, [sp, #4]
 800032e:	2301      	movs	r3, #1
 8000330:	4642      	mov	r2, r8
 8000332:	4093      	lsls	r3, r2
 8000334:	9300      	str	r3, [sp, #0]
 8000336:	e029      	b.n	800038c <__udivmoddi4+0xcc>
 8000338:	4282      	cmp	r2, r0
 800033a:	d9cf      	bls.n	80002dc <__udivmoddi4+0x1c>
 800033c:	2200      	movs	r2, #0
 800033e:	2300      	movs	r3, #0
 8000340:	9200      	str	r2, [sp, #0]
 8000342:	9301      	str	r3, [sp, #4]
 8000344:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <__udivmoddi4+0x8e>
 800034a:	601c      	str	r4, [r3, #0]
 800034c:	605d      	str	r5, [r3, #4]
 800034e:	9800      	ldr	r0, [sp, #0]
 8000350:	9901      	ldr	r1, [sp, #4]
 8000352:	b003      	add	sp, #12
 8000354:	bcf0      	pop	{r4, r5, r6, r7}
 8000356:	46bb      	mov	fp, r7
 8000358:	46b2      	mov	sl, r6
 800035a:	46a9      	mov	r9, r5
 800035c:	46a0      	mov	r8, r4
 800035e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000360:	4642      	mov	r2, r8
 8000362:	469b      	mov	fp, r3
 8000364:	2320      	movs	r3, #32
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	4652      	mov	r2, sl
 800036a:	40da      	lsrs	r2, r3
 800036c:	4641      	mov	r1, r8
 800036e:	0013      	movs	r3, r2
 8000370:	464a      	mov	r2, r9
 8000372:	408a      	lsls	r2, r1
 8000374:	0017      	movs	r7, r2
 8000376:	4642      	mov	r2, r8
 8000378:	431f      	orrs	r7, r3
 800037a:	4653      	mov	r3, sl
 800037c:	4093      	lsls	r3, r2
 800037e:	001e      	movs	r6, r3
 8000380:	42af      	cmp	r7, r5
 8000382:	d9c3      	bls.n	800030c <__udivmoddi4+0x4c>
 8000384:	2200      	movs	r2, #0
 8000386:	2300      	movs	r3, #0
 8000388:	9200      	str	r2, [sp, #0]
 800038a:	9301      	str	r3, [sp, #4]
 800038c:	4643      	mov	r3, r8
 800038e:	2b00      	cmp	r3, #0
 8000390:	d0d8      	beq.n	8000344 <__udivmoddi4+0x84>
 8000392:	07fb      	lsls	r3, r7, #31
 8000394:	0872      	lsrs	r2, r6, #1
 8000396:	431a      	orrs	r2, r3
 8000398:	4646      	mov	r6, r8
 800039a:	087b      	lsrs	r3, r7, #1
 800039c:	e00e      	b.n	80003bc <__udivmoddi4+0xfc>
 800039e:	42ab      	cmp	r3, r5
 80003a0:	d101      	bne.n	80003a6 <__udivmoddi4+0xe6>
 80003a2:	42a2      	cmp	r2, r4
 80003a4:	d80c      	bhi.n	80003c0 <__udivmoddi4+0x100>
 80003a6:	1aa4      	subs	r4, r4, r2
 80003a8:	419d      	sbcs	r5, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	1924      	adds	r4, r4, r4
 80003ae:	416d      	adcs	r5, r5
 80003b0:	2100      	movs	r1, #0
 80003b2:	3e01      	subs	r6, #1
 80003b4:	1824      	adds	r4, r4, r0
 80003b6:	414d      	adcs	r5, r1
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d006      	beq.n	80003ca <__udivmoddi4+0x10a>
 80003bc:	42ab      	cmp	r3, r5
 80003be:	d9ee      	bls.n	800039e <__udivmoddi4+0xde>
 80003c0:	3e01      	subs	r6, #1
 80003c2:	1924      	adds	r4, r4, r4
 80003c4:	416d      	adcs	r5, r5
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d1f8      	bne.n	80003bc <__udivmoddi4+0xfc>
 80003ca:	9800      	ldr	r0, [sp, #0]
 80003cc:	9901      	ldr	r1, [sp, #4]
 80003ce:	465b      	mov	r3, fp
 80003d0:	1900      	adds	r0, r0, r4
 80003d2:	4169      	adcs	r1, r5
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	db24      	blt.n	8000422 <__udivmoddi4+0x162>
 80003d8:	002b      	movs	r3, r5
 80003da:	465a      	mov	r2, fp
 80003dc:	4644      	mov	r4, r8
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	002a      	movs	r2, r5
 80003e2:	40e2      	lsrs	r2, r4
 80003e4:	001c      	movs	r4, r3
 80003e6:	465b      	mov	r3, fp
 80003e8:	0015      	movs	r5, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	db2a      	blt.n	8000444 <__udivmoddi4+0x184>
 80003ee:	0026      	movs	r6, r4
 80003f0:	409e      	lsls	r6, r3
 80003f2:	0033      	movs	r3, r6
 80003f4:	0026      	movs	r6, r4
 80003f6:	4647      	mov	r7, r8
 80003f8:	40be      	lsls	r6, r7
 80003fa:	0032      	movs	r2, r6
 80003fc:	1a80      	subs	r0, r0, r2
 80003fe:	4199      	sbcs	r1, r3
 8000400:	9000      	str	r0, [sp, #0]
 8000402:	9101      	str	r1, [sp, #4]
 8000404:	e79e      	b.n	8000344 <__udivmoddi4+0x84>
 8000406:	42a3      	cmp	r3, r4
 8000408:	d8bc      	bhi.n	8000384 <__udivmoddi4+0xc4>
 800040a:	e782      	b.n	8000312 <__udivmoddi4+0x52>
 800040c:	4642      	mov	r2, r8
 800040e:	2320      	movs	r3, #32
 8000410:	2100      	movs	r1, #0
 8000412:	1a9b      	subs	r3, r3, r2
 8000414:	2200      	movs	r2, #0
 8000416:	9100      	str	r1, [sp, #0]
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	2201      	movs	r2, #1
 800041c:	40da      	lsrs	r2, r3
 800041e:	9201      	str	r2, [sp, #4]
 8000420:	e785      	b.n	800032e <__udivmoddi4+0x6e>
 8000422:	4642      	mov	r2, r8
 8000424:	2320      	movs	r3, #32
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	002a      	movs	r2, r5
 800042a:	4646      	mov	r6, r8
 800042c:	409a      	lsls	r2, r3
 800042e:	0023      	movs	r3, r4
 8000430:	40f3      	lsrs	r3, r6
 8000432:	4644      	mov	r4, r8
 8000434:	4313      	orrs	r3, r2
 8000436:	002a      	movs	r2, r5
 8000438:	40e2      	lsrs	r2, r4
 800043a:	001c      	movs	r4, r3
 800043c:	465b      	mov	r3, fp
 800043e:	0015      	movs	r5, r2
 8000440:	2b00      	cmp	r3, #0
 8000442:	dad4      	bge.n	80003ee <__udivmoddi4+0x12e>
 8000444:	4642      	mov	r2, r8
 8000446:	002f      	movs	r7, r5
 8000448:	2320      	movs	r3, #32
 800044a:	0026      	movs	r6, r4
 800044c:	4097      	lsls	r7, r2
 800044e:	1a9b      	subs	r3, r3, r2
 8000450:	40de      	lsrs	r6, r3
 8000452:	003b      	movs	r3, r7
 8000454:	4333      	orrs	r3, r6
 8000456:	e7cd      	b.n	80003f4 <__udivmoddi4+0x134>

08000458 <__aeabi_fadd>:
 8000458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045a:	024b      	lsls	r3, r1, #9
 800045c:	0a5a      	lsrs	r2, r3, #9
 800045e:	4694      	mov	ip, r2
 8000460:	004a      	lsls	r2, r1, #1
 8000462:	0fc9      	lsrs	r1, r1, #31
 8000464:	46ce      	mov	lr, r9
 8000466:	4647      	mov	r7, r8
 8000468:	4689      	mov	r9, r1
 800046a:	0045      	lsls	r5, r0, #1
 800046c:	0246      	lsls	r6, r0, #9
 800046e:	0e2d      	lsrs	r5, r5, #24
 8000470:	0e12      	lsrs	r2, r2, #24
 8000472:	b580      	push	{r7, lr}
 8000474:	0999      	lsrs	r1, r3, #6
 8000476:	0a77      	lsrs	r7, r6, #9
 8000478:	0fc4      	lsrs	r4, r0, #31
 800047a:	09b6      	lsrs	r6, r6, #6
 800047c:	1aab      	subs	r3, r5, r2
 800047e:	454c      	cmp	r4, r9
 8000480:	d020      	beq.n	80004c4 <__aeabi_fadd+0x6c>
 8000482:	2b00      	cmp	r3, #0
 8000484:	dd0c      	ble.n	80004a0 <__aeabi_fadd+0x48>
 8000486:	2a00      	cmp	r2, #0
 8000488:	d134      	bne.n	80004f4 <__aeabi_fadd+0x9c>
 800048a:	2900      	cmp	r1, #0
 800048c:	d02a      	beq.n	80004e4 <__aeabi_fadd+0x8c>
 800048e:	1e5a      	subs	r2, r3, #1
 8000490:	2b01      	cmp	r3, #1
 8000492:	d100      	bne.n	8000496 <__aeabi_fadd+0x3e>
 8000494:	e08f      	b.n	80005b6 <__aeabi_fadd+0x15e>
 8000496:	2bff      	cmp	r3, #255	@ 0xff
 8000498:	d100      	bne.n	800049c <__aeabi_fadd+0x44>
 800049a:	e0cd      	b.n	8000638 <__aeabi_fadd+0x1e0>
 800049c:	0013      	movs	r3, r2
 800049e:	e02f      	b.n	8000500 <__aeabi_fadd+0xa8>
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d060      	beq.n	8000566 <__aeabi_fadd+0x10e>
 80004a4:	1b53      	subs	r3, r2, r5
 80004a6:	2d00      	cmp	r5, #0
 80004a8:	d000      	beq.n	80004ac <__aeabi_fadd+0x54>
 80004aa:	e0ee      	b.n	800068a <__aeabi_fadd+0x232>
 80004ac:	2e00      	cmp	r6, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_fadd+0x5a>
 80004b0:	e13e      	b.n	8000730 <__aeabi_fadd+0x2d8>
 80004b2:	1e5c      	subs	r4, r3, #1
 80004b4:	2b01      	cmp	r3, #1
 80004b6:	d100      	bne.n	80004ba <__aeabi_fadd+0x62>
 80004b8:	e16b      	b.n	8000792 <__aeabi_fadd+0x33a>
 80004ba:	2bff      	cmp	r3, #255	@ 0xff
 80004bc:	d100      	bne.n	80004c0 <__aeabi_fadd+0x68>
 80004be:	e0b9      	b.n	8000634 <__aeabi_fadd+0x1dc>
 80004c0:	0023      	movs	r3, r4
 80004c2:	e0e7      	b.n	8000694 <__aeabi_fadd+0x23c>
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	dc00      	bgt.n	80004ca <__aeabi_fadd+0x72>
 80004c8:	e0a4      	b.n	8000614 <__aeabi_fadd+0x1bc>
 80004ca:	2a00      	cmp	r2, #0
 80004cc:	d069      	beq.n	80005a2 <__aeabi_fadd+0x14a>
 80004ce:	2dff      	cmp	r5, #255	@ 0xff
 80004d0:	d100      	bne.n	80004d4 <__aeabi_fadd+0x7c>
 80004d2:	e0b1      	b.n	8000638 <__aeabi_fadd+0x1e0>
 80004d4:	2280      	movs	r2, #128	@ 0x80
 80004d6:	04d2      	lsls	r2, r2, #19
 80004d8:	4311      	orrs	r1, r2
 80004da:	2b1b      	cmp	r3, #27
 80004dc:	dc00      	bgt.n	80004e0 <__aeabi_fadd+0x88>
 80004de:	e0e9      	b.n	80006b4 <__aeabi_fadd+0x25c>
 80004e0:	002b      	movs	r3, r5
 80004e2:	3605      	adds	r6, #5
 80004e4:	08f7      	lsrs	r7, r6, #3
 80004e6:	2bff      	cmp	r3, #255	@ 0xff
 80004e8:	d100      	bne.n	80004ec <__aeabi_fadd+0x94>
 80004ea:	e0a5      	b.n	8000638 <__aeabi_fadd+0x1e0>
 80004ec:	027a      	lsls	r2, r7, #9
 80004ee:	0a52      	lsrs	r2, r2, #9
 80004f0:	b2d8      	uxtb	r0, r3
 80004f2:	e030      	b.n	8000556 <__aeabi_fadd+0xfe>
 80004f4:	2dff      	cmp	r5, #255	@ 0xff
 80004f6:	d100      	bne.n	80004fa <__aeabi_fadd+0xa2>
 80004f8:	e09e      	b.n	8000638 <__aeabi_fadd+0x1e0>
 80004fa:	2280      	movs	r2, #128	@ 0x80
 80004fc:	04d2      	lsls	r2, r2, #19
 80004fe:	4311      	orrs	r1, r2
 8000500:	2001      	movs	r0, #1
 8000502:	2b1b      	cmp	r3, #27
 8000504:	dc08      	bgt.n	8000518 <__aeabi_fadd+0xc0>
 8000506:	0008      	movs	r0, r1
 8000508:	2220      	movs	r2, #32
 800050a:	40d8      	lsrs	r0, r3
 800050c:	1ad3      	subs	r3, r2, r3
 800050e:	4099      	lsls	r1, r3
 8000510:	000b      	movs	r3, r1
 8000512:	1e5a      	subs	r2, r3, #1
 8000514:	4193      	sbcs	r3, r2
 8000516:	4318      	orrs	r0, r3
 8000518:	1a36      	subs	r6, r6, r0
 800051a:	0173      	lsls	r3, r6, #5
 800051c:	d400      	bmi.n	8000520 <__aeabi_fadd+0xc8>
 800051e:	e071      	b.n	8000604 <__aeabi_fadd+0x1ac>
 8000520:	01b6      	lsls	r6, r6, #6
 8000522:	09b7      	lsrs	r7, r6, #6
 8000524:	0038      	movs	r0, r7
 8000526:	f001 fa71 	bl	8001a0c <__clzsi2>
 800052a:	003b      	movs	r3, r7
 800052c:	3805      	subs	r0, #5
 800052e:	4083      	lsls	r3, r0
 8000530:	4285      	cmp	r5, r0
 8000532:	dd4d      	ble.n	80005d0 <__aeabi_fadd+0x178>
 8000534:	4eb4      	ldr	r6, [pc, #720]	@ (8000808 <__aeabi_fadd+0x3b0>)
 8000536:	1a2d      	subs	r5, r5, r0
 8000538:	401e      	ands	r6, r3
 800053a:	075a      	lsls	r2, r3, #29
 800053c:	d068      	beq.n	8000610 <__aeabi_fadd+0x1b8>
 800053e:	220f      	movs	r2, #15
 8000540:	4013      	ands	r3, r2
 8000542:	2b04      	cmp	r3, #4
 8000544:	d064      	beq.n	8000610 <__aeabi_fadd+0x1b8>
 8000546:	3604      	adds	r6, #4
 8000548:	0173      	lsls	r3, r6, #5
 800054a:	d561      	bpl.n	8000610 <__aeabi_fadd+0x1b8>
 800054c:	1c68      	adds	r0, r5, #1
 800054e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000550:	d154      	bne.n	80005fc <__aeabi_fadd+0x1a4>
 8000552:	20ff      	movs	r0, #255	@ 0xff
 8000554:	2200      	movs	r2, #0
 8000556:	05c0      	lsls	r0, r0, #23
 8000558:	4310      	orrs	r0, r2
 800055a:	07e4      	lsls	r4, r4, #31
 800055c:	4320      	orrs	r0, r4
 800055e:	bcc0      	pop	{r6, r7}
 8000560:	46b9      	mov	r9, r7
 8000562:	46b0      	mov	r8, r6
 8000564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000566:	22fe      	movs	r2, #254	@ 0xfe
 8000568:	4690      	mov	r8, r2
 800056a:	1c68      	adds	r0, r5, #1
 800056c:	0002      	movs	r2, r0
 800056e:	4640      	mov	r0, r8
 8000570:	4210      	tst	r0, r2
 8000572:	d16b      	bne.n	800064c <__aeabi_fadd+0x1f4>
 8000574:	2d00      	cmp	r5, #0
 8000576:	d000      	beq.n	800057a <__aeabi_fadd+0x122>
 8000578:	e0dd      	b.n	8000736 <__aeabi_fadd+0x2de>
 800057a:	2e00      	cmp	r6, #0
 800057c:	d100      	bne.n	8000580 <__aeabi_fadd+0x128>
 800057e:	e102      	b.n	8000786 <__aeabi_fadd+0x32e>
 8000580:	2900      	cmp	r1, #0
 8000582:	d0b3      	beq.n	80004ec <__aeabi_fadd+0x94>
 8000584:	2280      	movs	r2, #128	@ 0x80
 8000586:	1a77      	subs	r7, r6, r1
 8000588:	04d2      	lsls	r2, r2, #19
 800058a:	4217      	tst	r7, r2
 800058c:	d100      	bne.n	8000590 <__aeabi_fadd+0x138>
 800058e:	e136      	b.n	80007fe <__aeabi_fadd+0x3a6>
 8000590:	464c      	mov	r4, r9
 8000592:	1b8e      	subs	r6, r1, r6
 8000594:	d061      	beq.n	800065a <__aeabi_fadd+0x202>
 8000596:	2001      	movs	r0, #1
 8000598:	4216      	tst	r6, r2
 800059a:	d130      	bne.n	80005fe <__aeabi_fadd+0x1a6>
 800059c:	2300      	movs	r3, #0
 800059e:	08f7      	lsrs	r7, r6, #3
 80005a0:	e7a4      	b.n	80004ec <__aeabi_fadd+0x94>
 80005a2:	2900      	cmp	r1, #0
 80005a4:	d09e      	beq.n	80004e4 <__aeabi_fadd+0x8c>
 80005a6:	1e5a      	subs	r2, r3, #1
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d100      	bne.n	80005ae <__aeabi_fadd+0x156>
 80005ac:	e0ca      	b.n	8000744 <__aeabi_fadd+0x2ec>
 80005ae:	2bff      	cmp	r3, #255	@ 0xff
 80005b0:	d042      	beq.n	8000638 <__aeabi_fadd+0x1e0>
 80005b2:	0013      	movs	r3, r2
 80005b4:	e791      	b.n	80004da <__aeabi_fadd+0x82>
 80005b6:	1a71      	subs	r1, r6, r1
 80005b8:	014b      	lsls	r3, r1, #5
 80005ba:	d400      	bmi.n	80005be <__aeabi_fadd+0x166>
 80005bc:	e0d1      	b.n	8000762 <__aeabi_fadd+0x30a>
 80005be:	018f      	lsls	r7, r1, #6
 80005c0:	09bf      	lsrs	r7, r7, #6
 80005c2:	0038      	movs	r0, r7
 80005c4:	f001 fa22 	bl	8001a0c <__clzsi2>
 80005c8:	003b      	movs	r3, r7
 80005ca:	3805      	subs	r0, #5
 80005cc:	4083      	lsls	r3, r0
 80005ce:	2501      	movs	r5, #1
 80005d0:	2220      	movs	r2, #32
 80005d2:	1b40      	subs	r0, r0, r5
 80005d4:	3001      	adds	r0, #1
 80005d6:	1a12      	subs	r2, r2, r0
 80005d8:	001e      	movs	r6, r3
 80005da:	4093      	lsls	r3, r2
 80005dc:	40c6      	lsrs	r6, r0
 80005de:	1e5a      	subs	r2, r3, #1
 80005e0:	4193      	sbcs	r3, r2
 80005e2:	431e      	orrs	r6, r3
 80005e4:	d039      	beq.n	800065a <__aeabi_fadd+0x202>
 80005e6:	0773      	lsls	r3, r6, #29
 80005e8:	d100      	bne.n	80005ec <__aeabi_fadd+0x194>
 80005ea:	e11b      	b.n	8000824 <__aeabi_fadd+0x3cc>
 80005ec:	230f      	movs	r3, #15
 80005ee:	2500      	movs	r5, #0
 80005f0:	4033      	ands	r3, r6
 80005f2:	2b04      	cmp	r3, #4
 80005f4:	d1a7      	bne.n	8000546 <__aeabi_fadd+0xee>
 80005f6:	2001      	movs	r0, #1
 80005f8:	0172      	lsls	r2, r6, #5
 80005fa:	d57c      	bpl.n	80006f6 <__aeabi_fadd+0x29e>
 80005fc:	b2c0      	uxtb	r0, r0
 80005fe:	01b2      	lsls	r2, r6, #6
 8000600:	0a52      	lsrs	r2, r2, #9
 8000602:	e7a8      	b.n	8000556 <__aeabi_fadd+0xfe>
 8000604:	0773      	lsls	r3, r6, #29
 8000606:	d003      	beq.n	8000610 <__aeabi_fadd+0x1b8>
 8000608:	230f      	movs	r3, #15
 800060a:	4033      	ands	r3, r6
 800060c:	2b04      	cmp	r3, #4
 800060e:	d19a      	bne.n	8000546 <__aeabi_fadd+0xee>
 8000610:	002b      	movs	r3, r5
 8000612:	e767      	b.n	80004e4 <__aeabi_fadd+0x8c>
 8000614:	2b00      	cmp	r3, #0
 8000616:	d023      	beq.n	8000660 <__aeabi_fadd+0x208>
 8000618:	1b53      	subs	r3, r2, r5
 800061a:	2d00      	cmp	r5, #0
 800061c:	d17b      	bne.n	8000716 <__aeabi_fadd+0x2be>
 800061e:	2e00      	cmp	r6, #0
 8000620:	d100      	bne.n	8000624 <__aeabi_fadd+0x1cc>
 8000622:	e086      	b.n	8000732 <__aeabi_fadd+0x2da>
 8000624:	1e5d      	subs	r5, r3, #1
 8000626:	2b01      	cmp	r3, #1
 8000628:	d100      	bne.n	800062c <__aeabi_fadd+0x1d4>
 800062a:	e08b      	b.n	8000744 <__aeabi_fadd+0x2ec>
 800062c:	2bff      	cmp	r3, #255	@ 0xff
 800062e:	d002      	beq.n	8000636 <__aeabi_fadd+0x1de>
 8000630:	002b      	movs	r3, r5
 8000632:	e075      	b.n	8000720 <__aeabi_fadd+0x2c8>
 8000634:	464c      	mov	r4, r9
 8000636:	4667      	mov	r7, ip
 8000638:	2f00      	cmp	r7, #0
 800063a:	d100      	bne.n	800063e <__aeabi_fadd+0x1e6>
 800063c:	e789      	b.n	8000552 <__aeabi_fadd+0xfa>
 800063e:	2280      	movs	r2, #128	@ 0x80
 8000640:	03d2      	lsls	r2, r2, #15
 8000642:	433a      	orrs	r2, r7
 8000644:	0252      	lsls	r2, r2, #9
 8000646:	20ff      	movs	r0, #255	@ 0xff
 8000648:	0a52      	lsrs	r2, r2, #9
 800064a:	e784      	b.n	8000556 <__aeabi_fadd+0xfe>
 800064c:	1a77      	subs	r7, r6, r1
 800064e:	017b      	lsls	r3, r7, #5
 8000650:	d46b      	bmi.n	800072a <__aeabi_fadd+0x2d2>
 8000652:	2f00      	cmp	r7, #0
 8000654:	d000      	beq.n	8000658 <__aeabi_fadd+0x200>
 8000656:	e765      	b.n	8000524 <__aeabi_fadd+0xcc>
 8000658:	2400      	movs	r4, #0
 800065a:	2000      	movs	r0, #0
 800065c:	2200      	movs	r2, #0
 800065e:	e77a      	b.n	8000556 <__aeabi_fadd+0xfe>
 8000660:	22fe      	movs	r2, #254	@ 0xfe
 8000662:	1c6b      	adds	r3, r5, #1
 8000664:	421a      	tst	r2, r3
 8000666:	d149      	bne.n	80006fc <__aeabi_fadd+0x2a4>
 8000668:	2d00      	cmp	r5, #0
 800066a:	d000      	beq.n	800066e <__aeabi_fadd+0x216>
 800066c:	e09f      	b.n	80007ae <__aeabi_fadd+0x356>
 800066e:	2e00      	cmp	r6, #0
 8000670:	d100      	bne.n	8000674 <__aeabi_fadd+0x21c>
 8000672:	e0ba      	b.n	80007ea <__aeabi_fadd+0x392>
 8000674:	2900      	cmp	r1, #0
 8000676:	d100      	bne.n	800067a <__aeabi_fadd+0x222>
 8000678:	e0cf      	b.n	800081a <__aeabi_fadd+0x3c2>
 800067a:	1872      	adds	r2, r6, r1
 800067c:	0153      	lsls	r3, r2, #5
 800067e:	d400      	bmi.n	8000682 <__aeabi_fadd+0x22a>
 8000680:	e0cd      	b.n	800081e <__aeabi_fadd+0x3c6>
 8000682:	0192      	lsls	r2, r2, #6
 8000684:	2001      	movs	r0, #1
 8000686:	0a52      	lsrs	r2, r2, #9
 8000688:	e765      	b.n	8000556 <__aeabi_fadd+0xfe>
 800068a:	2aff      	cmp	r2, #255	@ 0xff
 800068c:	d0d2      	beq.n	8000634 <__aeabi_fadd+0x1dc>
 800068e:	2080      	movs	r0, #128	@ 0x80
 8000690:	04c0      	lsls	r0, r0, #19
 8000692:	4306      	orrs	r6, r0
 8000694:	2001      	movs	r0, #1
 8000696:	2b1b      	cmp	r3, #27
 8000698:	dc08      	bgt.n	80006ac <__aeabi_fadd+0x254>
 800069a:	0030      	movs	r0, r6
 800069c:	2420      	movs	r4, #32
 800069e:	40d8      	lsrs	r0, r3
 80006a0:	1ae3      	subs	r3, r4, r3
 80006a2:	409e      	lsls	r6, r3
 80006a4:	0033      	movs	r3, r6
 80006a6:	1e5c      	subs	r4, r3, #1
 80006a8:	41a3      	sbcs	r3, r4
 80006aa:	4318      	orrs	r0, r3
 80006ac:	464c      	mov	r4, r9
 80006ae:	0015      	movs	r5, r2
 80006b0:	1a0e      	subs	r6, r1, r0
 80006b2:	e732      	b.n	800051a <__aeabi_fadd+0xc2>
 80006b4:	0008      	movs	r0, r1
 80006b6:	2220      	movs	r2, #32
 80006b8:	40d8      	lsrs	r0, r3
 80006ba:	1ad3      	subs	r3, r2, r3
 80006bc:	4099      	lsls	r1, r3
 80006be:	000b      	movs	r3, r1
 80006c0:	1e5a      	subs	r2, r3, #1
 80006c2:	4193      	sbcs	r3, r2
 80006c4:	4303      	orrs	r3, r0
 80006c6:	18f6      	adds	r6, r6, r3
 80006c8:	0173      	lsls	r3, r6, #5
 80006ca:	d59b      	bpl.n	8000604 <__aeabi_fadd+0x1ac>
 80006cc:	3501      	adds	r5, #1
 80006ce:	2dff      	cmp	r5, #255	@ 0xff
 80006d0:	d100      	bne.n	80006d4 <__aeabi_fadd+0x27c>
 80006d2:	e73e      	b.n	8000552 <__aeabi_fadd+0xfa>
 80006d4:	2301      	movs	r3, #1
 80006d6:	494d      	ldr	r1, [pc, #308]	@ (800080c <__aeabi_fadd+0x3b4>)
 80006d8:	0872      	lsrs	r2, r6, #1
 80006da:	4033      	ands	r3, r6
 80006dc:	400a      	ands	r2, r1
 80006de:	431a      	orrs	r2, r3
 80006e0:	0016      	movs	r6, r2
 80006e2:	0753      	lsls	r3, r2, #29
 80006e4:	d004      	beq.n	80006f0 <__aeabi_fadd+0x298>
 80006e6:	230f      	movs	r3, #15
 80006e8:	4013      	ands	r3, r2
 80006ea:	2b04      	cmp	r3, #4
 80006ec:	d000      	beq.n	80006f0 <__aeabi_fadd+0x298>
 80006ee:	e72a      	b.n	8000546 <__aeabi_fadd+0xee>
 80006f0:	0173      	lsls	r3, r6, #5
 80006f2:	d500      	bpl.n	80006f6 <__aeabi_fadd+0x29e>
 80006f4:	e72a      	b.n	800054c <__aeabi_fadd+0xf4>
 80006f6:	002b      	movs	r3, r5
 80006f8:	08f7      	lsrs	r7, r6, #3
 80006fa:	e6f7      	b.n	80004ec <__aeabi_fadd+0x94>
 80006fc:	2bff      	cmp	r3, #255	@ 0xff
 80006fe:	d100      	bne.n	8000702 <__aeabi_fadd+0x2aa>
 8000700:	e727      	b.n	8000552 <__aeabi_fadd+0xfa>
 8000702:	1871      	adds	r1, r6, r1
 8000704:	0849      	lsrs	r1, r1, #1
 8000706:	074a      	lsls	r2, r1, #29
 8000708:	d02f      	beq.n	800076a <__aeabi_fadd+0x312>
 800070a:	220f      	movs	r2, #15
 800070c:	400a      	ands	r2, r1
 800070e:	2a04      	cmp	r2, #4
 8000710:	d02b      	beq.n	800076a <__aeabi_fadd+0x312>
 8000712:	1d0e      	adds	r6, r1, #4
 8000714:	e6e6      	b.n	80004e4 <__aeabi_fadd+0x8c>
 8000716:	2aff      	cmp	r2, #255	@ 0xff
 8000718:	d08d      	beq.n	8000636 <__aeabi_fadd+0x1de>
 800071a:	2080      	movs	r0, #128	@ 0x80
 800071c:	04c0      	lsls	r0, r0, #19
 800071e:	4306      	orrs	r6, r0
 8000720:	2b1b      	cmp	r3, #27
 8000722:	dd24      	ble.n	800076e <__aeabi_fadd+0x316>
 8000724:	0013      	movs	r3, r2
 8000726:	1d4e      	adds	r6, r1, #5
 8000728:	e6dc      	b.n	80004e4 <__aeabi_fadd+0x8c>
 800072a:	464c      	mov	r4, r9
 800072c:	1b8f      	subs	r7, r1, r6
 800072e:	e6f9      	b.n	8000524 <__aeabi_fadd+0xcc>
 8000730:	464c      	mov	r4, r9
 8000732:	000e      	movs	r6, r1
 8000734:	e6d6      	b.n	80004e4 <__aeabi_fadd+0x8c>
 8000736:	2e00      	cmp	r6, #0
 8000738:	d149      	bne.n	80007ce <__aeabi_fadd+0x376>
 800073a:	2900      	cmp	r1, #0
 800073c:	d068      	beq.n	8000810 <__aeabi_fadd+0x3b8>
 800073e:	4667      	mov	r7, ip
 8000740:	464c      	mov	r4, r9
 8000742:	e77c      	b.n	800063e <__aeabi_fadd+0x1e6>
 8000744:	1870      	adds	r0, r6, r1
 8000746:	0143      	lsls	r3, r0, #5
 8000748:	d574      	bpl.n	8000834 <__aeabi_fadd+0x3dc>
 800074a:	4930      	ldr	r1, [pc, #192]	@ (800080c <__aeabi_fadd+0x3b4>)
 800074c:	0840      	lsrs	r0, r0, #1
 800074e:	4001      	ands	r1, r0
 8000750:	0743      	lsls	r3, r0, #29
 8000752:	d009      	beq.n	8000768 <__aeabi_fadd+0x310>
 8000754:	230f      	movs	r3, #15
 8000756:	4003      	ands	r3, r0
 8000758:	2b04      	cmp	r3, #4
 800075a:	d005      	beq.n	8000768 <__aeabi_fadd+0x310>
 800075c:	2302      	movs	r3, #2
 800075e:	1d0e      	adds	r6, r1, #4
 8000760:	e6c0      	b.n	80004e4 <__aeabi_fadd+0x8c>
 8000762:	2301      	movs	r3, #1
 8000764:	08cf      	lsrs	r7, r1, #3
 8000766:	e6c1      	b.n	80004ec <__aeabi_fadd+0x94>
 8000768:	2302      	movs	r3, #2
 800076a:	08cf      	lsrs	r7, r1, #3
 800076c:	e6be      	b.n	80004ec <__aeabi_fadd+0x94>
 800076e:	2520      	movs	r5, #32
 8000770:	0030      	movs	r0, r6
 8000772:	40d8      	lsrs	r0, r3
 8000774:	1aeb      	subs	r3, r5, r3
 8000776:	409e      	lsls	r6, r3
 8000778:	0033      	movs	r3, r6
 800077a:	1e5d      	subs	r5, r3, #1
 800077c:	41ab      	sbcs	r3, r5
 800077e:	4303      	orrs	r3, r0
 8000780:	0015      	movs	r5, r2
 8000782:	185e      	adds	r6, r3, r1
 8000784:	e7a0      	b.n	80006c8 <__aeabi_fadd+0x270>
 8000786:	2900      	cmp	r1, #0
 8000788:	d100      	bne.n	800078c <__aeabi_fadd+0x334>
 800078a:	e765      	b.n	8000658 <__aeabi_fadd+0x200>
 800078c:	464c      	mov	r4, r9
 800078e:	4667      	mov	r7, ip
 8000790:	e6ac      	b.n	80004ec <__aeabi_fadd+0x94>
 8000792:	1b8f      	subs	r7, r1, r6
 8000794:	017b      	lsls	r3, r7, #5
 8000796:	d52e      	bpl.n	80007f6 <__aeabi_fadd+0x39e>
 8000798:	01bf      	lsls	r7, r7, #6
 800079a:	09bf      	lsrs	r7, r7, #6
 800079c:	0038      	movs	r0, r7
 800079e:	f001 f935 	bl	8001a0c <__clzsi2>
 80007a2:	003b      	movs	r3, r7
 80007a4:	3805      	subs	r0, #5
 80007a6:	4083      	lsls	r3, r0
 80007a8:	464c      	mov	r4, r9
 80007aa:	3501      	adds	r5, #1
 80007ac:	e710      	b.n	80005d0 <__aeabi_fadd+0x178>
 80007ae:	2e00      	cmp	r6, #0
 80007b0:	d100      	bne.n	80007b4 <__aeabi_fadd+0x35c>
 80007b2:	e740      	b.n	8000636 <__aeabi_fadd+0x1de>
 80007b4:	2900      	cmp	r1, #0
 80007b6:	d100      	bne.n	80007ba <__aeabi_fadd+0x362>
 80007b8:	e741      	b.n	800063e <__aeabi_fadd+0x1e6>
 80007ba:	2380      	movs	r3, #128	@ 0x80
 80007bc:	03db      	lsls	r3, r3, #15
 80007be:	429f      	cmp	r7, r3
 80007c0:	d200      	bcs.n	80007c4 <__aeabi_fadd+0x36c>
 80007c2:	e73c      	b.n	800063e <__aeabi_fadd+0x1e6>
 80007c4:	459c      	cmp	ip, r3
 80007c6:	d300      	bcc.n	80007ca <__aeabi_fadd+0x372>
 80007c8:	e739      	b.n	800063e <__aeabi_fadd+0x1e6>
 80007ca:	4667      	mov	r7, ip
 80007cc:	e737      	b.n	800063e <__aeabi_fadd+0x1e6>
 80007ce:	2900      	cmp	r1, #0
 80007d0:	d100      	bne.n	80007d4 <__aeabi_fadd+0x37c>
 80007d2:	e734      	b.n	800063e <__aeabi_fadd+0x1e6>
 80007d4:	2380      	movs	r3, #128	@ 0x80
 80007d6:	03db      	lsls	r3, r3, #15
 80007d8:	429f      	cmp	r7, r3
 80007da:	d200      	bcs.n	80007de <__aeabi_fadd+0x386>
 80007dc:	e72f      	b.n	800063e <__aeabi_fadd+0x1e6>
 80007de:	459c      	cmp	ip, r3
 80007e0:	d300      	bcc.n	80007e4 <__aeabi_fadd+0x38c>
 80007e2:	e72c      	b.n	800063e <__aeabi_fadd+0x1e6>
 80007e4:	464c      	mov	r4, r9
 80007e6:	4667      	mov	r7, ip
 80007e8:	e729      	b.n	800063e <__aeabi_fadd+0x1e6>
 80007ea:	2900      	cmp	r1, #0
 80007ec:	d100      	bne.n	80007f0 <__aeabi_fadd+0x398>
 80007ee:	e734      	b.n	800065a <__aeabi_fadd+0x202>
 80007f0:	2300      	movs	r3, #0
 80007f2:	08cf      	lsrs	r7, r1, #3
 80007f4:	e67a      	b.n	80004ec <__aeabi_fadd+0x94>
 80007f6:	464c      	mov	r4, r9
 80007f8:	2301      	movs	r3, #1
 80007fa:	08ff      	lsrs	r7, r7, #3
 80007fc:	e676      	b.n	80004ec <__aeabi_fadd+0x94>
 80007fe:	2f00      	cmp	r7, #0
 8000800:	d100      	bne.n	8000804 <__aeabi_fadd+0x3ac>
 8000802:	e729      	b.n	8000658 <__aeabi_fadd+0x200>
 8000804:	08ff      	lsrs	r7, r7, #3
 8000806:	e671      	b.n	80004ec <__aeabi_fadd+0x94>
 8000808:	fbffffff 	.word	0xfbffffff
 800080c:	7dffffff 	.word	0x7dffffff
 8000810:	2280      	movs	r2, #128	@ 0x80
 8000812:	2400      	movs	r4, #0
 8000814:	20ff      	movs	r0, #255	@ 0xff
 8000816:	03d2      	lsls	r2, r2, #15
 8000818:	e69d      	b.n	8000556 <__aeabi_fadd+0xfe>
 800081a:	2300      	movs	r3, #0
 800081c:	e666      	b.n	80004ec <__aeabi_fadd+0x94>
 800081e:	2300      	movs	r3, #0
 8000820:	08d7      	lsrs	r7, r2, #3
 8000822:	e663      	b.n	80004ec <__aeabi_fadd+0x94>
 8000824:	2001      	movs	r0, #1
 8000826:	0172      	lsls	r2, r6, #5
 8000828:	d500      	bpl.n	800082c <__aeabi_fadd+0x3d4>
 800082a:	e6e7      	b.n	80005fc <__aeabi_fadd+0x1a4>
 800082c:	0031      	movs	r1, r6
 800082e:	2300      	movs	r3, #0
 8000830:	08cf      	lsrs	r7, r1, #3
 8000832:	e65b      	b.n	80004ec <__aeabi_fadd+0x94>
 8000834:	2301      	movs	r3, #1
 8000836:	08c7      	lsrs	r7, r0, #3
 8000838:	e658      	b.n	80004ec <__aeabi_fadd+0x94>
 800083a:	46c0      	nop			@ (mov r8, r8)

0800083c <__aeabi_fmul>:
 800083c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800083e:	464f      	mov	r7, r9
 8000840:	4646      	mov	r6, r8
 8000842:	46d6      	mov	lr, sl
 8000844:	0044      	lsls	r4, r0, #1
 8000846:	b5c0      	push	{r6, r7, lr}
 8000848:	0246      	lsls	r6, r0, #9
 800084a:	1c0f      	adds	r7, r1, #0
 800084c:	0a76      	lsrs	r6, r6, #9
 800084e:	0e24      	lsrs	r4, r4, #24
 8000850:	0fc5      	lsrs	r5, r0, #31
 8000852:	2c00      	cmp	r4, #0
 8000854:	d100      	bne.n	8000858 <__aeabi_fmul+0x1c>
 8000856:	e0da      	b.n	8000a0e <__aeabi_fmul+0x1d2>
 8000858:	2cff      	cmp	r4, #255	@ 0xff
 800085a:	d074      	beq.n	8000946 <__aeabi_fmul+0x10a>
 800085c:	2380      	movs	r3, #128	@ 0x80
 800085e:	00f6      	lsls	r6, r6, #3
 8000860:	04db      	lsls	r3, r3, #19
 8000862:	431e      	orrs	r6, r3
 8000864:	2300      	movs	r3, #0
 8000866:	4699      	mov	r9, r3
 8000868:	469a      	mov	sl, r3
 800086a:	3c7f      	subs	r4, #127	@ 0x7f
 800086c:	027b      	lsls	r3, r7, #9
 800086e:	0a5b      	lsrs	r3, r3, #9
 8000870:	4698      	mov	r8, r3
 8000872:	007b      	lsls	r3, r7, #1
 8000874:	0e1b      	lsrs	r3, r3, #24
 8000876:	0fff      	lsrs	r7, r7, #31
 8000878:	2b00      	cmp	r3, #0
 800087a:	d074      	beq.n	8000966 <__aeabi_fmul+0x12a>
 800087c:	2bff      	cmp	r3, #255	@ 0xff
 800087e:	d100      	bne.n	8000882 <__aeabi_fmul+0x46>
 8000880:	e08e      	b.n	80009a0 <__aeabi_fmul+0x164>
 8000882:	4642      	mov	r2, r8
 8000884:	2180      	movs	r1, #128	@ 0x80
 8000886:	00d2      	lsls	r2, r2, #3
 8000888:	04c9      	lsls	r1, r1, #19
 800088a:	4311      	orrs	r1, r2
 800088c:	3b7f      	subs	r3, #127	@ 0x7f
 800088e:	002a      	movs	r2, r5
 8000890:	18e4      	adds	r4, r4, r3
 8000892:	464b      	mov	r3, r9
 8000894:	407a      	eors	r2, r7
 8000896:	4688      	mov	r8, r1
 8000898:	b2d2      	uxtb	r2, r2
 800089a:	2b0a      	cmp	r3, #10
 800089c:	dc75      	bgt.n	800098a <__aeabi_fmul+0x14e>
 800089e:	464b      	mov	r3, r9
 80008a0:	2000      	movs	r0, #0
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	dd0f      	ble.n	80008c6 <__aeabi_fmul+0x8a>
 80008a6:	4649      	mov	r1, r9
 80008a8:	2301      	movs	r3, #1
 80008aa:	408b      	lsls	r3, r1
 80008ac:	21a6      	movs	r1, #166	@ 0xa6
 80008ae:	00c9      	lsls	r1, r1, #3
 80008b0:	420b      	tst	r3, r1
 80008b2:	d169      	bne.n	8000988 <__aeabi_fmul+0x14c>
 80008b4:	2190      	movs	r1, #144	@ 0x90
 80008b6:	0089      	lsls	r1, r1, #2
 80008b8:	420b      	tst	r3, r1
 80008ba:	d000      	beq.n	80008be <__aeabi_fmul+0x82>
 80008bc:	e100      	b.n	8000ac0 <__aeabi_fmul+0x284>
 80008be:	2188      	movs	r1, #136	@ 0x88
 80008c0:	4219      	tst	r1, r3
 80008c2:	d000      	beq.n	80008c6 <__aeabi_fmul+0x8a>
 80008c4:	e0f5      	b.n	8000ab2 <__aeabi_fmul+0x276>
 80008c6:	4641      	mov	r1, r8
 80008c8:	0409      	lsls	r1, r1, #16
 80008ca:	0c09      	lsrs	r1, r1, #16
 80008cc:	4643      	mov	r3, r8
 80008ce:	0008      	movs	r0, r1
 80008d0:	0c35      	lsrs	r5, r6, #16
 80008d2:	0436      	lsls	r6, r6, #16
 80008d4:	0c1b      	lsrs	r3, r3, #16
 80008d6:	0c36      	lsrs	r6, r6, #16
 80008d8:	4370      	muls	r0, r6
 80008da:	4369      	muls	r1, r5
 80008dc:	435e      	muls	r6, r3
 80008de:	435d      	muls	r5, r3
 80008e0:	1876      	adds	r6, r6, r1
 80008e2:	0c03      	lsrs	r3, r0, #16
 80008e4:	199b      	adds	r3, r3, r6
 80008e6:	4299      	cmp	r1, r3
 80008e8:	d903      	bls.n	80008f2 <__aeabi_fmul+0xb6>
 80008ea:	2180      	movs	r1, #128	@ 0x80
 80008ec:	0249      	lsls	r1, r1, #9
 80008ee:	468c      	mov	ip, r1
 80008f0:	4465      	add	r5, ip
 80008f2:	0400      	lsls	r0, r0, #16
 80008f4:	0419      	lsls	r1, r3, #16
 80008f6:	0c00      	lsrs	r0, r0, #16
 80008f8:	1809      	adds	r1, r1, r0
 80008fa:	018e      	lsls	r6, r1, #6
 80008fc:	1e70      	subs	r0, r6, #1
 80008fe:	4186      	sbcs	r6, r0
 8000900:	0c1b      	lsrs	r3, r3, #16
 8000902:	0e89      	lsrs	r1, r1, #26
 8000904:	195b      	adds	r3, r3, r5
 8000906:	430e      	orrs	r6, r1
 8000908:	019b      	lsls	r3, r3, #6
 800090a:	431e      	orrs	r6, r3
 800090c:	011b      	lsls	r3, r3, #4
 800090e:	d46c      	bmi.n	80009ea <__aeabi_fmul+0x1ae>
 8000910:	0023      	movs	r3, r4
 8000912:	337f      	adds	r3, #127	@ 0x7f
 8000914:	2b00      	cmp	r3, #0
 8000916:	dc00      	bgt.n	800091a <__aeabi_fmul+0xde>
 8000918:	e0b1      	b.n	8000a7e <__aeabi_fmul+0x242>
 800091a:	0015      	movs	r5, r2
 800091c:	0771      	lsls	r1, r6, #29
 800091e:	d00b      	beq.n	8000938 <__aeabi_fmul+0xfc>
 8000920:	200f      	movs	r0, #15
 8000922:	0021      	movs	r1, r4
 8000924:	4030      	ands	r0, r6
 8000926:	2804      	cmp	r0, #4
 8000928:	d006      	beq.n	8000938 <__aeabi_fmul+0xfc>
 800092a:	3604      	adds	r6, #4
 800092c:	0132      	lsls	r2, r6, #4
 800092e:	d503      	bpl.n	8000938 <__aeabi_fmul+0xfc>
 8000930:	4b6e      	ldr	r3, [pc, #440]	@ (8000aec <__aeabi_fmul+0x2b0>)
 8000932:	401e      	ands	r6, r3
 8000934:	000b      	movs	r3, r1
 8000936:	3380      	adds	r3, #128	@ 0x80
 8000938:	2bfe      	cmp	r3, #254	@ 0xfe
 800093a:	dd00      	ble.n	800093e <__aeabi_fmul+0x102>
 800093c:	e0bd      	b.n	8000aba <__aeabi_fmul+0x27e>
 800093e:	01b2      	lsls	r2, r6, #6
 8000940:	0a52      	lsrs	r2, r2, #9
 8000942:	b2db      	uxtb	r3, r3
 8000944:	e048      	b.n	80009d8 <__aeabi_fmul+0x19c>
 8000946:	2e00      	cmp	r6, #0
 8000948:	d000      	beq.n	800094c <__aeabi_fmul+0x110>
 800094a:	e092      	b.n	8000a72 <__aeabi_fmul+0x236>
 800094c:	2308      	movs	r3, #8
 800094e:	4699      	mov	r9, r3
 8000950:	3b06      	subs	r3, #6
 8000952:	469a      	mov	sl, r3
 8000954:	027b      	lsls	r3, r7, #9
 8000956:	0a5b      	lsrs	r3, r3, #9
 8000958:	4698      	mov	r8, r3
 800095a:	007b      	lsls	r3, r7, #1
 800095c:	24ff      	movs	r4, #255	@ 0xff
 800095e:	0e1b      	lsrs	r3, r3, #24
 8000960:	0fff      	lsrs	r7, r7, #31
 8000962:	2b00      	cmp	r3, #0
 8000964:	d18a      	bne.n	800087c <__aeabi_fmul+0x40>
 8000966:	4642      	mov	r2, r8
 8000968:	2a00      	cmp	r2, #0
 800096a:	d164      	bne.n	8000a36 <__aeabi_fmul+0x1fa>
 800096c:	4649      	mov	r1, r9
 800096e:	3201      	adds	r2, #1
 8000970:	4311      	orrs	r1, r2
 8000972:	4689      	mov	r9, r1
 8000974:	290a      	cmp	r1, #10
 8000976:	dc08      	bgt.n	800098a <__aeabi_fmul+0x14e>
 8000978:	407d      	eors	r5, r7
 800097a:	2001      	movs	r0, #1
 800097c:	b2ea      	uxtb	r2, r5
 800097e:	2902      	cmp	r1, #2
 8000980:	dc91      	bgt.n	80008a6 <__aeabi_fmul+0x6a>
 8000982:	0015      	movs	r5, r2
 8000984:	2200      	movs	r2, #0
 8000986:	e027      	b.n	80009d8 <__aeabi_fmul+0x19c>
 8000988:	0015      	movs	r5, r2
 800098a:	4653      	mov	r3, sl
 800098c:	2b02      	cmp	r3, #2
 800098e:	d100      	bne.n	8000992 <__aeabi_fmul+0x156>
 8000990:	e093      	b.n	8000aba <__aeabi_fmul+0x27e>
 8000992:	2b03      	cmp	r3, #3
 8000994:	d01a      	beq.n	80009cc <__aeabi_fmul+0x190>
 8000996:	2b01      	cmp	r3, #1
 8000998:	d12c      	bne.n	80009f4 <__aeabi_fmul+0x1b8>
 800099a:	2300      	movs	r3, #0
 800099c:	2200      	movs	r2, #0
 800099e:	e01b      	b.n	80009d8 <__aeabi_fmul+0x19c>
 80009a0:	4643      	mov	r3, r8
 80009a2:	34ff      	adds	r4, #255	@ 0xff
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d055      	beq.n	8000a54 <__aeabi_fmul+0x218>
 80009a8:	2103      	movs	r1, #3
 80009aa:	464b      	mov	r3, r9
 80009ac:	430b      	orrs	r3, r1
 80009ae:	0019      	movs	r1, r3
 80009b0:	2b0a      	cmp	r3, #10
 80009b2:	dc00      	bgt.n	80009b6 <__aeabi_fmul+0x17a>
 80009b4:	e092      	b.n	8000adc <__aeabi_fmul+0x2a0>
 80009b6:	2b0f      	cmp	r3, #15
 80009b8:	d000      	beq.n	80009bc <__aeabi_fmul+0x180>
 80009ba:	e08c      	b.n	8000ad6 <__aeabi_fmul+0x29a>
 80009bc:	2280      	movs	r2, #128	@ 0x80
 80009be:	03d2      	lsls	r2, r2, #15
 80009c0:	4216      	tst	r6, r2
 80009c2:	d003      	beq.n	80009cc <__aeabi_fmul+0x190>
 80009c4:	4643      	mov	r3, r8
 80009c6:	4213      	tst	r3, r2
 80009c8:	d100      	bne.n	80009cc <__aeabi_fmul+0x190>
 80009ca:	e07d      	b.n	8000ac8 <__aeabi_fmul+0x28c>
 80009cc:	2280      	movs	r2, #128	@ 0x80
 80009ce:	03d2      	lsls	r2, r2, #15
 80009d0:	4332      	orrs	r2, r6
 80009d2:	0252      	lsls	r2, r2, #9
 80009d4:	0a52      	lsrs	r2, r2, #9
 80009d6:	23ff      	movs	r3, #255	@ 0xff
 80009d8:	05d8      	lsls	r0, r3, #23
 80009da:	07ed      	lsls	r5, r5, #31
 80009dc:	4310      	orrs	r0, r2
 80009de:	4328      	orrs	r0, r5
 80009e0:	bce0      	pop	{r5, r6, r7}
 80009e2:	46ba      	mov	sl, r7
 80009e4:	46b1      	mov	r9, r6
 80009e6:	46a8      	mov	r8, r5
 80009e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ea:	2301      	movs	r3, #1
 80009ec:	0015      	movs	r5, r2
 80009ee:	0871      	lsrs	r1, r6, #1
 80009f0:	401e      	ands	r6, r3
 80009f2:	430e      	orrs	r6, r1
 80009f4:	0023      	movs	r3, r4
 80009f6:	3380      	adds	r3, #128	@ 0x80
 80009f8:	1c61      	adds	r1, r4, #1
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	dd41      	ble.n	8000a82 <__aeabi_fmul+0x246>
 80009fe:	0772      	lsls	r2, r6, #29
 8000a00:	d094      	beq.n	800092c <__aeabi_fmul+0xf0>
 8000a02:	220f      	movs	r2, #15
 8000a04:	4032      	ands	r2, r6
 8000a06:	2a04      	cmp	r2, #4
 8000a08:	d000      	beq.n	8000a0c <__aeabi_fmul+0x1d0>
 8000a0a:	e78e      	b.n	800092a <__aeabi_fmul+0xee>
 8000a0c:	e78e      	b.n	800092c <__aeabi_fmul+0xf0>
 8000a0e:	2e00      	cmp	r6, #0
 8000a10:	d105      	bne.n	8000a1e <__aeabi_fmul+0x1e2>
 8000a12:	2304      	movs	r3, #4
 8000a14:	4699      	mov	r9, r3
 8000a16:	3b03      	subs	r3, #3
 8000a18:	2400      	movs	r4, #0
 8000a1a:	469a      	mov	sl, r3
 8000a1c:	e726      	b.n	800086c <__aeabi_fmul+0x30>
 8000a1e:	0030      	movs	r0, r6
 8000a20:	f000 fff4 	bl	8001a0c <__clzsi2>
 8000a24:	2476      	movs	r4, #118	@ 0x76
 8000a26:	1f43      	subs	r3, r0, #5
 8000a28:	409e      	lsls	r6, r3
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	4264      	negs	r4, r4
 8000a2e:	4699      	mov	r9, r3
 8000a30:	469a      	mov	sl, r3
 8000a32:	1a24      	subs	r4, r4, r0
 8000a34:	e71a      	b.n	800086c <__aeabi_fmul+0x30>
 8000a36:	4640      	mov	r0, r8
 8000a38:	f000 ffe8 	bl	8001a0c <__clzsi2>
 8000a3c:	464b      	mov	r3, r9
 8000a3e:	1a24      	subs	r4, r4, r0
 8000a40:	3c76      	subs	r4, #118	@ 0x76
 8000a42:	2b0a      	cmp	r3, #10
 8000a44:	dca1      	bgt.n	800098a <__aeabi_fmul+0x14e>
 8000a46:	4643      	mov	r3, r8
 8000a48:	3805      	subs	r0, #5
 8000a4a:	4083      	lsls	r3, r0
 8000a4c:	407d      	eors	r5, r7
 8000a4e:	4698      	mov	r8, r3
 8000a50:	b2ea      	uxtb	r2, r5
 8000a52:	e724      	b.n	800089e <__aeabi_fmul+0x62>
 8000a54:	464a      	mov	r2, r9
 8000a56:	3302      	adds	r3, #2
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	002a      	movs	r2, r5
 8000a5c:	407a      	eors	r2, r7
 8000a5e:	b2d2      	uxtb	r2, r2
 8000a60:	2b0a      	cmp	r3, #10
 8000a62:	dc92      	bgt.n	800098a <__aeabi_fmul+0x14e>
 8000a64:	4649      	mov	r1, r9
 8000a66:	0015      	movs	r5, r2
 8000a68:	2900      	cmp	r1, #0
 8000a6a:	d026      	beq.n	8000aba <__aeabi_fmul+0x27e>
 8000a6c:	4699      	mov	r9, r3
 8000a6e:	2002      	movs	r0, #2
 8000a70:	e719      	b.n	80008a6 <__aeabi_fmul+0x6a>
 8000a72:	230c      	movs	r3, #12
 8000a74:	4699      	mov	r9, r3
 8000a76:	3b09      	subs	r3, #9
 8000a78:	24ff      	movs	r4, #255	@ 0xff
 8000a7a:	469a      	mov	sl, r3
 8000a7c:	e6f6      	b.n	800086c <__aeabi_fmul+0x30>
 8000a7e:	0015      	movs	r5, r2
 8000a80:	0021      	movs	r1, r4
 8000a82:	2201      	movs	r2, #1
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	2b1b      	cmp	r3, #27
 8000a88:	dd00      	ble.n	8000a8c <__aeabi_fmul+0x250>
 8000a8a:	e786      	b.n	800099a <__aeabi_fmul+0x15e>
 8000a8c:	319e      	adds	r1, #158	@ 0x9e
 8000a8e:	0032      	movs	r2, r6
 8000a90:	408e      	lsls	r6, r1
 8000a92:	40da      	lsrs	r2, r3
 8000a94:	1e73      	subs	r3, r6, #1
 8000a96:	419e      	sbcs	r6, r3
 8000a98:	4332      	orrs	r2, r6
 8000a9a:	0753      	lsls	r3, r2, #29
 8000a9c:	d004      	beq.n	8000aa8 <__aeabi_fmul+0x26c>
 8000a9e:	230f      	movs	r3, #15
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	d000      	beq.n	8000aa8 <__aeabi_fmul+0x26c>
 8000aa6:	3204      	adds	r2, #4
 8000aa8:	0153      	lsls	r3, r2, #5
 8000aaa:	d510      	bpl.n	8000ace <__aeabi_fmul+0x292>
 8000aac:	2301      	movs	r3, #1
 8000aae:	2200      	movs	r2, #0
 8000ab0:	e792      	b.n	80009d8 <__aeabi_fmul+0x19c>
 8000ab2:	003d      	movs	r5, r7
 8000ab4:	4646      	mov	r6, r8
 8000ab6:	4682      	mov	sl, r0
 8000ab8:	e767      	b.n	800098a <__aeabi_fmul+0x14e>
 8000aba:	23ff      	movs	r3, #255	@ 0xff
 8000abc:	2200      	movs	r2, #0
 8000abe:	e78b      	b.n	80009d8 <__aeabi_fmul+0x19c>
 8000ac0:	2280      	movs	r2, #128	@ 0x80
 8000ac2:	2500      	movs	r5, #0
 8000ac4:	03d2      	lsls	r2, r2, #15
 8000ac6:	e786      	b.n	80009d6 <__aeabi_fmul+0x19a>
 8000ac8:	003d      	movs	r5, r7
 8000aca:	431a      	orrs	r2, r3
 8000acc:	e783      	b.n	80009d6 <__aeabi_fmul+0x19a>
 8000ace:	0192      	lsls	r2, r2, #6
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	0a52      	lsrs	r2, r2, #9
 8000ad4:	e780      	b.n	80009d8 <__aeabi_fmul+0x19c>
 8000ad6:	003d      	movs	r5, r7
 8000ad8:	4646      	mov	r6, r8
 8000ada:	e777      	b.n	80009cc <__aeabi_fmul+0x190>
 8000adc:	002a      	movs	r2, r5
 8000ade:	2301      	movs	r3, #1
 8000ae0:	407a      	eors	r2, r7
 8000ae2:	408b      	lsls	r3, r1
 8000ae4:	2003      	movs	r0, #3
 8000ae6:	b2d2      	uxtb	r2, r2
 8000ae8:	e6e9      	b.n	80008be <__aeabi_fmul+0x82>
 8000aea:	46c0      	nop			@ (mov r8, r8)
 8000aec:	f7ffffff 	.word	0xf7ffffff

08000af0 <__aeabi_dmul>:
 8000af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000af2:	4657      	mov	r7, sl
 8000af4:	464e      	mov	r6, r9
 8000af6:	46de      	mov	lr, fp
 8000af8:	4645      	mov	r5, r8
 8000afa:	b5e0      	push	{r5, r6, r7, lr}
 8000afc:	001f      	movs	r7, r3
 8000afe:	030b      	lsls	r3, r1, #12
 8000b00:	0b1b      	lsrs	r3, r3, #12
 8000b02:	0016      	movs	r6, r2
 8000b04:	469a      	mov	sl, r3
 8000b06:	0fca      	lsrs	r2, r1, #31
 8000b08:	004b      	lsls	r3, r1, #1
 8000b0a:	0004      	movs	r4, r0
 8000b0c:	4691      	mov	r9, r2
 8000b0e:	b085      	sub	sp, #20
 8000b10:	0d5b      	lsrs	r3, r3, #21
 8000b12:	d100      	bne.n	8000b16 <__aeabi_dmul+0x26>
 8000b14:	e1cf      	b.n	8000eb6 <__aeabi_dmul+0x3c6>
 8000b16:	4acd      	ldr	r2, [pc, #820]	@ (8000e4c <__aeabi_dmul+0x35c>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d055      	beq.n	8000bc8 <__aeabi_dmul+0xd8>
 8000b1c:	4651      	mov	r1, sl
 8000b1e:	0f42      	lsrs	r2, r0, #29
 8000b20:	00c9      	lsls	r1, r1, #3
 8000b22:	430a      	orrs	r2, r1
 8000b24:	2180      	movs	r1, #128	@ 0x80
 8000b26:	0409      	lsls	r1, r1, #16
 8000b28:	4311      	orrs	r1, r2
 8000b2a:	00c2      	lsls	r2, r0, #3
 8000b2c:	4690      	mov	r8, r2
 8000b2e:	4ac8      	ldr	r2, [pc, #800]	@ (8000e50 <__aeabi_dmul+0x360>)
 8000b30:	468a      	mov	sl, r1
 8000b32:	4693      	mov	fp, r2
 8000b34:	449b      	add	fp, r3
 8000b36:	2300      	movs	r3, #0
 8000b38:	2500      	movs	r5, #0
 8000b3a:	9302      	str	r3, [sp, #8]
 8000b3c:	033c      	lsls	r4, r7, #12
 8000b3e:	007b      	lsls	r3, r7, #1
 8000b40:	0ffa      	lsrs	r2, r7, #31
 8000b42:	9601      	str	r6, [sp, #4]
 8000b44:	0b24      	lsrs	r4, r4, #12
 8000b46:	0d5b      	lsrs	r3, r3, #21
 8000b48:	9200      	str	r2, [sp, #0]
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_dmul+0x5e>
 8000b4c:	e188      	b.n	8000e60 <__aeabi_dmul+0x370>
 8000b4e:	4abf      	ldr	r2, [pc, #764]	@ (8000e4c <__aeabi_dmul+0x35c>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d100      	bne.n	8000b56 <__aeabi_dmul+0x66>
 8000b54:	e092      	b.n	8000c7c <__aeabi_dmul+0x18c>
 8000b56:	4abe      	ldr	r2, [pc, #760]	@ (8000e50 <__aeabi_dmul+0x360>)
 8000b58:	4694      	mov	ip, r2
 8000b5a:	4463      	add	r3, ip
 8000b5c:	449b      	add	fp, r3
 8000b5e:	2d0a      	cmp	r5, #10
 8000b60:	dc42      	bgt.n	8000be8 <__aeabi_dmul+0xf8>
 8000b62:	00e4      	lsls	r4, r4, #3
 8000b64:	0f73      	lsrs	r3, r6, #29
 8000b66:	4323      	orrs	r3, r4
 8000b68:	2480      	movs	r4, #128	@ 0x80
 8000b6a:	4649      	mov	r1, r9
 8000b6c:	0424      	lsls	r4, r4, #16
 8000b6e:	431c      	orrs	r4, r3
 8000b70:	00f3      	lsls	r3, r6, #3
 8000b72:	9301      	str	r3, [sp, #4]
 8000b74:	9b00      	ldr	r3, [sp, #0]
 8000b76:	2000      	movs	r0, #0
 8000b78:	4059      	eors	r1, r3
 8000b7a:	b2cb      	uxtb	r3, r1
 8000b7c:	9303      	str	r3, [sp, #12]
 8000b7e:	2d02      	cmp	r5, #2
 8000b80:	dc00      	bgt.n	8000b84 <__aeabi_dmul+0x94>
 8000b82:	e094      	b.n	8000cae <__aeabi_dmul+0x1be>
 8000b84:	2301      	movs	r3, #1
 8000b86:	40ab      	lsls	r3, r5
 8000b88:	001d      	movs	r5, r3
 8000b8a:	23a6      	movs	r3, #166	@ 0xa6
 8000b8c:	002a      	movs	r2, r5
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	401a      	ands	r2, r3
 8000b92:	421d      	tst	r5, r3
 8000b94:	d000      	beq.n	8000b98 <__aeabi_dmul+0xa8>
 8000b96:	e229      	b.n	8000fec <__aeabi_dmul+0x4fc>
 8000b98:	2390      	movs	r3, #144	@ 0x90
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	421d      	tst	r5, r3
 8000b9e:	d100      	bne.n	8000ba2 <__aeabi_dmul+0xb2>
 8000ba0:	e24d      	b.n	800103e <__aeabi_dmul+0x54e>
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	2480      	movs	r4, #128	@ 0x80
 8000ba6:	4699      	mov	r9, r3
 8000ba8:	0324      	lsls	r4, r4, #12
 8000baa:	4ba8      	ldr	r3, [pc, #672]	@ (8000e4c <__aeabi_dmul+0x35c>)
 8000bac:	0010      	movs	r0, r2
 8000bae:	464a      	mov	r2, r9
 8000bb0:	051b      	lsls	r3, r3, #20
 8000bb2:	4323      	orrs	r3, r4
 8000bb4:	07d2      	lsls	r2, r2, #31
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	0019      	movs	r1, r3
 8000bba:	b005      	add	sp, #20
 8000bbc:	bcf0      	pop	{r4, r5, r6, r7}
 8000bbe:	46bb      	mov	fp, r7
 8000bc0:	46b2      	mov	sl, r6
 8000bc2:	46a9      	mov	r9, r5
 8000bc4:	46a0      	mov	r8, r4
 8000bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bc8:	4652      	mov	r2, sl
 8000bca:	4302      	orrs	r2, r0
 8000bcc:	4690      	mov	r8, r2
 8000bce:	d000      	beq.n	8000bd2 <__aeabi_dmul+0xe2>
 8000bd0:	e1ac      	b.n	8000f2c <__aeabi_dmul+0x43c>
 8000bd2:	469b      	mov	fp, r3
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	4692      	mov	sl, r2
 8000bd8:	2508      	movs	r5, #8
 8000bda:	9302      	str	r3, [sp, #8]
 8000bdc:	e7ae      	b.n	8000b3c <__aeabi_dmul+0x4c>
 8000bde:	9b00      	ldr	r3, [sp, #0]
 8000be0:	46a2      	mov	sl, r4
 8000be2:	4699      	mov	r9, r3
 8000be4:	9b01      	ldr	r3, [sp, #4]
 8000be6:	4698      	mov	r8, r3
 8000be8:	9b02      	ldr	r3, [sp, #8]
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d100      	bne.n	8000bf0 <__aeabi_dmul+0x100>
 8000bee:	e1ca      	b.n	8000f86 <__aeabi_dmul+0x496>
 8000bf0:	2b03      	cmp	r3, #3
 8000bf2:	d100      	bne.n	8000bf6 <__aeabi_dmul+0x106>
 8000bf4:	e192      	b.n	8000f1c <__aeabi_dmul+0x42c>
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d110      	bne.n	8000c1c <__aeabi_dmul+0x12c>
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	2400      	movs	r4, #0
 8000bfe:	2200      	movs	r2, #0
 8000c00:	e7d4      	b.n	8000bac <__aeabi_dmul+0xbc>
 8000c02:	2201      	movs	r2, #1
 8000c04:	087b      	lsrs	r3, r7, #1
 8000c06:	403a      	ands	r2, r7
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	4652      	mov	r2, sl
 8000c0c:	07d2      	lsls	r2, r2, #31
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	4698      	mov	r8, r3
 8000c12:	4653      	mov	r3, sl
 8000c14:	085b      	lsrs	r3, r3, #1
 8000c16:	469a      	mov	sl, r3
 8000c18:	9b03      	ldr	r3, [sp, #12]
 8000c1a:	4699      	mov	r9, r3
 8000c1c:	465b      	mov	r3, fp
 8000c1e:	1c58      	adds	r0, r3, #1
 8000c20:	2380      	movs	r3, #128	@ 0x80
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	445b      	add	r3, fp
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	dc00      	bgt.n	8000c2c <__aeabi_dmul+0x13c>
 8000c2a:	e1b1      	b.n	8000f90 <__aeabi_dmul+0x4a0>
 8000c2c:	4642      	mov	r2, r8
 8000c2e:	0752      	lsls	r2, r2, #29
 8000c30:	d00b      	beq.n	8000c4a <__aeabi_dmul+0x15a>
 8000c32:	220f      	movs	r2, #15
 8000c34:	4641      	mov	r1, r8
 8000c36:	400a      	ands	r2, r1
 8000c38:	2a04      	cmp	r2, #4
 8000c3a:	d006      	beq.n	8000c4a <__aeabi_dmul+0x15a>
 8000c3c:	4642      	mov	r2, r8
 8000c3e:	1d11      	adds	r1, r2, #4
 8000c40:	4541      	cmp	r1, r8
 8000c42:	4192      	sbcs	r2, r2
 8000c44:	4688      	mov	r8, r1
 8000c46:	4252      	negs	r2, r2
 8000c48:	4492      	add	sl, r2
 8000c4a:	4652      	mov	r2, sl
 8000c4c:	01d2      	lsls	r2, r2, #7
 8000c4e:	d506      	bpl.n	8000c5e <__aeabi_dmul+0x16e>
 8000c50:	4652      	mov	r2, sl
 8000c52:	4b80      	ldr	r3, [pc, #512]	@ (8000e54 <__aeabi_dmul+0x364>)
 8000c54:	401a      	ands	r2, r3
 8000c56:	2380      	movs	r3, #128	@ 0x80
 8000c58:	4692      	mov	sl, r2
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	18c3      	adds	r3, r0, r3
 8000c5e:	4a7e      	ldr	r2, [pc, #504]	@ (8000e58 <__aeabi_dmul+0x368>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	dd00      	ble.n	8000c66 <__aeabi_dmul+0x176>
 8000c64:	e18f      	b.n	8000f86 <__aeabi_dmul+0x496>
 8000c66:	4642      	mov	r2, r8
 8000c68:	08d1      	lsrs	r1, r2, #3
 8000c6a:	4652      	mov	r2, sl
 8000c6c:	0752      	lsls	r2, r2, #29
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	4651      	mov	r1, sl
 8000c72:	055b      	lsls	r3, r3, #21
 8000c74:	024c      	lsls	r4, r1, #9
 8000c76:	0b24      	lsrs	r4, r4, #12
 8000c78:	0d5b      	lsrs	r3, r3, #21
 8000c7a:	e797      	b.n	8000bac <__aeabi_dmul+0xbc>
 8000c7c:	4b73      	ldr	r3, [pc, #460]	@ (8000e4c <__aeabi_dmul+0x35c>)
 8000c7e:	4326      	orrs	r6, r4
 8000c80:	469c      	mov	ip, r3
 8000c82:	44e3      	add	fp, ip
 8000c84:	2e00      	cmp	r6, #0
 8000c86:	d100      	bne.n	8000c8a <__aeabi_dmul+0x19a>
 8000c88:	e16f      	b.n	8000f6a <__aeabi_dmul+0x47a>
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	4649      	mov	r1, r9
 8000c8e:	431d      	orrs	r5, r3
 8000c90:	9b00      	ldr	r3, [sp, #0]
 8000c92:	4059      	eors	r1, r3
 8000c94:	b2cb      	uxtb	r3, r1
 8000c96:	9303      	str	r3, [sp, #12]
 8000c98:	2d0a      	cmp	r5, #10
 8000c9a:	dd00      	ble.n	8000c9e <__aeabi_dmul+0x1ae>
 8000c9c:	e133      	b.n	8000f06 <__aeabi_dmul+0x416>
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	40ab      	lsls	r3, r5
 8000ca2:	001d      	movs	r5, r3
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	9302      	str	r3, [sp, #8]
 8000ca8:	2288      	movs	r2, #136	@ 0x88
 8000caa:	422a      	tst	r2, r5
 8000cac:	d197      	bne.n	8000bde <__aeabi_dmul+0xee>
 8000cae:	4642      	mov	r2, r8
 8000cb0:	4643      	mov	r3, r8
 8000cb2:	0412      	lsls	r2, r2, #16
 8000cb4:	0c12      	lsrs	r2, r2, #16
 8000cb6:	0016      	movs	r6, r2
 8000cb8:	9801      	ldr	r0, [sp, #4]
 8000cba:	0c1d      	lsrs	r5, r3, #16
 8000cbc:	0c03      	lsrs	r3, r0, #16
 8000cbe:	0400      	lsls	r0, r0, #16
 8000cc0:	0c00      	lsrs	r0, r0, #16
 8000cc2:	4346      	muls	r6, r0
 8000cc4:	46b4      	mov	ip, r6
 8000cc6:	001e      	movs	r6, r3
 8000cc8:	436e      	muls	r6, r5
 8000cca:	9600      	str	r6, [sp, #0]
 8000ccc:	0016      	movs	r6, r2
 8000cce:	0007      	movs	r7, r0
 8000cd0:	435e      	muls	r6, r3
 8000cd2:	4661      	mov	r1, ip
 8000cd4:	46b0      	mov	r8, r6
 8000cd6:	436f      	muls	r7, r5
 8000cd8:	0c0e      	lsrs	r6, r1, #16
 8000cda:	44b8      	add	r8, r7
 8000cdc:	4446      	add	r6, r8
 8000cde:	42b7      	cmp	r7, r6
 8000ce0:	d905      	bls.n	8000cee <__aeabi_dmul+0x1fe>
 8000ce2:	2180      	movs	r1, #128	@ 0x80
 8000ce4:	0249      	lsls	r1, r1, #9
 8000ce6:	4688      	mov	r8, r1
 8000ce8:	9f00      	ldr	r7, [sp, #0]
 8000cea:	4447      	add	r7, r8
 8000cec:	9700      	str	r7, [sp, #0]
 8000cee:	4661      	mov	r1, ip
 8000cf0:	0409      	lsls	r1, r1, #16
 8000cf2:	0c09      	lsrs	r1, r1, #16
 8000cf4:	0c37      	lsrs	r7, r6, #16
 8000cf6:	0436      	lsls	r6, r6, #16
 8000cf8:	468c      	mov	ip, r1
 8000cfa:	0031      	movs	r1, r6
 8000cfc:	4461      	add	r1, ip
 8000cfe:	9101      	str	r1, [sp, #4]
 8000d00:	0011      	movs	r1, r2
 8000d02:	0c26      	lsrs	r6, r4, #16
 8000d04:	0424      	lsls	r4, r4, #16
 8000d06:	0c24      	lsrs	r4, r4, #16
 8000d08:	4361      	muls	r1, r4
 8000d0a:	468c      	mov	ip, r1
 8000d0c:	0021      	movs	r1, r4
 8000d0e:	4369      	muls	r1, r5
 8000d10:	4689      	mov	r9, r1
 8000d12:	4661      	mov	r1, ip
 8000d14:	0c09      	lsrs	r1, r1, #16
 8000d16:	4688      	mov	r8, r1
 8000d18:	4372      	muls	r2, r6
 8000d1a:	444a      	add	r2, r9
 8000d1c:	4442      	add	r2, r8
 8000d1e:	4375      	muls	r5, r6
 8000d20:	4591      	cmp	r9, r2
 8000d22:	d903      	bls.n	8000d2c <__aeabi_dmul+0x23c>
 8000d24:	2180      	movs	r1, #128	@ 0x80
 8000d26:	0249      	lsls	r1, r1, #9
 8000d28:	4688      	mov	r8, r1
 8000d2a:	4445      	add	r5, r8
 8000d2c:	0c11      	lsrs	r1, r2, #16
 8000d2e:	4688      	mov	r8, r1
 8000d30:	4661      	mov	r1, ip
 8000d32:	0409      	lsls	r1, r1, #16
 8000d34:	0c09      	lsrs	r1, r1, #16
 8000d36:	468c      	mov	ip, r1
 8000d38:	0412      	lsls	r2, r2, #16
 8000d3a:	4462      	add	r2, ip
 8000d3c:	18b9      	adds	r1, r7, r2
 8000d3e:	9102      	str	r1, [sp, #8]
 8000d40:	4651      	mov	r1, sl
 8000d42:	0c09      	lsrs	r1, r1, #16
 8000d44:	468c      	mov	ip, r1
 8000d46:	4651      	mov	r1, sl
 8000d48:	040f      	lsls	r7, r1, #16
 8000d4a:	0c3f      	lsrs	r7, r7, #16
 8000d4c:	0039      	movs	r1, r7
 8000d4e:	4341      	muls	r1, r0
 8000d50:	4445      	add	r5, r8
 8000d52:	4688      	mov	r8, r1
 8000d54:	4661      	mov	r1, ip
 8000d56:	4341      	muls	r1, r0
 8000d58:	468a      	mov	sl, r1
 8000d5a:	4641      	mov	r1, r8
 8000d5c:	4660      	mov	r0, ip
 8000d5e:	0c09      	lsrs	r1, r1, #16
 8000d60:	4689      	mov	r9, r1
 8000d62:	4358      	muls	r0, r3
 8000d64:	437b      	muls	r3, r7
 8000d66:	4453      	add	r3, sl
 8000d68:	444b      	add	r3, r9
 8000d6a:	459a      	cmp	sl, r3
 8000d6c:	d903      	bls.n	8000d76 <__aeabi_dmul+0x286>
 8000d6e:	2180      	movs	r1, #128	@ 0x80
 8000d70:	0249      	lsls	r1, r1, #9
 8000d72:	4689      	mov	r9, r1
 8000d74:	4448      	add	r0, r9
 8000d76:	0c19      	lsrs	r1, r3, #16
 8000d78:	4689      	mov	r9, r1
 8000d7a:	4641      	mov	r1, r8
 8000d7c:	0409      	lsls	r1, r1, #16
 8000d7e:	0c09      	lsrs	r1, r1, #16
 8000d80:	4688      	mov	r8, r1
 8000d82:	0039      	movs	r1, r7
 8000d84:	4361      	muls	r1, r4
 8000d86:	041b      	lsls	r3, r3, #16
 8000d88:	4443      	add	r3, r8
 8000d8a:	4688      	mov	r8, r1
 8000d8c:	4661      	mov	r1, ip
 8000d8e:	434c      	muls	r4, r1
 8000d90:	4371      	muls	r1, r6
 8000d92:	468c      	mov	ip, r1
 8000d94:	4641      	mov	r1, r8
 8000d96:	4377      	muls	r7, r6
 8000d98:	0c0e      	lsrs	r6, r1, #16
 8000d9a:	193f      	adds	r7, r7, r4
 8000d9c:	19f6      	adds	r6, r6, r7
 8000d9e:	4448      	add	r0, r9
 8000da0:	42b4      	cmp	r4, r6
 8000da2:	d903      	bls.n	8000dac <__aeabi_dmul+0x2bc>
 8000da4:	2180      	movs	r1, #128	@ 0x80
 8000da6:	0249      	lsls	r1, r1, #9
 8000da8:	4689      	mov	r9, r1
 8000daa:	44cc      	add	ip, r9
 8000dac:	9902      	ldr	r1, [sp, #8]
 8000dae:	9f00      	ldr	r7, [sp, #0]
 8000db0:	4689      	mov	r9, r1
 8000db2:	0431      	lsls	r1, r6, #16
 8000db4:	444f      	add	r7, r9
 8000db6:	4689      	mov	r9, r1
 8000db8:	4641      	mov	r1, r8
 8000dba:	4297      	cmp	r7, r2
 8000dbc:	4192      	sbcs	r2, r2
 8000dbe:	040c      	lsls	r4, r1, #16
 8000dc0:	0c24      	lsrs	r4, r4, #16
 8000dc2:	444c      	add	r4, r9
 8000dc4:	18ff      	adds	r7, r7, r3
 8000dc6:	4252      	negs	r2, r2
 8000dc8:	1964      	adds	r4, r4, r5
 8000dca:	18a1      	adds	r1, r4, r2
 8000dcc:	429f      	cmp	r7, r3
 8000dce:	419b      	sbcs	r3, r3
 8000dd0:	4688      	mov	r8, r1
 8000dd2:	4682      	mov	sl, r0
 8000dd4:	425b      	negs	r3, r3
 8000dd6:	4699      	mov	r9, r3
 8000dd8:	4590      	cmp	r8, r2
 8000dda:	4192      	sbcs	r2, r2
 8000ddc:	42ac      	cmp	r4, r5
 8000dde:	41a4      	sbcs	r4, r4
 8000de0:	44c2      	add	sl, r8
 8000de2:	44d1      	add	r9, sl
 8000de4:	4252      	negs	r2, r2
 8000de6:	4264      	negs	r4, r4
 8000de8:	4314      	orrs	r4, r2
 8000dea:	4599      	cmp	r9, r3
 8000dec:	419b      	sbcs	r3, r3
 8000dee:	4582      	cmp	sl, r0
 8000df0:	4192      	sbcs	r2, r2
 8000df2:	425b      	negs	r3, r3
 8000df4:	4252      	negs	r2, r2
 8000df6:	4313      	orrs	r3, r2
 8000df8:	464a      	mov	r2, r9
 8000dfa:	0c36      	lsrs	r6, r6, #16
 8000dfc:	19a4      	adds	r4, r4, r6
 8000dfe:	18e3      	adds	r3, r4, r3
 8000e00:	4463      	add	r3, ip
 8000e02:	025b      	lsls	r3, r3, #9
 8000e04:	0dd2      	lsrs	r2, r2, #23
 8000e06:	431a      	orrs	r2, r3
 8000e08:	9901      	ldr	r1, [sp, #4]
 8000e0a:	4692      	mov	sl, r2
 8000e0c:	027a      	lsls	r2, r7, #9
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	1e50      	subs	r0, r2, #1
 8000e12:	4182      	sbcs	r2, r0
 8000e14:	0dff      	lsrs	r7, r7, #23
 8000e16:	4317      	orrs	r7, r2
 8000e18:	464a      	mov	r2, r9
 8000e1a:	0252      	lsls	r2, r2, #9
 8000e1c:	4317      	orrs	r7, r2
 8000e1e:	46b8      	mov	r8, r7
 8000e20:	01db      	lsls	r3, r3, #7
 8000e22:	d500      	bpl.n	8000e26 <__aeabi_dmul+0x336>
 8000e24:	e6ed      	b.n	8000c02 <__aeabi_dmul+0x112>
 8000e26:	4b0d      	ldr	r3, [pc, #52]	@ (8000e5c <__aeabi_dmul+0x36c>)
 8000e28:	9a03      	ldr	r2, [sp, #12]
 8000e2a:	445b      	add	r3, fp
 8000e2c:	4691      	mov	r9, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	dc00      	bgt.n	8000e34 <__aeabi_dmul+0x344>
 8000e32:	e0ac      	b.n	8000f8e <__aeabi_dmul+0x49e>
 8000e34:	003a      	movs	r2, r7
 8000e36:	0752      	lsls	r2, r2, #29
 8000e38:	d100      	bne.n	8000e3c <__aeabi_dmul+0x34c>
 8000e3a:	e710      	b.n	8000c5e <__aeabi_dmul+0x16e>
 8000e3c:	220f      	movs	r2, #15
 8000e3e:	4658      	mov	r0, fp
 8000e40:	403a      	ands	r2, r7
 8000e42:	2a04      	cmp	r2, #4
 8000e44:	d000      	beq.n	8000e48 <__aeabi_dmul+0x358>
 8000e46:	e6f9      	b.n	8000c3c <__aeabi_dmul+0x14c>
 8000e48:	e709      	b.n	8000c5e <__aeabi_dmul+0x16e>
 8000e4a:	46c0      	nop			@ (mov r8, r8)
 8000e4c:	000007ff 	.word	0x000007ff
 8000e50:	fffffc01 	.word	0xfffffc01
 8000e54:	feffffff 	.word	0xfeffffff
 8000e58:	000007fe 	.word	0x000007fe
 8000e5c:	000003ff 	.word	0x000003ff
 8000e60:	0022      	movs	r2, r4
 8000e62:	4332      	orrs	r2, r6
 8000e64:	d06f      	beq.n	8000f46 <__aeabi_dmul+0x456>
 8000e66:	2c00      	cmp	r4, #0
 8000e68:	d100      	bne.n	8000e6c <__aeabi_dmul+0x37c>
 8000e6a:	e0c2      	b.n	8000ff2 <__aeabi_dmul+0x502>
 8000e6c:	0020      	movs	r0, r4
 8000e6e:	f000 fdcd 	bl	8001a0c <__clzsi2>
 8000e72:	0002      	movs	r2, r0
 8000e74:	0003      	movs	r3, r0
 8000e76:	3a0b      	subs	r2, #11
 8000e78:	201d      	movs	r0, #29
 8000e7a:	1a82      	subs	r2, r0, r2
 8000e7c:	0030      	movs	r0, r6
 8000e7e:	0019      	movs	r1, r3
 8000e80:	40d0      	lsrs	r0, r2
 8000e82:	3908      	subs	r1, #8
 8000e84:	408c      	lsls	r4, r1
 8000e86:	0002      	movs	r2, r0
 8000e88:	4322      	orrs	r2, r4
 8000e8a:	0034      	movs	r4, r6
 8000e8c:	408c      	lsls	r4, r1
 8000e8e:	4659      	mov	r1, fp
 8000e90:	1acb      	subs	r3, r1, r3
 8000e92:	4986      	ldr	r1, [pc, #536]	@ (80010ac <__aeabi_dmul+0x5bc>)
 8000e94:	468b      	mov	fp, r1
 8000e96:	449b      	add	fp, r3
 8000e98:	2d0a      	cmp	r5, #10
 8000e9a:	dd00      	ble.n	8000e9e <__aeabi_dmul+0x3ae>
 8000e9c:	e6a4      	b.n	8000be8 <__aeabi_dmul+0xf8>
 8000e9e:	4649      	mov	r1, r9
 8000ea0:	9b00      	ldr	r3, [sp, #0]
 8000ea2:	9401      	str	r4, [sp, #4]
 8000ea4:	4059      	eors	r1, r3
 8000ea6:	b2cb      	uxtb	r3, r1
 8000ea8:	0014      	movs	r4, r2
 8000eaa:	2000      	movs	r0, #0
 8000eac:	9303      	str	r3, [sp, #12]
 8000eae:	2d02      	cmp	r5, #2
 8000eb0:	dd00      	ble.n	8000eb4 <__aeabi_dmul+0x3c4>
 8000eb2:	e667      	b.n	8000b84 <__aeabi_dmul+0x94>
 8000eb4:	e6fb      	b.n	8000cae <__aeabi_dmul+0x1be>
 8000eb6:	4653      	mov	r3, sl
 8000eb8:	4303      	orrs	r3, r0
 8000eba:	4698      	mov	r8, r3
 8000ebc:	d03c      	beq.n	8000f38 <__aeabi_dmul+0x448>
 8000ebe:	4653      	mov	r3, sl
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d100      	bne.n	8000ec6 <__aeabi_dmul+0x3d6>
 8000ec4:	e0a3      	b.n	800100e <__aeabi_dmul+0x51e>
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	f000 fda0 	bl	8001a0c <__clzsi2>
 8000ecc:	230b      	movs	r3, #11
 8000ece:	425b      	negs	r3, r3
 8000ed0:	469c      	mov	ip, r3
 8000ed2:	0002      	movs	r2, r0
 8000ed4:	4484      	add	ip, r0
 8000ed6:	0011      	movs	r1, r2
 8000ed8:	4650      	mov	r0, sl
 8000eda:	3908      	subs	r1, #8
 8000edc:	4088      	lsls	r0, r1
 8000ede:	231d      	movs	r3, #29
 8000ee0:	4680      	mov	r8, r0
 8000ee2:	4660      	mov	r0, ip
 8000ee4:	1a1b      	subs	r3, r3, r0
 8000ee6:	0020      	movs	r0, r4
 8000ee8:	40d8      	lsrs	r0, r3
 8000eea:	0003      	movs	r3, r0
 8000eec:	4640      	mov	r0, r8
 8000eee:	4303      	orrs	r3, r0
 8000ef0:	469a      	mov	sl, r3
 8000ef2:	0023      	movs	r3, r4
 8000ef4:	408b      	lsls	r3, r1
 8000ef6:	4698      	mov	r8, r3
 8000ef8:	4b6c      	ldr	r3, [pc, #432]	@ (80010ac <__aeabi_dmul+0x5bc>)
 8000efa:	2500      	movs	r5, #0
 8000efc:	1a9b      	subs	r3, r3, r2
 8000efe:	469b      	mov	fp, r3
 8000f00:	2300      	movs	r3, #0
 8000f02:	9302      	str	r3, [sp, #8]
 8000f04:	e61a      	b.n	8000b3c <__aeabi_dmul+0x4c>
 8000f06:	2d0f      	cmp	r5, #15
 8000f08:	d000      	beq.n	8000f0c <__aeabi_dmul+0x41c>
 8000f0a:	e0c9      	b.n	80010a0 <__aeabi_dmul+0x5b0>
 8000f0c:	2380      	movs	r3, #128	@ 0x80
 8000f0e:	4652      	mov	r2, sl
 8000f10:	031b      	lsls	r3, r3, #12
 8000f12:	421a      	tst	r2, r3
 8000f14:	d002      	beq.n	8000f1c <__aeabi_dmul+0x42c>
 8000f16:	421c      	tst	r4, r3
 8000f18:	d100      	bne.n	8000f1c <__aeabi_dmul+0x42c>
 8000f1a:	e092      	b.n	8001042 <__aeabi_dmul+0x552>
 8000f1c:	2480      	movs	r4, #128	@ 0x80
 8000f1e:	4653      	mov	r3, sl
 8000f20:	0324      	lsls	r4, r4, #12
 8000f22:	431c      	orrs	r4, r3
 8000f24:	0324      	lsls	r4, r4, #12
 8000f26:	4642      	mov	r2, r8
 8000f28:	0b24      	lsrs	r4, r4, #12
 8000f2a:	e63e      	b.n	8000baa <__aeabi_dmul+0xba>
 8000f2c:	469b      	mov	fp, r3
 8000f2e:	2303      	movs	r3, #3
 8000f30:	4680      	mov	r8, r0
 8000f32:	250c      	movs	r5, #12
 8000f34:	9302      	str	r3, [sp, #8]
 8000f36:	e601      	b.n	8000b3c <__aeabi_dmul+0x4c>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	469a      	mov	sl, r3
 8000f3c:	469b      	mov	fp, r3
 8000f3e:	3301      	adds	r3, #1
 8000f40:	2504      	movs	r5, #4
 8000f42:	9302      	str	r3, [sp, #8]
 8000f44:	e5fa      	b.n	8000b3c <__aeabi_dmul+0x4c>
 8000f46:	2101      	movs	r1, #1
 8000f48:	430d      	orrs	r5, r1
 8000f4a:	2d0a      	cmp	r5, #10
 8000f4c:	dd00      	ble.n	8000f50 <__aeabi_dmul+0x460>
 8000f4e:	e64b      	b.n	8000be8 <__aeabi_dmul+0xf8>
 8000f50:	4649      	mov	r1, r9
 8000f52:	9800      	ldr	r0, [sp, #0]
 8000f54:	4041      	eors	r1, r0
 8000f56:	b2c9      	uxtb	r1, r1
 8000f58:	9103      	str	r1, [sp, #12]
 8000f5a:	2d02      	cmp	r5, #2
 8000f5c:	dc00      	bgt.n	8000f60 <__aeabi_dmul+0x470>
 8000f5e:	e096      	b.n	800108e <__aeabi_dmul+0x59e>
 8000f60:	2300      	movs	r3, #0
 8000f62:	2400      	movs	r4, #0
 8000f64:	2001      	movs	r0, #1
 8000f66:	9301      	str	r3, [sp, #4]
 8000f68:	e60c      	b.n	8000b84 <__aeabi_dmul+0x94>
 8000f6a:	4649      	mov	r1, r9
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	9a00      	ldr	r2, [sp, #0]
 8000f70:	432b      	orrs	r3, r5
 8000f72:	4051      	eors	r1, r2
 8000f74:	b2ca      	uxtb	r2, r1
 8000f76:	9203      	str	r2, [sp, #12]
 8000f78:	2b0a      	cmp	r3, #10
 8000f7a:	dd00      	ble.n	8000f7e <__aeabi_dmul+0x48e>
 8000f7c:	e634      	b.n	8000be8 <__aeabi_dmul+0xf8>
 8000f7e:	2d00      	cmp	r5, #0
 8000f80:	d157      	bne.n	8001032 <__aeabi_dmul+0x542>
 8000f82:	9b03      	ldr	r3, [sp, #12]
 8000f84:	4699      	mov	r9, r3
 8000f86:	2400      	movs	r4, #0
 8000f88:	2200      	movs	r2, #0
 8000f8a:	4b49      	ldr	r3, [pc, #292]	@ (80010b0 <__aeabi_dmul+0x5c0>)
 8000f8c:	e60e      	b.n	8000bac <__aeabi_dmul+0xbc>
 8000f8e:	4658      	mov	r0, fp
 8000f90:	2101      	movs	r1, #1
 8000f92:	1ac9      	subs	r1, r1, r3
 8000f94:	2938      	cmp	r1, #56	@ 0x38
 8000f96:	dd00      	ble.n	8000f9a <__aeabi_dmul+0x4aa>
 8000f98:	e62f      	b.n	8000bfa <__aeabi_dmul+0x10a>
 8000f9a:	291f      	cmp	r1, #31
 8000f9c:	dd56      	ble.n	800104c <__aeabi_dmul+0x55c>
 8000f9e:	221f      	movs	r2, #31
 8000fa0:	4654      	mov	r4, sl
 8000fa2:	4252      	negs	r2, r2
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	40dc      	lsrs	r4, r3
 8000fa8:	2920      	cmp	r1, #32
 8000faa:	d007      	beq.n	8000fbc <__aeabi_dmul+0x4cc>
 8000fac:	4b41      	ldr	r3, [pc, #260]	@ (80010b4 <__aeabi_dmul+0x5c4>)
 8000fae:	4642      	mov	r2, r8
 8000fb0:	469c      	mov	ip, r3
 8000fb2:	4653      	mov	r3, sl
 8000fb4:	4460      	add	r0, ip
 8000fb6:	4083      	lsls	r3, r0
 8000fb8:	431a      	orrs	r2, r3
 8000fba:	4690      	mov	r8, r2
 8000fbc:	4642      	mov	r2, r8
 8000fbe:	2107      	movs	r1, #7
 8000fc0:	1e53      	subs	r3, r2, #1
 8000fc2:	419a      	sbcs	r2, r3
 8000fc4:	000b      	movs	r3, r1
 8000fc6:	4322      	orrs	r2, r4
 8000fc8:	4013      	ands	r3, r2
 8000fca:	2400      	movs	r4, #0
 8000fcc:	4211      	tst	r1, r2
 8000fce:	d009      	beq.n	8000fe4 <__aeabi_dmul+0x4f4>
 8000fd0:	230f      	movs	r3, #15
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	2b04      	cmp	r3, #4
 8000fd6:	d05d      	beq.n	8001094 <__aeabi_dmul+0x5a4>
 8000fd8:	1d11      	adds	r1, r2, #4
 8000fda:	4291      	cmp	r1, r2
 8000fdc:	419b      	sbcs	r3, r3
 8000fde:	000a      	movs	r2, r1
 8000fe0:	425b      	negs	r3, r3
 8000fe2:	075b      	lsls	r3, r3, #29
 8000fe4:	08d2      	lsrs	r2, r2, #3
 8000fe6:	431a      	orrs	r2, r3
 8000fe8:	2300      	movs	r3, #0
 8000fea:	e5df      	b.n	8000bac <__aeabi_dmul+0xbc>
 8000fec:	9b03      	ldr	r3, [sp, #12]
 8000fee:	4699      	mov	r9, r3
 8000ff0:	e5fa      	b.n	8000be8 <__aeabi_dmul+0xf8>
 8000ff2:	9801      	ldr	r0, [sp, #4]
 8000ff4:	f000 fd0a 	bl	8001a0c <__clzsi2>
 8000ff8:	0002      	movs	r2, r0
 8000ffa:	0003      	movs	r3, r0
 8000ffc:	3215      	adds	r2, #21
 8000ffe:	3320      	adds	r3, #32
 8001000:	2a1c      	cmp	r2, #28
 8001002:	dc00      	bgt.n	8001006 <__aeabi_dmul+0x516>
 8001004:	e738      	b.n	8000e78 <__aeabi_dmul+0x388>
 8001006:	9a01      	ldr	r2, [sp, #4]
 8001008:	3808      	subs	r0, #8
 800100a:	4082      	lsls	r2, r0
 800100c:	e73f      	b.n	8000e8e <__aeabi_dmul+0x39e>
 800100e:	f000 fcfd 	bl	8001a0c <__clzsi2>
 8001012:	2315      	movs	r3, #21
 8001014:	469c      	mov	ip, r3
 8001016:	4484      	add	ip, r0
 8001018:	0002      	movs	r2, r0
 800101a:	4663      	mov	r3, ip
 800101c:	3220      	adds	r2, #32
 800101e:	2b1c      	cmp	r3, #28
 8001020:	dc00      	bgt.n	8001024 <__aeabi_dmul+0x534>
 8001022:	e758      	b.n	8000ed6 <__aeabi_dmul+0x3e6>
 8001024:	2300      	movs	r3, #0
 8001026:	4698      	mov	r8, r3
 8001028:	0023      	movs	r3, r4
 800102a:	3808      	subs	r0, #8
 800102c:	4083      	lsls	r3, r0
 800102e:	469a      	mov	sl, r3
 8001030:	e762      	b.n	8000ef8 <__aeabi_dmul+0x408>
 8001032:	001d      	movs	r5, r3
 8001034:	2300      	movs	r3, #0
 8001036:	2400      	movs	r4, #0
 8001038:	2002      	movs	r0, #2
 800103a:	9301      	str	r3, [sp, #4]
 800103c:	e5a2      	b.n	8000b84 <__aeabi_dmul+0x94>
 800103e:	9002      	str	r0, [sp, #8]
 8001040:	e632      	b.n	8000ca8 <__aeabi_dmul+0x1b8>
 8001042:	431c      	orrs	r4, r3
 8001044:	9b00      	ldr	r3, [sp, #0]
 8001046:	9a01      	ldr	r2, [sp, #4]
 8001048:	4699      	mov	r9, r3
 800104a:	e5ae      	b.n	8000baa <__aeabi_dmul+0xba>
 800104c:	4b1a      	ldr	r3, [pc, #104]	@ (80010b8 <__aeabi_dmul+0x5c8>)
 800104e:	4652      	mov	r2, sl
 8001050:	18c3      	adds	r3, r0, r3
 8001052:	4640      	mov	r0, r8
 8001054:	409a      	lsls	r2, r3
 8001056:	40c8      	lsrs	r0, r1
 8001058:	4302      	orrs	r2, r0
 800105a:	4640      	mov	r0, r8
 800105c:	4098      	lsls	r0, r3
 800105e:	0003      	movs	r3, r0
 8001060:	1e58      	subs	r0, r3, #1
 8001062:	4183      	sbcs	r3, r0
 8001064:	4654      	mov	r4, sl
 8001066:	431a      	orrs	r2, r3
 8001068:	40cc      	lsrs	r4, r1
 800106a:	0753      	lsls	r3, r2, #29
 800106c:	d009      	beq.n	8001082 <__aeabi_dmul+0x592>
 800106e:	230f      	movs	r3, #15
 8001070:	4013      	ands	r3, r2
 8001072:	2b04      	cmp	r3, #4
 8001074:	d005      	beq.n	8001082 <__aeabi_dmul+0x592>
 8001076:	1d13      	adds	r3, r2, #4
 8001078:	4293      	cmp	r3, r2
 800107a:	4192      	sbcs	r2, r2
 800107c:	4252      	negs	r2, r2
 800107e:	18a4      	adds	r4, r4, r2
 8001080:	001a      	movs	r2, r3
 8001082:	0223      	lsls	r3, r4, #8
 8001084:	d508      	bpl.n	8001098 <__aeabi_dmul+0x5a8>
 8001086:	2301      	movs	r3, #1
 8001088:	2400      	movs	r4, #0
 800108a:	2200      	movs	r2, #0
 800108c:	e58e      	b.n	8000bac <__aeabi_dmul+0xbc>
 800108e:	4689      	mov	r9, r1
 8001090:	2400      	movs	r4, #0
 8001092:	e58b      	b.n	8000bac <__aeabi_dmul+0xbc>
 8001094:	2300      	movs	r3, #0
 8001096:	e7a5      	b.n	8000fe4 <__aeabi_dmul+0x4f4>
 8001098:	0763      	lsls	r3, r4, #29
 800109a:	0264      	lsls	r4, r4, #9
 800109c:	0b24      	lsrs	r4, r4, #12
 800109e:	e7a1      	b.n	8000fe4 <__aeabi_dmul+0x4f4>
 80010a0:	9b00      	ldr	r3, [sp, #0]
 80010a2:	46a2      	mov	sl, r4
 80010a4:	4699      	mov	r9, r3
 80010a6:	9b01      	ldr	r3, [sp, #4]
 80010a8:	4698      	mov	r8, r3
 80010aa:	e737      	b.n	8000f1c <__aeabi_dmul+0x42c>
 80010ac:	fffffc0d 	.word	0xfffffc0d
 80010b0:	000007ff 	.word	0x000007ff
 80010b4:	0000043e 	.word	0x0000043e
 80010b8:	0000041e 	.word	0x0000041e

080010bc <__aeabi_dsub>:
 80010bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010be:	4657      	mov	r7, sl
 80010c0:	464e      	mov	r6, r9
 80010c2:	4645      	mov	r5, r8
 80010c4:	46de      	mov	lr, fp
 80010c6:	b5e0      	push	{r5, r6, r7, lr}
 80010c8:	b083      	sub	sp, #12
 80010ca:	9000      	str	r0, [sp, #0]
 80010cc:	9101      	str	r1, [sp, #4]
 80010ce:	030c      	lsls	r4, r1, #12
 80010d0:	004d      	lsls	r5, r1, #1
 80010d2:	0fce      	lsrs	r6, r1, #31
 80010d4:	0a61      	lsrs	r1, r4, #9
 80010d6:	9c00      	ldr	r4, [sp, #0]
 80010d8:	005f      	lsls	r7, r3, #1
 80010da:	0f64      	lsrs	r4, r4, #29
 80010dc:	430c      	orrs	r4, r1
 80010de:	9900      	ldr	r1, [sp, #0]
 80010e0:	9200      	str	r2, [sp, #0]
 80010e2:	9301      	str	r3, [sp, #4]
 80010e4:	00c8      	lsls	r0, r1, #3
 80010e6:	0319      	lsls	r1, r3, #12
 80010e8:	0d7b      	lsrs	r3, r7, #21
 80010ea:	4699      	mov	r9, r3
 80010ec:	9b01      	ldr	r3, [sp, #4]
 80010ee:	4fcc      	ldr	r7, [pc, #816]	@ (8001420 <__aeabi_dsub+0x364>)
 80010f0:	0fdb      	lsrs	r3, r3, #31
 80010f2:	469c      	mov	ip, r3
 80010f4:	0a4b      	lsrs	r3, r1, #9
 80010f6:	9900      	ldr	r1, [sp, #0]
 80010f8:	4680      	mov	r8, r0
 80010fa:	0f49      	lsrs	r1, r1, #29
 80010fc:	4319      	orrs	r1, r3
 80010fe:	9b00      	ldr	r3, [sp, #0]
 8001100:	468b      	mov	fp, r1
 8001102:	00da      	lsls	r2, r3, #3
 8001104:	4692      	mov	sl, r2
 8001106:	0d6d      	lsrs	r5, r5, #21
 8001108:	45b9      	cmp	r9, r7
 800110a:	d100      	bne.n	800110e <__aeabi_dsub+0x52>
 800110c:	e0bf      	b.n	800128e <__aeabi_dsub+0x1d2>
 800110e:	2301      	movs	r3, #1
 8001110:	4661      	mov	r1, ip
 8001112:	4059      	eors	r1, r3
 8001114:	464b      	mov	r3, r9
 8001116:	468c      	mov	ip, r1
 8001118:	1aeb      	subs	r3, r5, r3
 800111a:	428e      	cmp	r6, r1
 800111c:	d075      	beq.n	800120a <__aeabi_dsub+0x14e>
 800111e:	2b00      	cmp	r3, #0
 8001120:	dc00      	bgt.n	8001124 <__aeabi_dsub+0x68>
 8001122:	e2a3      	b.n	800166c <__aeabi_dsub+0x5b0>
 8001124:	4649      	mov	r1, r9
 8001126:	2900      	cmp	r1, #0
 8001128:	d100      	bne.n	800112c <__aeabi_dsub+0x70>
 800112a:	e0ce      	b.n	80012ca <__aeabi_dsub+0x20e>
 800112c:	42bd      	cmp	r5, r7
 800112e:	d100      	bne.n	8001132 <__aeabi_dsub+0x76>
 8001130:	e200      	b.n	8001534 <__aeabi_dsub+0x478>
 8001132:	2701      	movs	r7, #1
 8001134:	2b38      	cmp	r3, #56	@ 0x38
 8001136:	dc19      	bgt.n	800116c <__aeabi_dsub+0xb0>
 8001138:	2780      	movs	r7, #128	@ 0x80
 800113a:	4659      	mov	r1, fp
 800113c:	043f      	lsls	r7, r7, #16
 800113e:	4339      	orrs	r1, r7
 8001140:	468b      	mov	fp, r1
 8001142:	2b1f      	cmp	r3, #31
 8001144:	dd00      	ble.n	8001148 <__aeabi_dsub+0x8c>
 8001146:	e1fa      	b.n	800153e <__aeabi_dsub+0x482>
 8001148:	2720      	movs	r7, #32
 800114a:	1af9      	subs	r1, r7, r3
 800114c:	468c      	mov	ip, r1
 800114e:	4659      	mov	r1, fp
 8001150:	4667      	mov	r7, ip
 8001152:	40b9      	lsls	r1, r7
 8001154:	000f      	movs	r7, r1
 8001156:	0011      	movs	r1, r2
 8001158:	40d9      	lsrs	r1, r3
 800115a:	430f      	orrs	r7, r1
 800115c:	4661      	mov	r1, ip
 800115e:	408a      	lsls	r2, r1
 8001160:	1e51      	subs	r1, r2, #1
 8001162:	418a      	sbcs	r2, r1
 8001164:	4659      	mov	r1, fp
 8001166:	40d9      	lsrs	r1, r3
 8001168:	4317      	orrs	r7, r2
 800116a:	1a64      	subs	r4, r4, r1
 800116c:	1bc7      	subs	r7, r0, r7
 800116e:	42b8      	cmp	r0, r7
 8001170:	4180      	sbcs	r0, r0
 8001172:	4240      	negs	r0, r0
 8001174:	1a24      	subs	r4, r4, r0
 8001176:	0223      	lsls	r3, r4, #8
 8001178:	d400      	bmi.n	800117c <__aeabi_dsub+0xc0>
 800117a:	e140      	b.n	80013fe <__aeabi_dsub+0x342>
 800117c:	0264      	lsls	r4, r4, #9
 800117e:	0a64      	lsrs	r4, r4, #9
 8001180:	2c00      	cmp	r4, #0
 8001182:	d100      	bne.n	8001186 <__aeabi_dsub+0xca>
 8001184:	e154      	b.n	8001430 <__aeabi_dsub+0x374>
 8001186:	0020      	movs	r0, r4
 8001188:	f000 fc40 	bl	8001a0c <__clzsi2>
 800118c:	0003      	movs	r3, r0
 800118e:	3b08      	subs	r3, #8
 8001190:	2120      	movs	r1, #32
 8001192:	0038      	movs	r0, r7
 8001194:	1aca      	subs	r2, r1, r3
 8001196:	40d0      	lsrs	r0, r2
 8001198:	409c      	lsls	r4, r3
 800119a:	0002      	movs	r2, r0
 800119c:	409f      	lsls	r7, r3
 800119e:	4322      	orrs	r2, r4
 80011a0:	429d      	cmp	r5, r3
 80011a2:	dd00      	ble.n	80011a6 <__aeabi_dsub+0xea>
 80011a4:	e1a6      	b.n	80014f4 <__aeabi_dsub+0x438>
 80011a6:	1b58      	subs	r0, r3, r5
 80011a8:	3001      	adds	r0, #1
 80011aa:	1a09      	subs	r1, r1, r0
 80011ac:	003c      	movs	r4, r7
 80011ae:	408f      	lsls	r7, r1
 80011b0:	40c4      	lsrs	r4, r0
 80011b2:	1e7b      	subs	r3, r7, #1
 80011b4:	419f      	sbcs	r7, r3
 80011b6:	0013      	movs	r3, r2
 80011b8:	408b      	lsls	r3, r1
 80011ba:	4327      	orrs	r7, r4
 80011bc:	431f      	orrs	r7, r3
 80011be:	40c2      	lsrs	r2, r0
 80011c0:	003b      	movs	r3, r7
 80011c2:	0014      	movs	r4, r2
 80011c4:	2500      	movs	r5, #0
 80011c6:	4313      	orrs	r3, r2
 80011c8:	d100      	bne.n	80011cc <__aeabi_dsub+0x110>
 80011ca:	e1f7      	b.n	80015bc <__aeabi_dsub+0x500>
 80011cc:	077b      	lsls	r3, r7, #29
 80011ce:	d100      	bne.n	80011d2 <__aeabi_dsub+0x116>
 80011d0:	e377      	b.n	80018c2 <__aeabi_dsub+0x806>
 80011d2:	230f      	movs	r3, #15
 80011d4:	0038      	movs	r0, r7
 80011d6:	403b      	ands	r3, r7
 80011d8:	2b04      	cmp	r3, #4
 80011da:	d004      	beq.n	80011e6 <__aeabi_dsub+0x12a>
 80011dc:	1d38      	adds	r0, r7, #4
 80011de:	42b8      	cmp	r0, r7
 80011e0:	41bf      	sbcs	r7, r7
 80011e2:	427f      	negs	r7, r7
 80011e4:	19e4      	adds	r4, r4, r7
 80011e6:	0223      	lsls	r3, r4, #8
 80011e8:	d400      	bmi.n	80011ec <__aeabi_dsub+0x130>
 80011ea:	e368      	b.n	80018be <__aeabi_dsub+0x802>
 80011ec:	4b8c      	ldr	r3, [pc, #560]	@ (8001420 <__aeabi_dsub+0x364>)
 80011ee:	3501      	adds	r5, #1
 80011f0:	429d      	cmp	r5, r3
 80011f2:	d100      	bne.n	80011f6 <__aeabi_dsub+0x13a>
 80011f4:	e0f4      	b.n	80013e0 <__aeabi_dsub+0x324>
 80011f6:	4b8b      	ldr	r3, [pc, #556]	@ (8001424 <__aeabi_dsub+0x368>)
 80011f8:	056d      	lsls	r5, r5, #21
 80011fa:	401c      	ands	r4, r3
 80011fc:	0d6d      	lsrs	r5, r5, #21
 80011fe:	0767      	lsls	r7, r4, #29
 8001200:	08c0      	lsrs	r0, r0, #3
 8001202:	0264      	lsls	r4, r4, #9
 8001204:	4307      	orrs	r7, r0
 8001206:	0b24      	lsrs	r4, r4, #12
 8001208:	e0ec      	b.n	80013e4 <__aeabi_dsub+0x328>
 800120a:	2b00      	cmp	r3, #0
 800120c:	dc00      	bgt.n	8001210 <__aeabi_dsub+0x154>
 800120e:	e329      	b.n	8001864 <__aeabi_dsub+0x7a8>
 8001210:	4649      	mov	r1, r9
 8001212:	2900      	cmp	r1, #0
 8001214:	d000      	beq.n	8001218 <__aeabi_dsub+0x15c>
 8001216:	e0d6      	b.n	80013c6 <__aeabi_dsub+0x30a>
 8001218:	4659      	mov	r1, fp
 800121a:	4311      	orrs	r1, r2
 800121c:	d100      	bne.n	8001220 <__aeabi_dsub+0x164>
 800121e:	e12e      	b.n	800147e <__aeabi_dsub+0x3c2>
 8001220:	1e59      	subs	r1, r3, #1
 8001222:	2b01      	cmp	r3, #1
 8001224:	d100      	bne.n	8001228 <__aeabi_dsub+0x16c>
 8001226:	e1e6      	b.n	80015f6 <__aeabi_dsub+0x53a>
 8001228:	42bb      	cmp	r3, r7
 800122a:	d100      	bne.n	800122e <__aeabi_dsub+0x172>
 800122c:	e182      	b.n	8001534 <__aeabi_dsub+0x478>
 800122e:	2701      	movs	r7, #1
 8001230:	000b      	movs	r3, r1
 8001232:	2938      	cmp	r1, #56	@ 0x38
 8001234:	dc14      	bgt.n	8001260 <__aeabi_dsub+0x1a4>
 8001236:	2b1f      	cmp	r3, #31
 8001238:	dd00      	ble.n	800123c <__aeabi_dsub+0x180>
 800123a:	e23c      	b.n	80016b6 <__aeabi_dsub+0x5fa>
 800123c:	2720      	movs	r7, #32
 800123e:	1af9      	subs	r1, r7, r3
 8001240:	468c      	mov	ip, r1
 8001242:	4659      	mov	r1, fp
 8001244:	4667      	mov	r7, ip
 8001246:	40b9      	lsls	r1, r7
 8001248:	000f      	movs	r7, r1
 800124a:	0011      	movs	r1, r2
 800124c:	40d9      	lsrs	r1, r3
 800124e:	430f      	orrs	r7, r1
 8001250:	4661      	mov	r1, ip
 8001252:	408a      	lsls	r2, r1
 8001254:	1e51      	subs	r1, r2, #1
 8001256:	418a      	sbcs	r2, r1
 8001258:	4659      	mov	r1, fp
 800125a:	40d9      	lsrs	r1, r3
 800125c:	4317      	orrs	r7, r2
 800125e:	1864      	adds	r4, r4, r1
 8001260:	183f      	adds	r7, r7, r0
 8001262:	4287      	cmp	r7, r0
 8001264:	4180      	sbcs	r0, r0
 8001266:	4240      	negs	r0, r0
 8001268:	1824      	adds	r4, r4, r0
 800126a:	0223      	lsls	r3, r4, #8
 800126c:	d400      	bmi.n	8001270 <__aeabi_dsub+0x1b4>
 800126e:	e0c6      	b.n	80013fe <__aeabi_dsub+0x342>
 8001270:	4b6b      	ldr	r3, [pc, #428]	@ (8001420 <__aeabi_dsub+0x364>)
 8001272:	3501      	adds	r5, #1
 8001274:	429d      	cmp	r5, r3
 8001276:	d100      	bne.n	800127a <__aeabi_dsub+0x1be>
 8001278:	e0b2      	b.n	80013e0 <__aeabi_dsub+0x324>
 800127a:	2101      	movs	r1, #1
 800127c:	4b69      	ldr	r3, [pc, #420]	@ (8001424 <__aeabi_dsub+0x368>)
 800127e:	087a      	lsrs	r2, r7, #1
 8001280:	401c      	ands	r4, r3
 8001282:	4039      	ands	r1, r7
 8001284:	430a      	orrs	r2, r1
 8001286:	07e7      	lsls	r7, r4, #31
 8001288:	4317      	orrs	r7, r2
 800128a:	0864      	lsrs	r4, r4, #1
 800128c:	e79e      	b.n	80011cc <__aeabi_dsub+0x110>
 800128e:	4b66      	ldr	r3, [pc, #408]	@ (8001428 <__aeabi_dsub+0x36c>)
 8001290:	4311      	orrs	r1, r2
 8001292:	468a      	mov	sl, r1
 8001294:	18eb      	adds	r3, r5, r3
 8001296:	2900      	cmp	r1, #0
 8001298:	d028      	beq.n	80012ec <__aeabi_dsub+0x230>
 800129a:	4566      	cmp	r6, ip
 800129c:	d02c      	beq.n	80012f8 <__aeabi_dsub+0x23c>
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d05b      	beq.n	800135a <__aeabi_dsub+0x29e>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_dsub+0x1ec>
 80012a6:	e12c      	b.n	8001502 <__aeabi_dsub+0x446>
 80012a8:	465b      	mov	r3, fp
 80012aa:	4666      	mov	r6, ip
 80012ac:	075f      	lsls	r7, r3, #29
 80012ae:	08d2      	lsrs	r2, r2, #3
 80012b0:	4317      	orrs	r7, r2
 80012b2:	08dd      	lsrs	r5, r3, #3
 80012b4:	003b      	movs	r3, r7
 80012b6:	432b      	orrs	r3, r5
 80012b8:	d100      	bne.n	80012bc <__aeabi_dsub+0x200>
 80012ba:	e0e2      	b.n	8001482 <__aeabi_dsub+0x3c6>
 80012bc:	2480      	movs	r4, #128	@ 0x80
 80012be:	0324      	lsls	r4, r4, #12
 80012c0:	432c      	orrs	r4, r5
 80012c2:	0324      	lsls	r4, r4, #12
 80012c4:	4d56      	ldr	r5, [pc, #344]	@ (8001420 <__aeabi_dsub+0x364>)
 80012c6:	0b24      	lsrs	r4, r4, #12
 80012c8:	e08c      	b.n	80013e4 <__aeabi_dsub+0x328>
 80012ca:	4659      	mov	r1, fp
 80012cc:	4311      	orrs	r1, r2
 80012ce:	d100      	bne.n	80012d2 <__aeabi_dsub+0x216>
 80012d0:	e0d5      	b.n	800147e <__aeabi_dsub+0x3c2>
 80012d2:	1e59      	subs	r1, r3, #1
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d100      	bne.n	80012da <__aeabi_dsub+0x21e>
 80012d8:	e1b9      	b.n	800164e <__aeabi_dsub+0x592>
 80012da:	42bb      	cmp	r3, r7
 80012dc:	d100      	bne.n	80012e0 <__aeabi_dsub+0x224>
 80012de:	e1b1      	b.n	8001644 <__aeabi_dsub+0x588>
 80012e0:	2701      	movs	r7, #1
 80012e2:	000b      	movs	r3, r1
 80012e4:	2938      	cmp	r1, #56	@ 0x38
 80012e6:	dd00      	ble.n	80012ea <__aeabi_dsub+0x22e>
 80012e8:	e740      	b.n	800116c <__aeabi_dsub+0xb0>
 80012ea:	e72a      	b.n	8001142 <__aeabi_dsub+0x86>
 80012ec:	4661      	mov	r1, ip
 80012ee:	2701      	movs	r7, #1
 80012f0:	4079      	eors	r1, r7
 80012f2:	468c      	mov	ip, r1
 80012f4:	4566      	cmp	r6, ip
 80012f6:	d1d2      	bne.n	800129e <__aeabi_dsub+0x1e2>
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d100      	bne.n	80012fe <__aeabi_dsub+0x242>
 80012fc:	e0c5      	b.n	800148a <__aeabi_dsub+0x3ce>
 80012fe:	2d00      	cmp	r5, #0
 8001300:	d000      	beq.n	8001304 <__aeabi_dsub+0x248>
 8001302:	e155      	b.n	80015b0 <__aeabi_dsub+0x4f4>
 8001304:	464b      	mov	r3, r9
 8001306:	0025      	movs	r5, r4
 8001308:	4305      	orrs	r5, r0
 800130a:	d100      	bne.n	800130e <__aeabi_dsub+0x252>
 800130c:	e212      	b.n	8001734 <__aeabi_dsub+0x678>
 800130e:	1e59      	subs	r1, r3, #1
 8001310:	468c      	mov	ip, r1
 8001312:	2b01      	cmp	r3, #1
 8001314:	d100      	bne.n	8001318 <__aeabi_dsub+0x25c>
 8001316:	e249      	b.n	80017ac <__aeabi_dsub+0x6f0>
 8001318:	4d41      	ldr	r5, [pc, #260]	@ (8001420 <__aeabi_dsub+0x364>)
 800131a:	42ab      	cmp	r3, r5
 800131c:	d100      	bne.n	8001320 <__aeabi_dsub+0x264>
 800131e:	e28f      	b.n	8001840 <__aeabi_dsub+0x784>
 8001320:	2701      	movs	r7, #1
 8001322:	2938      	cmp	r1, #56	@ 0x38
 8001324:	dc11      	bgt.n	800134a <__aeabi_dsub+0x28e>
 8001326:	4663      	mov	r3, ip
 8001328:	2b1f      	cmp	r3, #31
 800132a:	dd00      	ble.n	800132e <__aeabi_dsub+0x272>
 800132c:	e25b      	b.n	80017e6 <__aeabi_dsub+0x72a>
 800132e:	4661      	mov	r1, ip
 8001330:	2320      	movs	r3, #32
 8001332:	0027      	movs	r7, r4
 8001334:	1a5b      	subs	r3, r3, r1
 8001336:	0005      	movs	r5, r0
 8001338:	4098      	lsls	r0, r3
 800133a:	409f      	lsls	r7, r3
 800133c:	40cd      	lsrs	r5, r1
 800133e:	1e43      	subs	r3, r0, #1
 8001340:	4198      	sbcs	r0, r3
 8001342:	40cc      	lsrs	r4, r1
 8001344:	432f      	orrs	r7, r5
 8001346:	4307      	orrs	r7, r0
 8001348:	44a3      	add	fp, r4
 800134a:	18bf      	adds	r7, r7, r2
 800134c:	4297      	cmp	r7, r2
 800134e:	4192      	sbcs	r2, r2
 8001350:	4252      	negs	r2, r2
 8001352:	445a      	add	r2, fp
 8001354:	0014      	movs	r4, r2
 8001356:	464d      	mov	r5, r9
 8001358:	e787      	b.n	800126a <__aeabi_dsub+0x1ae>
 800135a:	4f34      	ldr	r7, [pc, #208]	@ (800142c <__aeabi_dsub+0x370>)
 800135c:	1c6b      	adds	r3, r5, #1
 800135e:	423b      	tst	r3, r7
 8001360:	d000      	beq.n	8001364 <__aeabi_dsub+0x2a8>
 8001362:	e0b6      	b.n	80014d2 <__aeabi_dsub+0x416>
 8001364:	4659      	mov	r1, fp
 8001366:	0023      	movs	r3, r4
 8001368:	4311      	orrs	r1, r2
 800136a:	000f      	movs	r7, r1
 800136c:	4303      	orrs	r3, r0
 800136e:	2d00      	cmp	r5, #0
 8001370:	d000      	beq.n	8001374 <__aeabi_dsub+0x2b8>
 8001372:	e126      	b.n	80015c2 <__aeabi_dsub+0x506>
 8001374:	2b00      	cmp	r3, #0
 8001376:	d100      	bne.n	800137a <__aeabi_dsub+0x2be>
 8001378:	e1c0      	b.n	80016fc <__aeabi_dsub+0x640>
 800137a:	2900      	cmp	r1, #0
 800137c:	d100      	bne.n	8001380 <__aeabi_dsub+0x2c4>
 800137e:	e0a1      	b.n	80014c4 <__aeabi_dsub+0x408>
 8001380:	1a83      	subs	r3, r0, r2
 8001382:	4698      	mov	r8, r3
 8001384:	465b      	mov	r3, fp
 8001386:	4540      	cmp	r0, r8
 8001388:	41ad      	sbcs	r5, r5
 800138a:	1ae3      	subs	r3, r4, r3
 800138c:	426d      	negs	r5, r5
 800138e:	1b5b      	subs	r3, r3, r5
 8001390:	2580      	movs	r5, #128	@ 0x80
 8001392:	042d      	lsls	r5, r5, #16
 8001394:	422b      	tst	r3, r5
 8001396:	d100      	bne.n	800139a <__aeabi_dsub+0x2de>
 8001398:	e14b      	b.n	8001632 <__aeabi_dsub+0x576>
 800139a:	465b      	mov	r3, fp
 800139c:	1a10      	subs	r0, r2, r0
 800139e:	4282      	cmp	r2, r0
 80013a0:	4192      	sbcs	r2, r2
 80013a2:	1b1c      	subs	r4, r3, r4
 80013a4:	0007      	movs	r7, r0
 80013a6:	2601      	movs	r6, #1
 80013a8:	4663      	mov	r3, ip
 80013aa:	4252      	negs	r2, r2
 80013ac:	1aa4      	subs	r4, r4, r2
 80013ae:	4327      	orrs	r7, r4
 80013b0:	401e      	ands	r6, r3
 80013b2:	2f00      	cmp	r7, #0
 80013b4:	d100      	bne.n	80013b8 <__aeabi_dsub+0x2fc>
 80013b6:	e142      	b.n	800163e <__aeabi_dsub+0x582>
 80013b8:	422c      	tst	r4, r5
 80013ba:	d100      	bne.n	80013be <__aeabi_dsub+0x302>
 80013bc:	e26d      	b.n	800189a <__aeabi_dsub+0x7de>
 80013be:	4b19      	ldr	r3, [pc, #100]	@ (8001424 <__aeabi_dsub+0x368>)
 80013c0:	2501      	movs	r5, #1
 80013c2:	401c      	ands	r4, r3
 80013c4:	e71b      	b.n	80011fe <__aeabi_dsub+0x142>
 80013c6:	42bd      	cmp	r5, r7
 80013c8:	d100      	bne.n	80013cc <__aeabi_dsub+0x310>
 80013ca:	e13b      	b.n	8001644 <__aeabi_dsub+0x588>
 80013cc:	2701      	movs	r7, #1
 80013ce:	2b38      	cmp	r3, #56	@ 0x38
 80013d0:	dd00      	ble.n	80013d4 <__aeabi_dsub+0x318>
 80013d2:	e745      	b.n	8001260 <__aeabi_dsub+0x1a4>
 80013d4:	2780      	movs	r7, #128	@ 0x80
 80013d6:	4659      	mov	r1, fp
 80013d8:	043f      	lsls	r7, r7, #16
 80013da:	4339      	orrs	r1, r7
 80013dc:	468b      	mov	fp, r1
 80013de:	e72a      	b.n	8001236 <__aeabi_dsub+0x17a>
 80013e0:	2400      	movs	r4, #0
 80013e2:	2700      	movs	r7, #0
 80013e4:	052d      	lsls	r5, r5, #20
 80013e6:	4325      	orrs	r5, r4
 80013e8:	07f6      	lsls	r6, r6, #31
 80013ea:	4335      	orrs	r5, r6
 80013ec:	0038      	movs	r0, r7
 80013ee:	0029      	movs	r1, r5
 80013f0:	b003      	add	sp, #12
 80013f2:	bcf0      	pop	{r4, r5, r6, r7}
 80013f4:	46bb      	mov	fp, r7
 80013f6:	46b2      	mov	sl, r6
 80013f8:	46a9      	mov	r9, r5
 80013fa:	46a0      	mov	r8, r4
 80013fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013fe:	077b      	lsls	r3, r7, #29
 8001400:	d004      	beq.n	800140c <__aeabi_dsub+0x350>
 8001402:	230f      	movs	r3, #15
 8001404:	403b      	ands	r3, r7
 8001406:	2b04      	cmp	r3, #4
 8001408:	d000      	beq.n	800140c <__aeabi_dsub+0x350>
 800140a:	e6e7      	b.n	80011dc <__aeabi_dsub+0x120>
 800140c:	002b      	movs	r3, r5
 800140e:	08f8      	lsrs	r0, r7, #3
 8001410:	4a03      	ldr	r2, [pc, #12]	@ (8001420 <__aeabi_dsub+0x364>)
 8001412:	0767      	lsls	r7, r4, #29
 8001414:	4307      	orrs	r7, r0
 8001416:	08e5      	lsrs	r5, r4, #3
 8001418:	4293      	cmp	r3, r2
 800141a:	d100      	bne.n	800141e <__aeabi_dsub+0x362>
 800141c:	e74a      	b.n	80012b4 <__aeabi_dsub+0x1f8>
 800141e:	e0a5      	b.n	800156c <__aeabi_dsub+0x4b0>
 8001420:	000007ff 	.word	0x000007ff
 8001424:	ff7fffff 	.word	0xff7fffff
 8001428:	fffff801 	.word	0xfffff801
 800142c:	000007fe 	.word	0x000007fe
 8001430:	0038      	movs	r0, r7
 8001432:	f000 faeb 	bl	8001a0c <__clzsi2>
 8001436:	0003      	movs	r3, r0
 8001438:	3318      	adds	r3, #24
 800143a:	2b1f      	cmp	r3, #31
 800143c:	dc00      	bgt.n	8001440 <__aeabi_dsub+0x384>
 800143e:	e6a7      	b.n	8001190 <__aeabi_dsub+0xd4>
 8001440:	003a      	movs	r2, r7
 8001442:	3808      	subs	r0, #8
 8001444:	4082      	lsls	r2, r0
 8001446:	429d      	cmp	r5, r3
 8001448:	dd00      	ble.n	800144c <__aeabi_dsub+0x390>
 800144a:	e08a      	b.n	8001562 <__aeabi_dsub+0x4a6>
 800144c:	1b5b      	subs	r3, r3, r5
 800144e:	1c58      	adds	r0, r3, #1
 8001450:	281f      	cmp	r0, #31
 8001452:	dc00      	bgt.n	8001456 <__aeabi_dsub+0x39a>
 8001454:	e1d8      	b.n	8001808 <__aeabi_dsub+0x74c>
 8001456:	0017      	movs	r7, r2
 8001458:	3b1f      	subs	r3, #31
 800145a:	40df      	lsrs	r7, r3
 800145c:	2820      	cmp	r0, #32
 800145e:	d005      	beq.n	800146c <__aeabi_dsub+0x3b0>
 8001460:	2340      	movs	r3, #64	@ 0x40
 8001462:	1a1b      	subs	r3, r3, r0
 8001464:	409a      	lsls	r2, r3
 8001466:	1e53      	subs	r3, r2, #1
 8001468:	419a      	sbcs	r2, r3
 800146a:	4317      	orrs	r7, r2
 800146c:	2500      	movs	r5, #0
 800146e:	2f00      	cmp	r7, #0
 8001470:	d100      	bne.n	8001474 <__aeabi_dsub+0x3b8>
 8001472:	e0e5      	b.n	8001640 <__aeabi_dsub+0x584>
 8001474:	077b      	lsls	r3, r7, #29
 8001476:	d000      	beq.n	800147a <__aeabi_dsub+0x3be>
 8001478:	e6ab      	b.n	80011d2 <__aeabi_dsub+0x116>
 800147a:	002c      	movs	r4, r5
 800147c:	e7c6      	b.n	800140c <__aeabi_dsub+0x350>
 800147e:	08c0      	lsrs	r0, r0, #3
 8001480:	e7c6      	b.n	8001410 <__aeabi_dsub+0x354>
 8001482:	2700      	movs	r7, #0
 8001484:	2400      	movs	r4, #0
 8001486:	4dd1      	ldr	r5, [pc, #836]	@ (80017cc <__aeabi_dsub+0x710>)
 8001488:	e7ac      	b.n	80013e4 <__aeabi_dsub+0x328>
 800148a:	4fd1      	ldr	r7, [pc, #836]	@ (80017d0 <__aeabi_dsub+0x714>)
 800148c:	1c6b      	adds	r3, r5, #1
 800148e:	423b      	tst	r3, r7
 8001490:	d171      	bne.n	8001576 <__aeabi_dsub+0x4ba>
 8001492:	0023      	movs	r3, r4
 8001494:	4303      	orrs	r3, r0
 8001496:	2d00      	cmp	r5, #0
 8001498:	d000      	beq.n	800149c <__aeabi_dsub+0x3e0>
 800149a:	e14e      	b.n	800173a <__aeabi_dsub+0x67e>
 800149c:	4657      	mov	r7, sl
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d100      	bne.n	80014a4 <__aeabi_dsub+0x3e8>
 80014a2:	e1b5      	b.n	8001810 <__aeabi_dsub+0x754>
 80014a4:	2f00      	cmp	r7, #0
 80014a6:	d00d      	beq.n	80014c4 <__aeabi_dsub+0x408>
 80014a8:	1883      	adds	r3, r0, r2
 80014aa:	4283      	cmp	r3, r0
 80014ac:	4180      	sbcs	r0, r0
 80014ae:	445c      	add	r4, fp
 80014b0:	4240      	negs	r0, r0
 80014b2:	1824      	adds	r4, r4, r0
 80014b4:	0222      	lsls	r2, r4, #8
 80014b6:	d500      	bpl.n	80014ba <__aeabi_dsub+0x3fe>
 80014b8:	e1c8      	b.n	800184c <__aeabi_dsub+0x790>
 80014ba:	001f      	movs	r7, r3
 80014bc:	4698      	mov	r8, r3
 80014be:	4327      	orrs	r7, r4
 80014c0:	d100      	bne.n	80014c4 <__aeabi_dsub+0x408>
 80014c2:	e0bc      	b.n	800163e <__aeabi_dsub+0x582>
 80014c4:	4643      	mov	r3, r8
 80014c6:	0767      	lsls	r7, r4, #29
 80014c8:	08db      	lsrs	r3, r3, #3
 80014ca:	431f      	orrs	r7, r3
 80014cc:	08e5      	lsrs	r5, r4, #3
 80014ce:	2300      	movs	r3, #0
 80014d0:	e04c      	b.n	800156c <__aeabi_dsub+0x4b0>
 80014d2:	1a83      	subs	r3, r0, r2
 80014d4:	4698      	mov	r8, r3
 80014d6:	465b      	mov	r3, fp
 80014d8:	4540      	cmp	r0, r8
 80014da:	41bf      	sbcs	r7, r7
 80014dc:	1ae3      	subs	r3, r4, r3
 80014de:	427f      	negs	r7, r7
 80014e0:	1bdb      	subs	r3, r3, r7
 80014e2:	021f      	lsls	r7, r3, #8
 80014e4:	d47c      	bmi.n	80015e0 <__aeabi_dsub+0x524>
 80014e6:	4647      	mov	r7, r8
 80014e8:	431f      	orrs	r7, r3
 80014ea:	d100      	bne.n	80014ee <__aeabi_dsub+0x432>
 80014ec:	e0a6      	b.n	800163c <__aeabi_dsub+0x580>
 80014ee:	001c      	movs	r4, r3
 80014f0:	4647      	mov	r7, r8
 80014f2:	e645      	b.n	8001180 <__aeabi_dsub+0xc4>
 80014f4:	4cb7      	ldr	r4, [pc, #732]	@ (80017d4 <__aeabi_dsub+0x718>)
 80014f6:	1aed      	subs	r5, r5, r3
 80014f8:	4014      	ands	r4, r2
 80014fa:	077b      	lsls	r3, r7, #29
 80014fc:	d000      	beq.n	8001500 <__aeabi_dsub+0x444>
 80014fe:	e780      	b.n	8001402 <__aeabi_dsub+0x346>
 8001500:	e784      	b.n	800140c <__aeabi_dsub+0x350>
 8001502:	464b      	mov	r3, r9
 8001504:	0025      	movs	r5, r4
 8001506:	4305      	orrs	r5, r0
 8001508:	d066      	beq.n	80015d8 <__aeabi_dsub+0x51c>
 800150a:	1e5f      	subs	r7, r3, #1
 800150c:	2b01      	cmp	r3, #1
 800150e:	d100      	bne.n	8001512 <__aeabi_dsub+0x456>
 8001510:	e0fc      	b.n	800170c <__aeabi_dsub+0x650>
 8001512:	4dae      	ldr	r5, [pc, #696]	@ (80017cc <__aeabi_dsub+0x710>)
 8001514:	42ab      	cmp	r3, r5
 8001516:	d100      	bne.n	800151a <__aeabi_dsub+0x45e>
 8001518:	e15e      	b.n	80017d8 <__aeabi_dsub+0x71c>
 800151a:	4666      	mov	r6, ip
 800151c:	2f38      	cmp	r7, #56	@ 0x38
 800151e:	dc00      	bgt.n	8001522 <__aeabi_dsub+0x466>
 8001520:	e0b4      	b.n	800168c <__aeabi_dsub+0x5d0>
 8001522:	2001      	movs	r0, #1
 8001524:	1a17      	subs	r7, r2, r0
 8001526:	42ba      	cmp	r2, r7
 8001528:	4192      	sbcs	r2, r2
 800152a:	465b      	mov	r3, fp
 800152c:	4252      	negs	r2, r2
 800152e:	464d      	mov	r5, r9
 8001530:	1a9c      	subs	r4, r3, r2
 8001532:	e620      	b.n	8001176 <__aeabi_dsub+0xba>
 8001534:	0767      	lsls	r7, r4, #29
 8001536:	08c0      	lsrs	r0, r0, #3
 8001538:	4307      	orrs	r7, r0
 800153a:	08e5      	lsrs	r5, r4, #3
 800153c:	e6ba      	b.n	80012b4 <__aeabi_dsub+0x1f8>
 800153e:	001f      	movs	r7, r3
 8001540:	4659      	mov	r1, fp
 8001542:	3f20      	subs	r7, #32
 8001544:	40f9      	lsrs	r1, r7
 8001546:	000f      	movs	r7, r1
 8001548:	2b20      	cmp	r3, #32
 800154a:	d005      	beq.n	8001558 <__aeabi_dsub+0x49c>
 800154c:	2140      	movs	r1, #64	@ 0x40
 800154e:	1acb      	subs	r3, r1, r3
 8001550:	4659      	mov	r1, fp
 8001552:	4099      	lsls	r1, r3
 8001554:	430a      	orrs	r2, r1
 8001556:	4692      	mov	sl, r2
 8001558:	4653      	mov	r3, sl
 800155a:	1e5a      	subs	r2, r3, #1
 800155c:	4193      	sbcs	r3, r2
 800155e:	431f      	orrs	r7, r3
 8001560:	e604      	b.n	800116c <__aeabi_dsub+0xb0>
 8001562:	1aeb      	subs	r3, r5, r3
 8001564:	4d9b      	ldr	r5, [pc, #620]	@ (80017d4 <__aeabi_dsub+0x718>)
 8001566:	4015      	ands	r5, r2
 8001568:	076f      	lsls	r7, r5, #29
 800156a:	08ed      	lsrs	r5, r5, #3
 800156c:	032c      	lsls	r4, r5, #12
 800156e:	055d      	lsls	r5, r3, #21
 8001570:	0b24      	lsrs	r4, r4, #12
 8001572:	0d6d      	lsrs	r5, r5, #21
 8001574:	e736      	b.n	80013e4 <__aeabi_dsub+0x328>
 8001576:	4d95      	ldr	r5, [pc, #596]	@ (80017cc <__aeabi_dsub+0x710>)
 8001578:	42ab      	cmp	r3, r5
 800157a:	d100      	bne.n	800157e <__aeabi_dsub+0x4c2>
 800157c:	e0d6      	b.n	800172c <__aeabi_dsub+0x670>
 800157e:	1882      	adds	r2, r0, r2
 8001580:	0021      	movs	r1, r4
 8001582:	4282      	cmp	r2, r0
 8001584:	4180      	sbcs	r0, r0
 8001586:	4459      	add	r1, fp
 8001588:	4240      	negs	r0, r0
 800158a:	1808      	adds	r0, r1, r0
 800158c:	07c7      	lsls	r7, r0, #31
 800158e:	0852      	lsrs	r2, r2, #1
 8001590:	4317      	orrs	r7, r2
 8001592:	0844      	lsrs	r4, r0, #1
 8001594:	0752      	lsls	r2, r2, #29
 8001596:	d400      	bmi.n	800159a <__aeabi_dsub+0x4de>
 8001598:	e185      	b.n	80018a6 <__aeabi_dsub+0x7ea>
 800159a:	220f      	movs	r2, #15
 800159c:	001d      	movs	r5, r3
 800159e:	403a      	ands	r2, r7
 80015a0:	2a04      	cmp	r2, #4
 80015a2:	d000      	beq.n	80015a6 <__aeabi_dsub+0x4ea>
 80015a4:	e61a      	b.n	80011dc <__aeabi_dsub+0x120>
 80015a6:	08ff      	lsrs	r7, r7, #3
 80015a8:	0764      	lsls	r4, r4, #29
 80015aa:	4327      	orrs	r7, r4
 80015ac:	0905      	lsrs	r5, r0, #4
 80015ae:	e7dd      	b.n	800156c <__aeabi_dsub+0x4b0>
 80015b0:	465b      	mov	r3, fp
 80015b2:	08d2      	lsrs	r2, r2, #3
 80015b4:	075f      	lsls	r7, r3, #29
 80015b6:	4317      	orrs	r7, r2
 80015b8:	08dd      	lsrs	r5, r3, #3
 80015ba:	e67b      	b.n	80012b4 <__aeabi_dsub+0x1f8>
 80015bc:	2700      	movs	r7, #0
 80015be:	2400      	movs	r4, #0
 80015c0:	e710      	b.n	80013e4 <__aeabi_dsub+0x328>
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d000      	beq.n	80015c8 <__aeabi_dsub+0x50c>
 80015c6:	e0d6      	b.n	8001776 <__aeabi_dsub+0x6ba>
 80015c8:	2900      	cmp	r1, #0
 80015ca:	d000      	beq.n	80015ce <__aeabi_dsub+0x512>
 80015cc:	e12f      	b.n	800182e <__aeabi_dsub+0x772>
 80015ce:	2480      	movs	r4, #128	@ 0x80
 80015d0:	2600      	movs	r6, #0
 80015d2:	4d7e      	ldr	r5, [pc, #504]	@ (80017cc <__aeabi_dsub+0x710>)
 80015d4:	0324      	lsls	r4, r4, #12
 80015d6:	e705      	b.n	80013e4 <__aeabi_dsub+0x328>
 80015d8:	4666      	mov	r6, ip
 80015da:	465c      	mov	r4, fp
 80015dc:	08d0      	lsrs	r0, r2, #3
 80015de:	e717      	b.n	8001410 <__aeabi_dsub+0x354>
 80015e0:	465b      	mov	r3, fp
 80015e2:	1a17      	subs	r7, r2, r0
 80015e4:	42ba      	cmp	r2, r7
 80015e6:	4192      	sbcs	r2, r2
 80015e8:	1b1c      	subs	r4, r3, r4
 80015ea:	2601      	movs	r6, #1
 80015ec:	4663      	mov	r3, ip
 80015ee:	4252      	negs	r2, r2
 80015f0:	1aa4      	subs	r4, r4, r2
 80015f2:	401e      	ands	r6, r3
 80015f4:	e5c4      	b.n	8001180 <__aeabi_dsub+0xc4>
 80015f6:	1883      	adds	r3, r0, r2
 80015f8:	4283      	cmp	r3, r0
 80015fa:	4180      	sbcs	r0, r0
 80015fc:	445c      	add	r4, fp
 80015fe:	4240      	negs	r0, r0
 8001600:	1825      	adds	r5, r4, r0
 8001602:	022a      	lsls	r2, r5, #8
 8001604:	d400      	bmi.n	8001608 <__aeabi_dsub+0x54c>
 8001606:	e0da      	b.n	80017be <__aeabi_dsub+0x702>
 8001608:	4a72      	ldr	r2, [pc, #456]	@ (80017d4 <__aeabi_dsub+0x718>)
 800160a:	085b      	lsrs	r3, r3, #1
 800160c:	4015      	ands	r5, r2
 800160e:	07ea      	lsls	r2, r5, #31
 8001610:	431a      	orrs	r2, r3
 8001612:	0869      	lsrs	r1, r5, #1
 8001614:	075b      	lsls	r3, r3, #29
 8001616:	d400      	bmi.n	800161a <__aeabi_dsub+0x55e>
 8001618:	e14a      	b.n	80018b0 <__aeabi_dsub+0x7f4>
 800161a:	230f      	movs	r3, #15
 800161c:	4013      	ands	r3, r2
 800161e:	2b04      	cmp	r3, #4
 8001620:	d100      	bne.n	8001624 <__aeabi_dsub+0x568>
 8001622:	e0fc      	b.n	800181e <__aeabi_dsub+0x762>
 8001624:	1d17      	adds	r7, r2, #4
 8001626:	4297      	cmp	r7, r2
 8001628:	41a4      	sbcs	r4, r4
 800162a:	4264      	negs	r4, r4
 800162c:	2502      	movs	r5, #2
 800162e:	1864      	adds	r4, r4, r1
 8001630:	e6ec      	b.n	800140c <__aeabi_dsub+0x350>
 8001632:	4647      	mov	r7, r8
 8001634:	001c      	movs	r4, r3
 8001636:	431f      	orrs	r7, r3
 8001638:	d000      	beq.n	800163c <__aeabi_dsub+0x580>
 800163a:	e743      	b.n	80014c4 <__aeabi_dsub+0x408>
 800163c:	2600      	movs	r6, #0
 800163e:	2500      	movs	r5, #0
 8001640:	2400      	movs	r4, #0
 8001642:	e6cf      	b.n	80013e4 <__aeabi_dsub+0x328>
 8001644:	08c0      	lsrs	r0, r0, #3
 8001646:	0767      	lsls	r7, r4, #29
 8001648:	4307      	orrs	r7, r0
 800164a:	08e5      	lsrs	r5, r4, #3
 800164c:	e632      	b.n	80012b4 <__aeabi_dsub+0x1f8>
 800164e:	1a87      	subs	r7, r0, r2
 8001650:	465b      	mov	r3, fp
 8001652:	42b8      	cmp	r0, r7
 8001654:	4180      	sbcs	r0, r0
 8001656:	1ae4      	subs	r4, r4, r3
 8001658:	4240      	negs	r0, r0
 800165a:	1a24      	subs	r4, r4, r0
 800165c:	0223      	lsls	r3, r4, #8
 800165e:	d428      	bmi.n	80016b2 <__aeabi_dsub+0x5f6>
 8001660:	0763      	lsls	r3, r4, #29
 8001662:	08ff      	lsrs	r7, r7, #3
 8001664:	431f      	orrs	r7, r3
 8001666:	08e5      	lsrs	r5, r4, #3
 8001668:	2301      	movs	r3, #1
 800166a:	e77f      	b.n	800156c <__aeabi_dsub+0x4b0>
 800166c:	2b00      	cmp	r3, #0
 800166e:	d100      	bne.n	8001672 <__aeabi_dsub+0x5b6>
 8001670:	e673      	b.n	800135a <__aeabi_dsub+0x29e>
 8001672:	464b      	mov	r3, r9
 8001674:	1b5f      	subs	r7, r3, r5
 8001676:	003b      	movs	r3, r7
 8001678:	2d00      	cmp	r5, #0
 800167a:	d100      	bne.n	800167e <__aeabi_dsub+0x5c2>
 800167c:	e742      	b.n	8001504 <__aeabi_dsub+0x448>
 800167e:	2f38      	cmp	r7, #56	@ 0x38
 8001680:	dd00      	ble.n	8001684 <__aeabi_dsub+0x5c8>
 8001682:	e0ec      	b.n	800185e <__aeabi_dsub+0x7a2>
 8001684:	2380      	movs	r3, #128	@ 0x80
 8001686:	000e      	movs	r6, r1
 8001688:	041b      	lsls	r3, r3, #16
 800168a:	431c      	orrs	r4, r3
 800168c:	2f1f      	cmp	r7, #31
 800168e:	dc25      	bgt.n	80016dc <__aeabi_dsub+0x620>
 8001690:	2520      	movs	r5, #32
 8001692:	0023      	movs	r3, r4
 8001694:	1bed      	subs	r5, r5, r7
 8001696:	0001      	movs	r1, r0
 8001698:	40a8      	lsls	r0, r5
 800169a:	40ab      	lsls	r3, r5
 800169c:	40f9      	lsrs	r1, r7
 800169e:	1e45      	subs	r5, r0, #1
 80016a0:	41a8      	sbcs	r0, r5
 80016a2:	430b      	orrs	r3, r1
 80016a4:	40fc      	lsrs	r4, r7
 80016a6:	4318      	orrs	r0, r3
 80016a8:	465b      	mov	r3, fp
 80016aa:	1b1b      	subs	r3, r3, r4
 80016ac:	469b      	mov	fp, r3
 80016ae:	e739      	b.n	8001524 <__aeabi_dsub+0x468>
 80016b0:	4666      	mov	r6, ip
 80016b2:	2501      	movs	r5, #1
 80016b4:	e562      	b.n	800117c <__aeabi_dsub+0xc0>
 80016b6:	001f      	movs	r7, r3
 80016b8:	4659      	mov	r1, fp
 80016ba:	3f20      	subs	r7, #32
 80016bc:	40f9      	lsrs	r1, r7
 80016be:	468c      	mov	ip, r1
 80016c0:	2b20      	cmp	r3, #32
 80016c2:	d005      	beq.n	80016d0 <__aeabi_dsub+0x614>
 80016c4:	2740      	movs	r7, #64	@ 0x40
 80016c6:	4659      	mov	r1, fp
 80016c8:	1afb      	subs	r3, r7, r3
 80016ca:	4099      	lsls	r1, r3
 80016cc:	430a      	orrs	r2, r1
 80016ce:	4692      	mov	sl, r2
 80016d0:	4657      	mov	r7, sl
 80016d2:	1e7b      	subs	r3, r7, #1
 80016d4:	419f      	sbcs	r7, r3
 80016d6:	4663      	mov	r3, ip
 80016d8:	431f      	orrs	r7, r3
 80016da:	e5c1      	b.n	8001260 <__aeabi_dsub+0x1a4>
 80016dc:	003b      	movs	r3, r7
 80016de:	0025      	movs	r5, r4
 80016e0:	3b20      	subs	r3, #32
 80016e2:	40dd      	lsrs	r5, r3
 80016e4:	2f20      	cmp	r7, #32
 80016e6:	d004      	beq.n	80016f2 <__aeabi_dsub+0x636>
 80016e8:	2340      	movs	r3, #64	@ 0x40
 80016ea:	1bdb      	subs	r3, r3, r7
 80016ec:	409c      	lsls	r4, r3
 80016ee:	4320      	orrs	r0, r4
 80016f0:	4680      	mov	r8, r0
 80016f2:	4640      	mov	r0, r8
 80016f4:	1e43      	subs	r3, r0, #1
 80016f6:	4198      	sbcs	r0, r3
 80016f8:	4328      	orrs	r0, r5
 80016fa:	e713      	b.n	8001524 <__aeabi_dsub+0x468>
 80016fc:	2900      	cmp	r1, #0
 80016fe:	d09d      	beq.n	800163c <__aeabi_dsub+0x580>
 8001700:	2601      	movs	r6, #1
 8001702:	4663      	mov	r3, ip
 8001704:	465c      	mov	r4, fp
 8001706:	4690      	mov	r8, r2
 8001708:	401e      	ands	r6, r3
 800170a:	e6db      	b.n	80014c4 <__aeabi_dsub+0x408>
 800170c:	1a17      	subs	r7, r2, r0
 800170e:	465b      	mov	r3, fp
 8001710:	42ba      	cmp	r2, r7
 8001712:	4192      	sbcs	r2, r2
 8001714:	1b1c      	subs	r4, r3, r4
 8001716:	4252      	negs	r2, r2
 8001718:	1aa4      	subs	r4, r4, r2
 800171a:	0223      	lsls	r3, r4, #8
 800171c:	d4c8      	bmi.n	80016b0 <__aeabi_dsub+0x5f4>
 800171e:	0763      	lsls	r3, r4, #29
 8001720:	08ff      	lsrs	r7, r7, #3
 8001722:	431f      	orrs	r7, r3
 8001724:	4666      	mov	r6, ip
 8001726:	2301      	movs	r3, #1
 8001728:	08e5      	lsrs	r5, r4, #3
 800172a:	e71f      	b.n	800156c <__aeabi_dsub+0x4b0>
 800172c:	001d      	movs	r5, r3
 800172e:	2400      	movs	r4, #0
 8001730:	2700      	movs	r7, #0
 8001732:	e657      	b.n	80013e4 <__aeabi_dsub+0x328>
 8001734:	465c      	mov	r4, fp
 8001736:	08d0      	lsrs	r0, r2, #3
 8001738:	e66a      	b.n	8001410 <__aeabi_dsub+0x354>
 800173a:	2b00      	cmp	r3, #0
 800173c:	d100      	bne.n	8001740 <__aeabi_dsub+0x684>
 800173e:	e737      	b.n	80015b0 <__aeabi_dsub+0x4f4>
 8001740:	4653      	mov	r3, sl
 8001742:	08c0      	lsrs	r0, r0, #3
 8001744:	0767      	lsls	r7, r4, #29
 8001746:	4307      	orrs	r7, r0
 8001748:	08e5      	lsrs	r5, r4, #3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d100      	bne.n	8001750 <__aeabi_dsub+0x694>
 800174e:	e5b1      	b.n	80012b4 <__aeabi_dsub+0x1f8>
 8001750:	2380      	movs	r3, #128	@ 0x80
 8001752:	031b      	lsls	r3, r3, #12
 8001754:	421d      	tst	r5, r3
 8001756:	d008      	beq.n	800176a <__aeabi_dsub+0x6ae>
 8001758:	4659      	mov	r1, fp
 800175a:	08c8      	lsrs	r0, r1, #3
 800175c:	4218      	tst	r0, r3
 800175e:	d104      	bne.n	800176a <__aeabi_dsub+0x6ae>
 8001760:	08d2      	lsrs	r2, r2, #3
 8001762:	0749      	lsls	r1, r1, #29
 8001764:	430a      	orrs	r2, r1
 8001766:	0017      	movs	r7, r2
 8001768:	0005      	movs	r5, r0
 800176a:	0f7b      	lsrs	r3, r7, #29
 800176c:	00ff      	lsls	r7, r7, #3
 800176e:	08ff      	lsrs	r7, r7, #3
 8001770:	075b      	lsls	r3, r3, #29
 8001772:	431f      	orrs	r7, r3
 8001774:	e59e      	b.n	80012b4 <__aeabi_dsub+0x1f8>
 8001776:	08c0      	lsrs	r0, r0, #3
 8001778:	0763      	lsls	r3, r4, #29
 800177a:	4318      	orrs	r0, r3
 800177c:	08e5      	lsrs	r5, r4, #3
 800177e:	2900      	cmp	r1, #0
 8001780:	d053      	beq.n	800182a <__aeabi_dsub+0x76e>
 8001782:	2380      	movs	r3, #128	@ 0x80
 8001784:	031b      	lsls	r3, r3, #12
 8001786:	421d      	tst	r5, r3
 8001788:	d00a      	beq.n	80017a0 <__aeabi_dsub+0x6e4>
 800178a:	4659      	mov	r1, fp
 800178c:	08cc      	lsrs	r4, r1, #3
 800178e:	421c      	tst	r4, r3
 8001790:	d106      	bne.n	80017a0 <__aeabi_dsub+0x6e4>
 8001792:	2601      	movs	r6, #1
 8001794:	4663      	mov	r3, ip
 8001796:	0025      	movs	r5, r4
 8001798:	08d0      	lsrs	r0, r2, #3
 800179a:	0749      	lsls	r1, r1, #29
 800179c:	4308      	orrs	r0, r1
 800179e:	401e      	ands	r6, r3
 80017a0:	0f47      	lsrs	r7, r0, #29
 80017a2:	00c0      	lsls	r0, r0, #3
 80017a4:	08c0      	lsrs	r0, r0, #3
 80017a6:	077f      	lsls	r7, r7, #29
 80017a8:	4307      	orrs	r7, r0
 80017aa:	e583      	b.n	80012b4 <__aeabi_dsub+0x1f8>
 80017ac:	1883      	adds	r3, r0, r2
 80017ae:	4293      	cmp	r3, r2
 80017b0:	4192      	sbcs	r2, r2
 80017b2:	445c      	add	r4, fp
 80017b4:	4252      	negs	r2, r2
 80017b6:	18a5      	adds	r5, r4, r2
 80017b8:	022a      	lsls	r2, r5, #8
 80017ba:	d500      	bpl.n	80017be <__aeabi_dsub+0x702>
 80017bc:	e724      	b.n	8001608 <__aeabi_dsub+0x54c>
 80017be:	076f      	lsls	r7, r5, #29
 80017c0:	08db      	lsrs	r3, r3, #3
 80017c2:	431f      	orrs	r7, r3
 80017c4:	08ed      	lsrs	r5, r5, #3
 80017c6:	2301      	movs	r3, #1
 80017c8:	e6d0      	b.n	800156c <__aeabi_dsub+0x4b0>
 80017ca:	46c0      	nop			@ (mov r8, r8)
 80017cc:	000007ff 	.word	0x000007ff
 80017d0:	000007fe 	.word	0x000007fe
 80017d4:	ff7fffff 	.word	0xff7fffff
 80017d8:	465b      	mov	r3, fp
 80017da:	08d2      	lsrs	r2, r2, #3
 80017dc:	075f      	lsls	r7, r3, #29
 80017de:	4666      	mov	r6, ip
 80017e0:	4317      	orrs	r7, r2
 80017e2:	08dd      	lsrs	r5, r3, #3
 80017e4:	e566      	b.n	80012b4 <__aeabi_dsub+0x1f8>
 80017e6:	0025      	movs	r5, r4
 80017e8:	3b20      	subs	r3, #32
 80017ea:	40dd      	lsrs	r5, r3
 80017ec:	4663      	mov	r3, ip
 80017ee:	2b20      	cmp	r3, #32
 80017f0:	d005      	beq.n	80017fe <__aeabi_dsub+0x742>
 80017f2:	2340      	movs	r3, #64	@ 0x40
 80017f4:	4661      	mov	r1, ip
 80017f6:	1a5b      	subs	r3, r3, r1
 80017f8:	409c      	lsls	r4, r3
 80017fa:	4320      	orrs	r0, r4
 80017fc:	4680      	mov	r8, r0
 80017fe:	4647      	mov	r7, r8
 8001800:	1e7b      	subs	r3, r7, #1
 8001802:	419f      	sbcs	r7, r3
 8001804:	432f      	orrs	r7, r5
 8001806:	e5a0      	b.n	800134a <__aeabi_dsub+0x28e>
 8001808:	2120      	movs	r1, #32
 800180a:	2700      	movs	r7, #0
 800180c:	1a09      	subs	r1, r1, r0
 800180e:	e4d2      	b.n	80011b6 <__aeabi_dsub+0xfa>
 8001810:	2f00      	cmp	r7, #0
 8001812:	d100      	bne.n	8001816 <__aeabi_dsub+0x75a>
 8001814:	e713      	b.n	800163e <__aeabi_dsub+0x582>
 8001816:	465c      	mov	r4, fp
 8001818:	0017      	movs	r7, r2
 800181a:	2500      	movs	r5, #0
 800181c:	e5f6      	b.n	800140c <__aeabi_dsub+0x350>
 800181e:	08d7      	lsrs	r7, r2, #3
 8001820:	0749      	lsls	r1, r1, #29
 8001822:	2302      	movs	r3, #2
 8001824:	430f      	orrs	r7, r1
 8001826:	092d      	lsrs	r5, r5, #4
 8001828:	e6a0      	b.n	800156c <__aeabi_dsub+0x4b0>
 800182a:	0007      	movs	r7, r0
 800182c:	e542      	b.n	80012b4 <__aeabi_dsub+0x1f8>
 800182e:	465b      	mov	r3, fp
 8001830:	2601      	movs	r6, #1
 8001832:	075f      	lsls	r7, r3, #29
 8001834:	08dd      	lsrs	r5, r3, #3
 8001836:	4663      	mov	r3, ip
 8001838:	08d2      	lsrs	r2, r2, #3
 800183a:	4317      	orrs	r7, r2
 800183c:	401e      	ands	r6, r3
 800183e:	e539      	b.n	80012b4 <__aeabi_dsub+0x1f8>
 8001840:	465b      	mov	r3, fp
 8001842:	08d2      	lsrs	r2, r2, #3
 8001844:	075f      	lsls	r7, r3, #29
 8001846:	4317      	orrs	r7, r2
 8001848:	08dd      	lsrs	r5, r3, #3
 800184a:	e533      	b.n	80012b4 <__aeabi_dsub+0x1f8>
 800184c:	4a1e      	ldr	r2, [pc, #120]	@ (80018c8 <__aeabi_dsub+0x80c>)
 800184e:	08db      	lsrs	r3, r3, #3
 8001850:	4022      	ands	r2, r4
 8001852:	0757      	lsls	r7, r2, #29
 8001854:	0252      	lsls	r2, r2, #9
 8001856:	2501      	movs	r5, #1
 8001858:	431f      	orrs	r7, r3
 800185a:	0b14      	lsrs	r4, r2, #12
 800185c:	e5c2      	b.n	80013e4 <__aeabi_dsub+0x328>
 800185e:	000e      	movs	r6, r1
 8001860:	2001      	movs	r0, #1
 8001862:	e65f      	b.n	8001524 <__aeabi_dsub+0x468>
 8001864:	2b00      	cmp	r3, #0
 8001866:	d00d      	beq.n	8001884 <__aeabi_dsub+0x7c8>
 8001868:	464b      	mov	r3, r9
 800186a:	1b5b      	subs	r3, r3, r5
 800186c:	469c      	mov	ip, r3
 800186e:	2d00      	cmp	r5, #0
 8001870:	d100      	bne.n	8001874 <__aeabi_dsub+0x7b8>
 8001872:	e548      	b.n	8001306 <__aeabi_dsub+0x24a>
 8001874:	2701      	movs	r7, #1
 8001876:	2b38      	cmp	r3, #56	@ 0x38
 8001878:	dd00      	ble.n	800187c <__aeabi_dsub+0x7c0>
 800187a:	e566      	b.n	800134a <__aeabi_dsub+0x28e>
 800187c:	2380      	movs	r3, #128	@ 0x80
 800187e:	041b      	lsls	r3, r3, #16
 8001880:	431c      	orrs	r4, r3
 8001882:	e550      	b.n	8001326 <__aeabi_dsub+0x26a>
 8001884:	1c6b      	adds	r3, r5, #1
 8001886:	4d11      	ldr	r5, [pc, #68]	@ (80018cc <__aeabi_dsub+0x810>)
 8001888:	422b      	tst	r3, r5
 800188a:	d000      	beq.n	800188e <__aeabi_dsub+0x7d2>
 800188c:	e673      	b.n	8001576 <__aeabi_dsub+0x4ba>
 800188e:	4659      	mov	r1, fp
 8001890:	0023      	movs	r3, r4
 8001892:	4311      	orrs	r1, r2
 8001894:	468a      	mov	sl, r1
 8001896:	4303      	orrs	r3, r0
 8001898:	e600      	b.n	800149c <__aeabi_dsub+0x3e0>
 800189a:	0767      	lsls	r7, r4, #29
 800189c:	08c0      	lsrs	r0, r0, #3
 800189e:	2300      	movs	r3, #0
 80018a0:	4307      	orrs	r7, r0
 80018a2:	08e5      	lsrs	r5, r4, #3
 80018a4:	e662      	b.n	800156c <__aeabi_dsub+0x4b0>
 80018a6:	0764      	lsls	r4, r4, #29
 80018a8:	08ff      	lsrs	r7, r7, #3
 80018aa:	4327      	orrs	r7, r4
 80018ac:	0905      	lsrs	r5, r0, #4
 80018ae:	e65d      	b.n	800156c <__aeabi_dsub+0x4b0>
 80018b0:	08d2      	lsrs	r2, r2, #3
 80018b2:	0749      	lsls	r1, r1, #29
 80018b4:	4311      	orrs	r1, r2
 80018b6:	000f      	movs	r7, r1
 80018b8:	2302      	movs	r3, #2
 80018ba:	092d      	lsrs	r5, r5, #4
 80018bc:	e656      	b.n	800156c <__aeabi_dsub+0x4b0>
 80018be:	0007      	movs	r7, r0
 80018c0:	e5a4      	b.n	800140c <__aeabi_dsub+0x350>
 80018c2:	0038      	movs	r0, r7
 80018c4:	e48f      	b.n	80011e6 <__aeabi_dsub+0x12a>
 80018c6:	46c0      	nop			@ (mov r8, r8)
 80018c8:	ff7fffff 	.word	0xff7fffff
 80018cc:	000007fe 	.word	0x000007fe

080018d0 <__aeabi_d2iz>:
 80018d0:	000b      	movs	r3, r1
 80018d2:	0002      	movs	r2, r0
 80018d4:	b570      	push	{r4, r5, r6, lr}
 80018d6:	4d16      	ldr	r5, [pc, #88]	@ (8001930 <__aeabi_d2iz+0x60>)
 80018d8:	030c      	lsls	r4, r1, #12
 80018da:	b082      	sub	sp, #8
 80018dc:	0049      	lsls	r1, r1, #1
 80018de:	2000      	movs	r0, #0
 80018e0:	9200      	str	r2, [sp, #0]
 80018e2:	9301      	str	r3, [sp, #4]
 80018e4:	0b24      	lsrs	r4, r4, #12
 80018e6:	0d49      	lsrs	r1, r1, #21
 80018e8:	0fde      	lsrs	r6, r3, #31
 80018ea:	42a9      	cmp	r1, r5
 80018ec:	dd04      	ble.n	80018f8 <__aeabi_d2iz+0x28>
 80018ee:	4811      	ldr	r0, [pc, #68]	@ (8001934 <__aeabi_d2iz+0x64>)
 80018f0:	4281      	cmp	r1, r0
 80018f2:	dd03      	ble.n	80018fc <__aeabi_d2iz+0x2c>
 80018f4:	4b10      	ldr	r3, [pc, #64]	@ (8001938 <__aeabi_d2iz+0x68>)
 80018f6:	18f0      	adds	r0, r6, r3
 80018f8:	b002      	add	sp, #8
 80018fa:	bd70      	pop	{r4, r5, r6, pc}
 80018fc:	2080      	movs	r0, #128	@ 0x80
 80018fe:	0340      	lsls	r0, r0, #13
 8001900:	4320      	orrs	r0, r4
 8001902:	4c0e      	ldr	r4, [pc, #56]	@ (800193c <__aeabi_d2iz+0x6c>)
 8001904:	1a64      	subs	r4, r4, r1
 8001906:	2c1f      	cmp	r4, #31
 8001908:	dd08      	ble.n	800191c <__aeabi_d2iz+0x4c>
 800190a:	4b0d      	ldr	r3, [pc, #52]	@ (8001940 <__aeabi_d2iz+0x70>)
 800190c:	1a5b      	subs	r3, r3, r1
 800190e:	40d8      	lsrs	r0, r3
 8001910:	0003      	movs	r3, r0
 8001912:	4258      	negs	r0, r3
 8001914:	2e00      	cmp	r6, #0
 8001916:	d1ef      	bne.n	80018f8 <__aeabi_d2iz+0x28>
 8001918:	0018      	movs	r0, r3
 800191a:	e7ed      	b.n	80018f8 <__aeabi_d2iz+0x28>
 800191c:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <__aeabi_d2iz+0x74>)
 800191e:	9a00      	ldr	r2, [sp, #0]
 8001920:	469c      	mov	ip, r3
 8001922:	0003      	movs	r3, r0
 8001924:	4461      	add	r1, ip
 8001926:	408b      	lsls	r3, r1
 8001928:	40e2      	lsrs	r2, r4
 800192a:	4313      	orrs	r3, r2
 800192c:	e7f1      	b.n	8001912 <__aeabi_d2iz+0x42>
 800192e:	46c0      	nop			@ (mov r8, r8)
 8001930:	000003fe 	.word	0x000003fe
 8001934:	0000041d 	.word	0x0000041d
 8001938:	7fffffff 	.word	0x7fffffff
 800193c:	00000433 	.word	0x00000433
 8001940:	00000413 	.word	0x00000413
 8001944:	fffffbed 	.word	0xfffffbed

08001948 <__aeabi_ui2d>:
 8001948:	b510      	push	{r4, lr}
 800194a:	1e04      	subs	r4, r0, #0
 800194c:	d010      	beq.n	8001970 <__aeabi_ui2d+0x28>
 800194e:	f000 f85d 	bl	8001a0c <__clzsi2>
 8001952:	4b0e      	ldr	r3, [pc, #56]	@ (800198c <__aeabi_ui2d+0x44>)
 8001954:	1a1b      	subs	r3, r3, r0
 8001956:	055b      	lsls	r3, r3, #21
 8001958:	0d5b      	lsrs	r3, r3, #21
 800195a:	280a      	cmp	r0, #10
 800195c:	dc0f      	bgt.n	800197e <__aeabi_ui2d+0x36>
 800195e:	220b      	movs	r2, #11
 8001960:	0021      	movs	r1, r4
 8001962:	1a12      	subs	r2, r2, r0
 8001964:	40d1      	lsrs	r1, r2
 8001966:	3015      	adds	r0, #21
 8001968:	030a      	lsls	r2, r1, #12
 800196a:	4084      	lsls	r4, r0
 800196c:	0b12      	lsrs	r2, r2, #12
 800196e:	e001      	b.n	8001974 <__aeabi_ui2d+0x2c>
 8001970:	2300      	movs	r3, #0
 8001972:	2200      	movs	r2, #0
 8001974:	051b      	lsls	r3, r3, #20
 8001976:	4313      	orrs	r3, r2
 8001978:	0020      	movs	r0, r4
 800197a:	0019      	movs	r1, r3
 800197c:	bd10      	pop	{r4, pc}
 800197e:	0022      	movs	r2, r4
 8001980:	380b      	subs	r0, #11
 8001982:	4082      	lsls	r2, r0
 8001984:	0312      	lsls	r2, r2, #12
 8001986:	2400      	movs	r4, #0
 8001988:	0b12      	lsrs	r2, r2, #12
 800198a:	e7f3      	b.n	8001974 <__aeabi_ui2d+0x2c>
 800198c:	0000041e 	.word	0x0000041e

08001990 <__aeabi_cdrcmple>:
 8001990:	4684      	mov	ip, r0
 8001992:	0010      	movs	r0, r2
 8001994:	4662      	mov	r2, ip
 8001996:	468c      	mov	ip, r1
 8001998:	0019      	movs	r1, r3
 800199a:	4663      	mov	r3, ip
 800199c:	e000      	b.n	80019a0 <__aeabi_cdcmpeq>
 800199e:	46c0      	nop			@ (mov r8, r8)

080019a0 <__aeabi_cdcmpeq>:
 80019a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80019a2:	f000 f911 	bl	8001bc8 <__ledf2>
 80019a6:	2800      	cmp	r0, #0
 80019a8:	d401      	bmi.n	80019ae <__aeabi_cdcmpeq+0xe>
 80019aa:	2100      	movs	r1, #0
 80019ac:	42c8      	cmn	r0, r1
 80019ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080019b0 <__aeabi_dcmpeq>:
 80019b0:	b510      	push	{r4, lr}
 80019b2:	f000 f855 	bl	8001a60 <__eqdf2>
 80019b6:	4240      	negs	r0, r0
 80019b8:	3001      	adds	r0, #1
 80019ba:	bd10      	pop	{r4, pc}

080019bc <__aeabi_dcmplt>:
 80019bc:	b510      	push	{r4, lr}
 80019be:	f000 f903 	bl	8001bc8 <__ledf2>
 80019c2:	2800      	cmp	r0, #0
 80019c4:	db01      	blt.n	80019ca <__aeabi_dcmplt+0xe>
 80019c6:	2000      	movs	r0, #0
 80019c8:	bd10      	pop	{r4, pc}
 80019ca:	2001      	movs	r0, #1
 80019cc:	bd10      	pop	{r4, pc}
 80019ce:	46c0      	nop			@ (mov r8, r8)

080019d0 <__aeabi_dcmple>:
 80019d0:	b510      	push	{r4, lr}
 80019d2:	f000 f8f9 	bl	8001bc8 <__ledf2>
 80019d6:	2800      	cmp	r0, #0
 80019d8:	dd01      	ble.n	80019de <__aeabi_dcmple+0xe>
 80019da:	2000      	movs	r0, #0
 80019dc:	bd10      	pop	{r4, pc}
 80019de:	2001      	movs	r0, #1
 80019e0:	bd10      	pop	{r4, pc}
 80019e2:	46c0      	nop			@ (mov r8, r8)

080019e4 <__aeabi_dcmpgt>:
 80019e4:	b510      	push	{r4, lr}
 80019e6:	f000 f87f 	bl	8001ae8 <__gedf2>
 80019ea:	2800      	cmp	r0, #0
 80019ec:	dc01      	bgt.n	80019f2 <__aeabi_dcmpgt+0xe>
 80019ee:	2000      	movs	r0, #0
 80019f0:	bd10      	pop	{r4, pc}
 80019f2:	2001      	movs	r0, #1
 80019f4:	bd10      	pop	{r4, pc}
 80019f6:	46c0      	nop			@ (mov r8, r8)

080019f8 <__aeabi_dcmpge>:
 80019f8:	b510      	push	{r4, lr}
 80019fa:	f000 f875 	bl	8001ae8 <__gedf2>
 80019fe:	2800      	cmp	r0, #0
 8001a00:	da01      	bge.n	8001a06 <__aeabi_dcmpge+0xe>
 8001a02:	2000      	movs	r0, #0
 8001a04:	bd10      	pop	{r4, pc}
 8001a06:	2001      	movs	r0, #1
 8001a08:	bd10      	pop	{r4, pc}
 8001a0a:	46c0      	nop			@ (mov r8, r8)

08001a0c <__clzsi2>:
 8001a0c:	211c      	movs	r1, #28
 8001a0e:	2301      	movs	r3, #1
 8001a10:	041b      	lsls	r3, r3, #16
 8001a12:	4298      	cmp	r0, r3
 8001a14:	d301      	bcc.n	8001a1a <__clzsi2+0xe>
 8001a16:	0c00      	lsrs	r0, r0, #16
 8001a18:	3910      	subs	r1, #16
 8001a1a:	0a1b      	lsrs	r3, r3, #8
 8001a1c:	4298      	cmp	r0, r3
 8001a1e:	d301      	bcc.n	8001a24 <__clzsi2+0x18>
 8001a20:	0a00      	lsrs	r0, r0, #8
 8001a22:	3908      	subs	r1, #8
 8001a24:	091b      	lsrs	r3, r3, #4
 8001a26:	4298      	cmp	r0, r3
 8001a28:	d301      	bcc.n	8001a2e <__clzsi2+0x22>
 8001a2a:	0900      	lsrs	r0, r0, #4
 8001a2c:	3904      	subs	r1, #4
 8001a2e:	a202      	add	r2, pc, #8	@ (adr r2, 8001a38 <__clzsi2+0x2c>)
 8001a30:	5c10      	ldrb	r0, [r2, r0]
 8001a32:	1840      	adds	r0, r0, r1
 8001a34:	4770      	bx	lr
 8001a36:	46c0      	nop			@ (mov r8, r8)
 8001a38:	02020304 	.word	0x02020304
 8001a3c:	01010101 	.word	0x01010101
	...

08001a48 <__clzdi2>:
 8001a48:	b510      	push	{r4, lr}
 8001a4a:	2900      	cmp	r1, #0
 8001a4c:	d103      	bne.n	8001a56 <__clzdi2+0xe>
 8001a4e:	f7ff ffdd 	bl	8001a0c <__clzsi2>
 8001a52:	3020      	adds	r0, #32
 8001a54:	e002      	b.n	8001a5c <__clzdi2+0x14>
 8001a56:	0008      	movs	r0, r1
 8001a58:	f7ff ffd8 	bl	8001a0c <__clzsi2>
 8001a5c:	bd10      	pop	{r4, pc}
 8001a5e:	46c0      	nop			@ (mov r8, r8)

08001a60 <__eqdf2>:
 8001a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a62:	4657      	mov	r7, sl
 8001a64:	46de      	mov	lr, fp
 8001a66:	464e      	mov	r6, r9
 8001a68:	4645      	mov	r5, r8
 8001a6a:	b5e0      	push	{r5, r6, r7, lr}
 8001a6c:	000d      	movs	r5, r1
 8001a6e:	0004      	movs	r4, r0
 8001a70:	0fe8      	lsrs	r0, r5, #31
 8001a72:	4683      	mov	fp, r0
 8001a74:	0309      	lsls	r1, r1, #12
 8001a76:	0fd8      	lsrs	r0, r3, #31
 8001a78:	0b09      	lsrs	r1, r1, #12
 8001a7a:	4682      	mov	sl, r0
 8001a7c:	4819      	ldr	r0, [pc, #100]	@ (8001ae4 <__eqdf2+0x84>)
 8001a7e:	468c      	mov	ip, r1
 8001a80:	031f      	lsls	r7, r3, #12
 8001a82:	0069      	lsls	r1, r5, #1
 8001a84:	005e      	lsls	r6, r3, #1
 8001a86:	0d49      	lsrs	r1, r1, #21
 8001a88:	0b3f      	lsrs	r7, r7, #12
 8001a8a:	0d76      	lsrs	r6, r6, #21
 8001a8c:	4281      	cmp	r1, r0
 8001a8e:	d018      	beq.n	8001ac2 <__eqdf2+0x62>
 8001a90:	4286      	cmp	r6, r0
 8001a92:	d00f      	beq.n	8001ab4 <__eqdf2+0x54>
 8001a94:	2001      	movs	r0, #1
 8001a96:	42b1      	cmp	r1, r6
 8001a98:	d10d      	bne.n	8001ab6 <__eqdf2+0x56>
 8001a9a:	45bc      	cmp	ip, r7
 8001a9c:	d10b      	bne.n	8001ab6 <__eqdf2+0x56>
 8001a9e:	4294      	cmp	r4, r2
 8001aa0:	d109      	bne.n	8001ab6 <__eqdf2+0x56>
 8001aa2:	45d3      	cmp	fp, sl
 8001aa4:	d01c      	beq.n	8001ae0 <__eqdf2+0x80>
 8001aa6:	2900      	cmp	r1, #0
 8001aa8:	d105      	bne.n	8001ab6 <__eqdf2+0x56>
 8001aaa:	4660      	mov	r0, ip
 8001aac:	4320      	orrs	r0, r4
 8001aae:	1e43      	subs	r3, r0, #1
 8001ab0:	4198      	sbcs	r0, r3
 8001ab2:	e000      	b.n	8001ab6 <__eqdf2+0x56>
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	bcf0      	pop	{r4, r5, r6, r7}
 8001ab8:	46bb      	mov	fp, r7
 8001aba:	46b2      	mov	sl, r6
 8001abc:	46a9      	mov	r9, r5
 8001abe:	46a0      	mov	r8, r4
 8001ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	428e      	cmp	r6, r1
 8001ac6:	d1f6      	bne.n	8001ab6 <__eqdf2+0x56>
 8001ac8:	4661      	mov	r1, ip
 8001aca:	4339      	orrs	r1, r7
 8001acc:	000f      	movs	r7, r1
 8001ace:	4317      	orrs	r7, r2
 8001ad0:	4327      	orrs	r7, r4
 8001ad2:	d1f0      	bne.n	8001ab6 <__eqdf2+0x56>
 8001ad4:	465b      	mov	r3, fp
 8001ad6:	4652      	mov	r2, sl
 8001ad8:	1a98      	subs	r0, r3, r2
 8001ada:	1e43      	subs	r3, r0, #1
 8001adc:	4198      	sbcs	r0, r3
 8001ade:	e7ea      	b.n	8001ab6 <__eqdf2+0x56>
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	e7e8      	b.n	8001ab6 <__eqdf2+0x56>
 8001ae4:	000007ff 	.word	0x000007ff

08001ae8 <__gedf2>:
 8001ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aea:	4657      	mov	r7, sl
 8001aec:	464e      	mov	r6, r9
 8001aee:	4645      	mov	r5, r8
 8001af0:	46de      	mov	lr, fp
 8001af2:	b5e0      	push	{r5, r6, r7, lr}
 8001af4:	000d      	movs	r5, r1
 8001af6:	030e      	lsls	r6, r1, #12
 8001af8:	0049      	lsls	r1, r1, #1
 8001afa:	0d49      	lsrs	r1, r1, #21
 8001afc:	468a      	mov	sl, r1
 8001afe:	0fdf      	lsrs	r7, r3, #31
 8001b00:	0fe9      	lsrs	r1, r5, #31
 8001b02:	46bc      	mov	ip, r7
 8001b04:	b083      	sub	sp, #12
 8001b06:	4f2f      	ldr	r7, [pc, #188]	@ (8001bc4 <__gedf2+0xdc>)
 8001b08:	0004      	movs	r4, r0
 8001b0a:	4680      	mov	r8, r0
 8001b0c:	9101      	str	r1, [sp, #4]
 8001b0e:	0058      	lsls	r0, r3, #1
 8001b10:	0319      	lsls	r1, r3, #12
 8001b12:	4691      	mov	r9, r2
 8001b14:	0b36      	lsrs	r6, r6, #12
 8001b16:	0b09      	lsrs	r1, r1, #12
 8001b18:	0d40      	lsrs	r0, r0, #21
 8001b1a:	45ba      	cmp	sl, r7
 8001b1c:	d01d      	beq.n	8001b5a <__gedf2+0x72>
 8001b1e:	42b8      	cmp	r0, r7
 8001b20:	d00d      	beq.n	8001b3e <__gedf2+0x56>
 8001b22:	4657      	mov	r7, sl
 8001b24:	2f00      	cmp	r7, #0
 8001b26:	d12a      	bne.n	8001b7e <__gedf2+0x96>
 8001b28:	4334      	orrs	r4, r6
 8001b2a:	2800      	cmp	r0, #0
 8001b2c:	d124      	bne.n	8001b78 <__gedf2+0x90>
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	d036      	beq.n	8001ba0 <__gedf2+0xb8>
 8001b32:	2c00      	cmp	r4, #0
 8001b34:	d141      	bne.n	8001bba <__gedf2+0xd2>
 8001b36:	4663      	mov	r3, ip
 8001b38:	0058      	lsls	r0, r3, #1
 8001b3a:	3801      	subs	r0, #1
 8001b3c:	e015      	b.n	8001b6a <__gedf2+0x82>
 8001b3e:	4311      	orrs	r1, r2
 8001b40:	d138      	bne.n	8001bb4 <__gedf2+0xcc>
 8001b42:	4653      	mov	r3, sl
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <__gedf2+0x64>
 8001b48:	4326      	orrs	r6, r4
 8001b4a:	d0f4      	beq.n	8001b36 <__gedf2+0x4e>
 8001b4c:	9b01      	ldr	r3, [sp, #4]
 8001b4e:	4563      	cmp	r3, ip
 8001b50:	d107      	bne.n	8001b62 <__gedf2+0x7a>
 8001b52:	9b01      	ldr	r3, [sp, #4]
 8001b54:	0058      	lsls	r0, r3, #1
 8001b56:	3801      	subs	r0, #1
 8001b58:	e007      	b.n	8001b6a <__gedf2+0x82>
 8001b5a:	4326      	orrs	r6, r4
 8001b5c:	d12a      	bne.n	8001bb4 <__gedf2+0xcc>
 8001b5e:	4550      	cmp	r0, sl
 8001b60:	d021      	beq.n	8001ba6 <__gedf2+0xbe>
 8001b62:	2001      	movs	r0, #1
 8001b64:	9b01      	ldr	r3, [sp, #4]
 8001b66:	425f      	negs	r7, r3
 8001b68:	4338      	orrs	r0, r7
 8001b6a:	b003      	add	sp, #12
 8001b6c:	bcf0      	pop	{r4, r5, r6, r7}
 8001b6e:	46bb      	mov	fp, r7
 8001b70:	46b2      	mov	sl, r6
 8001b72:	46a9      	mov	r9, r5
 8001b74:	46a0      	mov	r8, r4
 8001b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b78:	2c00      	cmp	r4, #0
 8001b7a:	d0dc      	beq.n	8001b36 <__gedf2+0x4e>
 8001b7c:	e7e6      	b.n	8001b4c <__gedf2+0x64>
 8001b7e:	2800      	cmp	r0, #0
 8001b80:	d0ef      	beq.n	8001b62 <__gedf2+0x7a>
 8001b82:	9b01      	ldr	r3, [sp, #4]
 8001b84:	4563      	cmp	r3, ip
 8001b86:	d1ec      	bne.n	8001b62 <__gedf2+0x7a>
 8001b88:	4582      	cmp	sl, r0
 8001b8a:	dcea      	bgt.n	8001b62 <__gedf2+0x7a>
 8001b8c:	dbe1      	blt.n	8001b52 <__gedf2+0x6a>
 8001b8e:	428e      	cmp	r6, r1
 8001b90:	d8e7      	bhi.n	8001b62 <__gedf2+0x7a>
 8001b92:	d1de      	bne.n	8001b52 <__gedf2+0x6a>
 8001b94:	45c8      	cmp	r8, r9
 8001b96:	d8e4      	bhi.n	8001b62 <__gedf2+0x7a>
 8001b98:	2000      	movs	r0, #0
 8001b9a:	45c8      	cmp	r8, r9
 8001b9c:	d2e5      	bcs.n	8001b6a <__gedf2+0x82>
 8001b9e:	e7d8      	b.n	8001b52 <__gedf2+0x6a>
 8001ba0:	2c00      	cmp	r4, #0
 8001ba2:	d0e2      	beq.n	8001b6a <__gedf2+0x82>
 8001ba4:	e7dd      	b.n	8001b62 <__gedf2+0x7a>
 8001ba6:	4311      	orrs	r1, r2
 8001ba8:	d104      	bne.n	8001bb4 <__gedf2+0xcc>
 8001baa:	9b01      	ldr	r3, [sp, #4]
 8001bac:	4563      	cmp	r3, ip
 8001bae:	d1d8      	bne.n	8001b62 <__gedf2+0x7a>
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	e7da      	b.n	8001b6a <__gedf2+0x82>
 8001bb4:	2002      	movs	r0, #2
 8001bb6:	4240      	negs	r0, r0
 8001bb8:	e7d7      	b.n	8001b6a <__gedf2+0x82>
 8001bba:	9b01      	ldr	r3, [sp, #4]
 8001bbc:	4563      	cmp	r3, ip
 8001bbe:	d0e6      	beq.n	8001b8e <__gedf2+0xa6>
 8001bc0:	e7cf      	b.n	8001b62 <__gedf2+0x7a>
 8001bc2:	46c0      	nop			@ (mov r8, r8)
 8001bc4:	000007ff 	.word	0x000007ff

08001bc8 <__ledf2>:
 8001bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bca:	4657      	mov	r7, sl
 8001bcc:	464e      	mov	r6, r9
 8001bce:	4645      	mov	r5, r8
 8001bd0:	46de      	mov	lr, fp
 8001bd2:	b5e0      	push	{r5, r6, r7, lr}
 8001bd4:	000d      	movs	r5, r1
 8001bd6:	030e      	lsls	r6, r1, #12
 8001bd8:	0049      	lsls	r1, r1, #1
 8001bda:	0d49      	lsrs	r1, r1, #21
 8001bdc:	468a      	mov	sl, r1
 8001bde:	0fdf      	lsrs	r7, r3, #31
 8001be0:	0fe9      	lsrs	r1, r5, #31
 8001be2:	46bc      	mov	ip, r7
 8001be4:	b083      	sub	sp, #12
 8001be6:	4f2e      	ldr	r7, [pc, #184]	@ (8001ca0 <__ledf2+0xd8>)
 8001be8:	0004      	movs	r4, r0
 8001bea:	4680      	mov	r8, r0
 8001bec:	9101      	str	r1, [sp, #4]
 8001bee:	0058      	lsls	r0, r3, #1
 8001bf0:	0319      	lsls	r1, r3, #12
 8001bf2:	4691      	mov	r9, r2
 8001bf4:	0b36      	lsrs	r6, r6, #12
 8001bf6:	0b09      	lsrs	r1, r1, #12
 8001bf8:	0d40      	lsrs	r0, r0, #21
 8001bfa:	45ba      	cmp	sl, r7
 8001bfc:	d01e      	beq.n	8001c3c <__ledf2+0x74>
 8001bfe:	42b8      	cmp	r0, r7
 8001c00:	d00d      	beq.n	8001c1e <__ledf2+0x56>
 8001c02:	4657      	mov	r7, sl
 8001c04:	2f00      	cmp	r7, #0
 8001c06:	d127      	bne.n	8001c58 <__ledf2+0x90>
 8001c08:	4334      	orrs	r4, r6
 8001c0a:	2800      	cmp	r0, #0
 8001c0c:	d133      	bne.n	8001c76 <__ledf2+0xae>
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	d034      	beq.n	8001c7c <__ledf2+0xb4>
 8001c12:	2c00      	cmp	r4, #0
 8001c14:	d140      	bne.n	8001c98 <__ledf2+0xd0>
 8001c16:	4663      	mov	r3, ip
 8001c18:	0058      	lsls	r0, r3, #1
 8001c1a:	3801      	subs	r0, #1
 8001c1c:	e015      	b.n	8001c4a <__ledf2+0x82>
 8001c1e:	4311      	orrs	r1, r2
 8001c20:	d112      	bne.n	8001c48 <__ledf2+0x80>
 8001c22:	4653      	mov	r3, sl
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <__ledf2+0x64>
 8001c28:	4326      	orrs	r6, r4
 8001c2a:	d0f4      	beq.n	8001c16 <__ledf2+0x4e>
 8001c2c:	9b01      	ldr	r3, [sp, #4]
 8001c2e:	4563      	cmp	r3, ip
 8001c30:	d01d      	beq.n	8001c6e <__ledf2+0xa6>
 8001c32:	2001      	movs	r0, #1
 8001c34:	9b01      	ldr	r3, [sp, #4]
 8001c36:	425f      	negs	r7, r3
 8001c38:	4338      	orrs	r0, r7
 8001c3a:	e006      	b.n	8001c4a <__ledf2+0x82>
 8001c3c:	4326      	orrs	r6, r4
 8001c3e:	d103      	bne.n	8001c48 <__ledf2+0x80>
 8001c40:	4550      	cmp	r0, sl
 8001c42:	d1f6      	bne.n	8001c32 <__ledf2+0x6a>
 8001c44:	4311      	orrs	r1, r2
 8001c46:	d01c      	beq.n	8001c82 <__ledf2+0xba>
 8001c48:	2002      	movs	r0, #2
 8001c4a:	b003      	add	sp, #12
 8001c4c:	bcf0      	pop	{r4, r5, r6, r7}
 8001c4e:	46bb      	mov	fp, r7
 8001c50:	46b2      	mov	sl, r6
 8001c52:	46a9      	mov	r9, r5
 8001c54:	46a0      	mov	r8, r4
 8001c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c58:	2800      	cmp	r0, #0
 8001c5a:	d0ea      	beq.n	8001c32 <__ledf2+0x6a>
 8001c5c:	9b01      	ldr	r3, [sp, #4]
 8001c5e:	4563      	cmp	r3, ip
 8001c60:	d1e7      	bne.n	8001c32 <__ledf2+0x6a>
 8001c62:	4582      	cmp	sl, r0
 8001c64:	dce5      	bgt.n	8001c32 <__ledf2+0x6a>
 8001c66:	db02      	blt.n	8001c6e <__ledf2+0xa6>
 8001c68:	428e      	cmp	r6, r1
 8001c6a:	d8e2      	bhi.n	8001c32 <__ledf2+0x6a>
 8001c6c:	d00e      	beq.n	8001c8c <__ledf2+0xc4>
 8001c6e:	9b01      	ldr	r3, [sp, #4]
 8001c70:	0058      	lsls	r0, r3, #1
 8001c72:	3801      	subs	r0, #1
 8001c74:	e7e9      	b.n	8001c4a <__ledf2+0x82>
 8001c76:	2c00      	cmp	r4, #0
 8001c78:	d0cd      	beq.n	8001c16 <__ledf2+0x4e>
 8001c7a:	e7d7      	b.n	8001c2c <__ledf2+0x64>
 8001c7c:	2c00      	cmp	r4, #0
 8001c7e:	d0e4      	beq.n	8001c4a <__ledf2+0x82>
 8001c80:	e7d7      	b.n	8001c32 <__ledf2+0x6a>
 8001c82:	9b01      	ldr	r3, [sp, #4]
 8001c84:	2000      	movs	r0, #0
 8001c86:	4563      	cmp	r3, ip
 8001c88:	d0df      	beq.n	8001c4a <__ledf2+0x82>
 8001c8a:	e7d2      	b.n	8001c32 <__ledf2+0x6a>
 8001c8c:	45c8      	cmp	r8, r9
 8001c8e:	d8d0      	bhi.n	8001c32 <__ledf2+0x6a>
 8001c90:	2000      	movs	r0, #0
 8001c92:	45c8      	cmp	r8, r9
 8001c94:	d2d9      	bcs.n	8001c4a <__ledf2+0x82>
 8001c96:	e7ea      	b.n	8001c6e <__ledf2+0xa6>
 8001c98:	9b01      	ldr	r3, [sp, #4]
 8001c9a:	4563      	cmp	r3, ip
 8001c9c:	d0e4      	beq.n	8001c68 <__ledf2+0xa0>
 8001c9e:	e7c8      	b.n	8001c32 <__ledf2+0x6a>
 8001ca0:	000007ff 	.word	0x000007ff

08001ca4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	static uint8_t serial_string[50] = "";
	float theta = 0.0f; // electrical angle
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
	float freq = 20000.0f;
 8001cae:	4b48      	ldr	r3, [pc, #288]	@ (8001dd0 <main+0x12c>)
 8001cb0:	61bb      	str	r3, [r7, #24]
	float Ts;
	float M_PI = 3.141592653;
 8001cb2:	4b48      	ldr	r3, [pc, #288]	@ (8001dd4 <main+0x130>)
 8001cb4:	617b      	str	r3, [r7, #20]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cb6:	f000 fc97 	bl	80025e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cba:	f000 f8a3 	bl	8001e04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cbe:	f000 fa63 	bl	8002188 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001cc2:	f000 f941 	bl	8001f48 <MX_TIM2_Init>
  MX_TIM22_Init();
 8001cc6:	f000 f9c7 	bl	8002058 <MX_TIM22_Init>
  MX_LPUART1_UART_Init();
 8001cca:	f000 f90d 	bl	8001ee8 <MX_LPUART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Check the contents of the driver control register
  sprintf((char *)serial_string, "Hello From Wheelhouse!\r\n");
 8001cce:	4a42      	ldr	r2, [pc, #264]	@ (8001dd8 <main+0x134>)
 8001cd0:	4b42      	ldr	r3, [pc, #264]	@ (8001ddc <main+0x138>)
 8001cd2:	0011      	movs	r1, r2
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f003 f96f 	bl	8004fb8 <siprintf>
  HAL_UART_Transmit(&hlpuart1, serial_string, strlen(serial_string), 10); // Write the buffer to the serial interface using UART protocol
 8001cda:	4b40      	ldr	r3, [pc, #256]	@ (8001ddc <main+0x138>)
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f7fe fa13 	bl	8000108 <strlen>
 8001ce2:	0003      	movs	r3, r0
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	493d      	ldr	r1, [pc, #244]	@ (8001ddc <main+0x138>)
 8001ce8:	483d      	ldr	r0, [pc, #244]	@ (8001de0 <main+0x13c>)
 8001cea:	230a      	movs	r3, #10
 8001cec:	f002 fc4a 	bl	8004584 <HAL_UART_Transmit>


  // Turn driver off
  HAL_GPIO_WritePin(DRVOFF_GPIO_Port, PWM_INLC_Pin, GPIO_PIN_SET);
 8001cf0:	4b3c      	ldr	r3, [pc, #240]	@ (8001de4 <main+0x140>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f000 ff2c 	bl	8002b54 <HAL_GPIO_WritePin>
//  HAL_GPIO_WritePin(PWM_INLC_GPIO_Port, PWM_INLC_Pin, GPIO_PIN_SET);
//  HAL_GPIO_WritePin(PWM_INLB_GPIO_Port, PWM_INLB_Pin, GPIO_PIN_SET);
//  HAL_GPIO_WritePin(PWM_INLA_GPIO_Port, PWM_INLA_Pin, GPIO_PIN_SET);

  // Start TIM2 PWM channels (master)
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);  // Phase A
 8001cfc:	4b3a      	ldr	r3, [pc, #232]	@ (8001de8 <main+0x144>)
 8001cfe:	2100      	movs	r1, #0
 8001d00:	0018      	movs	r0, r3
 8001d02:	f001 fe79 	bl	80039f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);  // Phase B
 8001d06:	4b38      	ldr	r3, [pc, #224]	@ (8001de8 <main+0x144>)
 8001d08:	2104      	movs	r1, #4
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f001 fe74 	bl	80039f8 <HAL_TIM_PWM_Start>

  // Start TIM22 PWM channel (slave)
  HAL_TIM_PWM_Start(&htim22, TIM_CHANNEL_2); // Phase C
 8001d10:	4b36      	ldr	r3, [pc, #216]	@ (8001dec <main+0x148>)
 8001d12:	2104      	movs	r1, #4
 8001d14:	0018      	movs	r0, r3
 8001d16:	f001 fe6f 	bl	80039f8 <HAL_TIM_PWM_Start>
  theta = 0.0f;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
  // we are using open loop control and incrementing this each iteration to change the duty cycle
  while (1)
  {
    // sprintf((char *)serial_string, "Hello from Wheelhouse!.\r\n");

    uint32_t period = __HAL_TIM_GET_AUTORELOAD(&htim2);
 8001d1e:	4b32      	ldr	r3, [pc, #200]	@ (8001de8 <main+0x144>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d24:	613b      	str	r3, [r7, #16]

    // PWM TEST
    uint32_t dutyA = period * 0.3;  // 30% duty
 8001d26:	6938      	ldr	r0, [r7, #16]
 8001d28:	f7ff fe0e 	bl	8001948 <__aeabi_ui2d>
 8001d2c:	4a30      	ldr	r2, [pc, #192]	@ (8001df0 <main+0x14c>)
 8001d2e:	4b31      	ldr	r3, [pc, #196]	@ (8001df4 <main+0x150>)
 8001d30:	f7fe fede 	bl	8000af0 <__aeabi_dmul>
 8001d34:	0002      	movs	r2, r0
 8001d36:	000b      	movs	r3, r1
 8001d38:	0010      	movs	r0, r2
 8001d3a:	0019      	movs	r1, r3
 8001d3c:	f7fe faa2 	bl	8000284 <__aeabi_d2uiz>
 8001d40:	0003      	movs	r3, r0
 8001d42:	60fb      	str	r3, [r7, #12]
    uint32_t dutyB = period * 0.5;  // 50% duty
 8001d44:	6938      	ldr	r0, [r7, #16]
 8001d46:	f7ff fdff 	bl	8001948 <__aeabi_ui2d>
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001df8 <main+0x154>)
 8001d4e:	f7fe fecf 	bl	8000af0 <__aeabi_dmul>
 8001d52:	0002      	movs	r2, r0
 8001d54:	000b      	movs	r3, r1
 8001d56:	0010      	movs	r0, r2
 8001d58:	0019      	movs	r1, r3
 8001d5a:	f7fe fa93 	bl	8000284 <__aeabi_d2uiz>
 8001d5e:	0003      	movs	r3, r0
 8001d60:	60bb      	str	r3, [r7, #8]
    uint32_t dutyC = period * 0.7;  // 70% duty
 8001d62:	6938      	ldr	r0, [r7, #16]
 8001d64:	f7ff fdf0 	bl	8001948 <__aeabi_ui2d>
 8001d68:	4a24      	ldr	r2, [pc, #144]	@ (8001dfc <main+0x158>)
 8001d6a:	4b25      	ldr	r3, [pc, #148]	@ (8001e00 <main+0x15c>)
 8001d6c:	f7fe fec0 	bl	8000af0 <__aeabi_dmul>
 8001d70:	0002      	movs	r2, r0
 8001d72:	000b      	movs	r3, r1
 8001d74:	0010      	movs	r0, r2
 8001d76:	0019      	movs	r1, r3
 8001d78:	f7fe fa84 	bl	8000284 <__aeabi_d2uiz>
 8001d7c:	0003      	movs	r3, r0
 8001d7e:	607b      	str	r3, [r7, #4]

    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, dutyA);
 8001d80:	4b19      	ldr	r3, [pc, #100]	@ (8001de8 <main+0x144>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, dutyB);
 8001d88:	4b17      	ldr	r3, [pc, #92]	@ (8001de8 <main+0x144>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68ba      	ldr	r2, [r7, #8]
 8001d8e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim22, TIM_CHANNEL_2, dutyC);
 8001d90:	4b16      	ldr	r3, [pc, #88]	@ (8001dec <main+0x148>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	639a      	str	r2, [r3, #56]	@ 0x38

    // Open Loop motor control:
    // We must set the duty cycle based on the electrical angle of the motor
    theta += 2.0f * M_PI * freq * Ts;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	1c19      	adds	r1, r3, #0
 8001d9c:	1c18      	adds	r0, r3, #0
 8001d9e:	f7fe fb5b 	bl	8000458 <__aeabi_fadd>
 8001da2:	1c03      	adds	r3, r0, #0
 8001da4:	69b9      	ldr	r1, [r7, #24]
 8001da6:	1c18      	adds	r0, r3, #0
 8001da8:	f7fe fd48 	bl	800083c <__aeabi_fmul>
 8001dac:	1c03      	adds	r3, r0, #0
 8001dae:	6839      	ldr	r1, [r7, #0]
 8001db0:	1c18      	adds	r0, r3, #0
 8001db2:	f7fe fd43 	bl	800083c <__aeabi_fmul>
 8001db6:	1c03      	adds	r3, r0, #0
 8001db8:	1c19      	adds	r1, r3, #0
 8001dba:	69f8      	ldr	r0, [r7, #28]
 8001dbc:	f7fe fb4c 	bl	8000458 <__aeabi_fadd>
 8001dc0:	1c03      	adds	r3, r0, #0
 8001dc2:	61fb      	str	r3, [r7, #28]
//
//	HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, Va * period);
//	HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, Vb * period);
//	HAL_TIM_SET_COMPARE(&htim22, TIM_CHANNEL_2, Vc * period);

    HAL_Delay(1);
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	f000 fc7f 	bl	80026c8 <HAL_Delay>
  {
 8001dca:	46c0      	nop			@ (mov r8, r8)
 8001dcc:	e7a7      	b.n	8001d1e <main+0x7a>
 8001dce:	46c0      	nop			@ (mov r8, r8)
 8001dd0:	469c4000 	.word	0x469c4000
 8001dd4:	40490fdb 	.word	0x40490fdb
 8001dd8:	08005908 	.word	0x08005908
 8001ddc:	20000180 	.word	0x20000180
 8001de0:	20000078 	.word	0x20000078
 8001de4:	50000800 	.word	0x50000800
 8001de8:	20000100 	.word	0x20000100
 8001dec:	20000140 	.word	0x20000140
 8001df0:	33333333 	.word	0x33333333
 8001df4:	3fd33333 	.word	0x3fd33333
 8001df8:	3fe00000 	.word	0x3fe00000
 8001dfc:	66666666 	.word	0x66666666
 8001e00:	3fe66666 	.word	0x3fe66666

08001e04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e04:	b590      	push	{r4, r7, lr}
 8001e06:	b099      	sub	sp, #100	@ 0x64
 8001e08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e0a:	242c      	movs	r4, #44	@ 0x2c
 8001e0c:	193b      	adds	r3, r7, r4
 8001e0e:	0018      	movs	r0, r3
 8001e10:	2334      	movs	r3, #52	@ 0x34
 8001e12:	001a      	movs	r2, r3
 8001e14:	2100      	movs	r1, #0
 8001e16:	f003 f8f1 	bl	8004ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e1a:	2318      	movs	r3, #24
 8001e1c:	18fb      	adds	r3, r7, r3
 8001e1e:	0018      	movs	r0, r3
 8001e20:	2314      	movs	r3, #20
 8001e22:	001a      	movs	r2, r3
 8001e24:	2100      	movs	r1, #0
 8001e26:	f003 f8e9 	bl	8004ffc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e2a:	003b      	movs	r3, r7
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	2318      	movs	r3, #24
 8001e30:	001a      	movs	r2, r3
 8001e32:	2100      	movs	r1, #0
 8001e34:	f003 f8e2 	bl	8004ffc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e38:	4b29      	ldr	r3, [pc, #164]	@ (8001ee0 <SystemClock_Config+0xdc>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a29      	ldr	r2, [pc, #164]	@ (8001ee4 <SystemClock_Config+0xe0>)
 8001e3e:	401a      	ands	r2, r3
 8001e40:	4b27      	ldr	r3, [pc, #156]	@ (8001ee0 <SystemClock_Config+0xdc>)
 8001e42:	2180      	movs	r1, #128	@ 0x80
 8001e44:	0109      	lsls	r1, r1, #4
 8001e46:	430a      	orrs	r2, r1
 8001e48:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e4a:	0021      	movs	r1, r4
 8001e4c:	187b      	adds	r3, r7, r1
 8001e4e:	2202      	movs	r2, #2
 8001e50:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e52:	187b      	adds	r3, r7, r1
 8001e54:	2201      	movs	r2, #1
 8001e56:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e58:	187b      	adds	r3, r7, r1
 8001e5a:	2210      	movs	r2, #16
 8001e5c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e5e:	187b      	adds	r3, r7, r1
 8001e60:	2202      	movs	r2, #2
 8001e62:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e64:	187b      	adds	r3, r7, r1
 8001e66:	2200      	movs	r2, #0
 8001e68:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8001e6a:	187b      	adds	r3, r7, r1
 8001e6c:	2280      	movs	r2, #128	@ 0x80
 8001e6e:	02d2      	lsls	r2, r2, #11
 8001e70:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001e72:	187b      	adds	r3, r7, r1
 8001e74:	2280      	movs	r2, #128	@ 0x80
 8001e76:	03d2      	lsls	r2, r2, #15
 8001e78:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e7a:	187b      	adds	r3, r7, r1
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f000 fe87 	bl	8002b90 <HAL_RCC_OscConfig>
 8001e82:	1e03      	subs	r3, r0, #0
 8001e84:	d001      	beq.n	8001e8a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001e86:	f000 fa2f 	bl	80022e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e8a:	2118      	movs	r1, #24
 8001e8c:	187b      	adds	r3, r7, r1
 8001e8e:	220f      	movs	r2, #15
 8001e90:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e92:	187b      	adds	r3, r7, r1
 8001e94:	2203      	movs	r2, #3
 8001e96:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8001e98:	187b      	adds	r3, r7, r1
 8001e9a:	2290      	movs	r2, #144	@ 0x90
 8001e9c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e9e:	187b      	adds	r3, r7, r1
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ea4:	187b      	adds	r3, r7, r1
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001eaa:	187b      	adds	r3, r7, r1
 8001eac:	2100      	movs	r1, #0
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f001 f9ea 	bl	8003288 <HAL_RCC_ClockConfig>
 8001eb4:	1e03      	subs	r3, r0, #0
 8001eb6:	d001      	beq.n	8001ebc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001eb8:	f000 fa16 	bl	80022e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001ebc:	003b      	movs	r3, r7
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001ec2:	003b      	movs	r3, r7
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ec8:	003b      	movs	r3, r7
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f001 fbe0 	bl	8003690 <HAL_RCCEx_PeriphCLKConfig>
 8001ed0:	1e03      	subs	r3, r0, #0
 8001ed2:	d001      	beq.n	8001ed8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001ed4:	f000 fa08 	bl	80022e8 <Error_Handler>
  }
}
 8001ed8:	46c0      	nop			@ (mov r8, r8)
 8001eda:	46bd      	mov	sp, r7
 8001edc:	b019      	add	sp, #100	@ 0x64
 8001ede:	bd90      	pop	{r4, r7, pc}
 8001ee0:	40007000 	.word	0x40007000
 8001ee4:	ffffe7ff 	.word	0xffffe7ff

08001ee8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001eec:	4b13      	ldr	r3, [pc, #76]	@ (8001f3c <MX_LPUART1_UART_Init+0x54>)
 8001eee:	4a14      	ldr	r2, [pc, #80]	@ (8001f40 <MX_LPUART1_UART_Init+0x58>)
 8001ef0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001ef2:	4b12      	ldr	r3, [pc, #72]	@ (8001f3c <MX_LPUART1_UART_Init+0x54>)
 8001ef4:	4a13      	ldr	r2, [pc, #76]	@ (8001f44 <MX_LPUART1_UART_Init+0x5c>)
 8001ef6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8001ef8:	4b10      	ldr	r3, [pc, #64]	@ (8001f3c <MX_LPUART1_UART_Init+0x54>)
 8001efa:	2280      	movs	r2, #128	@ 0x80
 8001efc:	0552      	lsls	r2, r2, #21
 8001efe:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001f00:	4b0e      	ldr	r3, [pc, #56]	@ (8001f3c <MX_LPUART1_UART_Init+0x54>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001f06:	4b0d      	ldr	r3, [pc, #52]	@ (8001f3c <MX_LPUART1_UART_Init+0x54>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f3c <MX_LPUART1_UART_Init+0x54>)
 8001f0e:	220c      	movs	r2, #12
 8001f10:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f12:	4b0a      	ldr	r3, [pc, #40]	@ (8001f3c <MX_LPUART1_UART_Init+0x54>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f18:	4b08      	ldr	r3, [pc, #32]	@ (8001f3c <MX_LPUART1_UART_Init+0x54>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f1e:	4b07      	ldr	r3, [pc, #28]	@ (8001f3c <MX_LPUART1_UART_Init+0x54>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001f24:	4b05      	ldr	r3, [pc, #20]	@ (8001f3c <MX_LPUART1_UART_Init+0x54>)
 8001f26:	0018      	movs	r0, r3
 8001f28:	f002 fad8 	bl	80044dc <HAL_UART_Init>
 8001f2c:	1e03      	subs	r3, r0, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001f30:	f000 f9da 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001f34:	46c0      	nop			@ (mov r8, r8)
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	46c0      	nop			@ (mov r8, r8)
 8001f3c:	20000078 	.word	0x20000078
 8001f40:	40004800 	.word	0x40004800
 8001f44:	00033324 	.word	0x00033324

08001f48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08a      	sub	sp, #40	@ 0x28
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f4e:	2318      	movs	r3, #24
 8001f50:	18fb      	adds	r3, r7, r3
 8001f52:	0018      	movs	r0, r3
 8001f54:	2310      	movs	r3, #16
 8001f56:	001a      	movs	r2, r3
 8001f58:	2100      	movs	r1, #0
 8001f5a:	f003 f84f 	bl	8004ffc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f5e:	2310      	movs	r3, #16
 8001f60:	18fb      	adds	r3, r7, r3
 8001f62:	0018      	movs	r0, r3
 8001f64:	2308      	movs	r3, #8
 8001f66:	001a      	movs	r2, r3
 8001f68:	2100      	movs	r1, #0
 8001f6a:	f003 f847 	bl	8004ffc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f6e:	003b      	movs	r3, r7
 8001f70:	0018      	movs	r0, r3
 8001f72:	2310      	movs	r3, #16
 8001f74:	001a      	movs	r2, r3
 8001f76:	2100      	movs	r1, #0
 8001f78:	f003 f840 	bl	8004ffc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f7c:	4b35      	ldr	r3, [pc, #212]	@ (8002054 <MX_TIM2_Init+0x10c>)
 8001f7e:	2280      	movs	r2, #128	@ 0x80
 8001f80:	05d2      	lsls	r2, r2, #23
 8001f82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f84:	4b33      	ldr	r3, [pc, #204]	@ (8002054 <MX_TIM2_Init+0x10c>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f8a:	4b32      	ldr	r3, [pc, #200]	@ (8002054 <MX_TIM2_Init+0x10c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 8001f90:	4b30      	ldr	r3, [pc, #192]	@ (8002054 <MX_TIM2_Init+0x10c>)
 8001f92:	2290      	movs	r2, #144	@ 0x90
 8001f94:	32ff      	adds	r2, #255	@ 0xff
 8001f96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f98:	4b2e      	ldr	r3, [pc, #184]	@ (8002054 <MX_TIM2_Init+0x10c>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f9e:	4b2d      	ldr	r3, [pc, #180]	@ (8002054 <MX_TIM2_Init+0x10c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fa4:	4b2b      	ldr	r3, [pc, #172]	@ (8002054 <MX_TIM2_Init+0x10c>)
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f001 fc9e 	bl	80038e8 <HAL_TIM_Base_Init>
 8001fac:	1e03      	subs	r3, r0, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001fb0:	f000 f99a 	bl	80022e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fb4:	2118      	movs	r1, #24
 8001fb6:	187b      	adds	r3, r7, r1
 8001fb8:	2280      	movs	r2, #128	@ 0x80
 8001fba:	0152      	lsls	r2, r2, #5
 8001fbc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fbe:	187a      	adds	r2, r7, r1
 8001fc0:	4b24      	ldr	r3, [pc, #144]	@ (8002054 <MX_TIM2_Init+0x10c>)
 8001fc2:	0011      	movs	r1, r2
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f001 fe69 	bl	8003c9c <HAL_TIM_ConfigClockSource>
 8001fca:	1e03      	subs	r3, r0, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001fce:	f000 f98b 	bl	80022e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001fd2:	4b20      	ldr	r3, [pc, #128]	@ (8002054 <MX_TIM2_Init+0x10c>)
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	f001 fcc7 	bl	8003968 <HAL_TIM_PWM_Init>
 8001fda:	1e03      	subs	r3, r0, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001fde:	f000 f983 	bl	80022e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001fe2:	2110      	movs	r1, #16
 8001fe4:	187b      	adds	r3, r7, r1
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001fea:	187b      	adds	r3, r7, r1
 8001fec:	2280      	movs	r2, #128	@ 0x80
 8001fee:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ff0:	187a      	adds	r2, r7, r1
 8001ff2:	4b18      	ldr	r3, [pc, #96]	@ (8002054 <MX_TIM2_Init+0x10c>)
 8001ff4:	0011      	movs	r1, r2
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f002 fa18 	bl	800442c <HAL_TIMEx_MasterConfigSynchronization>
 8001ffc:	1e03      	subs	r3, r0, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8002000:	f000 f972 	bl	80022e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002004:	003b      	movs	r3, r7
 8002006:	2260      	movs	r2, #96	@ 0x60
 8002008:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800200a:	003b      	movs	r3, r7
 800200c:	2200      	movs	r2, #0
 800200e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002010:	003b      	movs	r3, r7
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002016:	003b      	movs	r3, r7
 8002018:	2200      	movs	r2, #0
 800201a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800201c:	0039      	movs	r1, r7
 800201e:	4b0d      	ldr	r3, [pc, #52]	@ (8002054 <MX_TIM2_Init+0x10c>)
 8002020:	2200      	movs	r2, #0
 8002022:	0018      	movs	r0, r3
 8002024:	f001 fd74 	bl	8003b10 <HAL_TIM_PWM_ConfigChannel>
 8002028:	1e03      	subs	r3, r0, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 800202c:	f000 f95c 	bl	80022e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002030:	0039      	movs	r1, r7
 8002032:	4b08      	ldr	r3, [pc, #32]	@ (8002054 <MX_TIM2_Init+0x10c>)
 8002034:	2204      	movs	r2, #4
 8002036:	0018      	movs	r0, r3
 8002038:	f001 fd6a 	bl	8003b10 <HAL_TIM_PWM_ConfigChannel>
 800203c:	1e03      	subs	r3, r0, #0
 800203e:	d001      	beq.n	8002044 <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 8002040:	f000 f952 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002044:	4b03      	ldr	r3, [pc, #12]	@ (8002054 <MX_TIM2_Init+0x10c>)
 8002046:	0018      	movs	r0, r3
 8002048:	f000 f9d0 	bl	80023ec <HAL_TIM_MspPostInit>

}
 800204c:	46c0      	nop			@ (mov r8, r8)
 800204e:	46bd      	mov	sp, r7
 8002050:	b00a      	add	sp, #40	@ 0x28
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000100 	.word	0x20000100

08002058 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b090      	sub	sp, #64	@ 0x40
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800205e:	2330      	movs	r3, #48	@ 0x30
 8002060:	18fb      	adds	r3, r7, r3
 8002062:	0018      	movs	r0, r3
 8002064:	2310      	movs	r3, #16
 8002066:	001a      	movs	r2, r3
 8002068:	2100      	movs	r1, #0
 800206a:	f002 ffc7 	bl	8004ffc <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800206e:	231c      	movs	r3, #28
 8002070:	18fb      	adds	r3, r7, r3
 8002072:	0018      	movs	r0, r3
 8002074:	2314      	movs	r3, #20
 8002076:	001a      	movs	r2, r3
 8002078:	2100      	movs	r1, #0
 800207a:	f002 ffbf 	bl	8004ffc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800207e:	2314      	movs	r3, #20
 8002080:	18fb      	adds	r3, r7, r3
 8002082:	0018      	movs	r0, r3
 8002084:	2308      	movs	r3, #8
 8002086:	001a      	movs	r2, r3
 8002088:	2100      	movs	r1, #0
 800208a:	f002 ffb7 	bl	8004ffc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800208e:	1d3b      	adds	r3, r7, #4
 8002090:	0018      	movs	r0, r3
 8002092:	2310      	movs	r3, #16
 8002094:	001a      	movs	r2, r3
 8002096:	2100      	movs	r1, #0
 8002098:	f002 ffb0 	bl	8004ffc <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 800209c:	4b38      	ldr	r3, [pc, #224]	@ (8002180 <MX_TIM22_Init+0x128>)
 800209e:	4a39      	ldr	r2, [pc, #228]	@ (8002184 <MX_TIM22_Init+0x12c>)
 80020a0:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0;
 80020a2:	4b37      	ldr	r3, [pc, #220]	@ (8002180 <MX_TIM22_Init+0x128>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a8:	4b35      	ldr	r3, [pc, #212]	@ (8002180 <MX_TIM22_Init+0x128>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 399;
 80020ae:	4b34      	ldr	r3, [pc, #208]	@ (8002180 <MX_TIM22_Init+0x128>)
 80020b0:	2290      	movs	r2, #144	@ 0x90
 80020b2:	32ff      	adds	r2, #255	@ 0xff
 80020b4:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b6:	4b32      	ldr	r3, [pc, #200]	@ (8002180 <MX_TIM22_Init+0x128>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020bc:	4b30      	ldr	r3, [pc, #192]	@ (8002180 <MX_TIM22_Init+0x128>)
 80020be:	2200      	movs	r2, #0
 80020c0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 80020c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002180 <MX_TIM22_Init+0x128>)
 80020c4:	0018      	movs	r0, r3
 80020c6:	f001 fc0f 	bl	80038e8 <HAL_TIM_Base_Init>
 80020ca:	1e03      	subs	r3, r0, #0
 80020cc:	d001      	beq.n	80020d2 <MX_TIM22_Init+0x7a>
  {
    Error_Handler();
 80020ce:	f000 f90b 	bl	80022e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020d2:	2130      	movs	r1, #48	@ 0x30
 80020d4:	187b      	adds	r3, r7, r1
 80020d6:	2280      	movs	r2, #128	@ 0x80
 80020d8:	0152      	lsls	r2, r2, #5
 80020da:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 80020dc:	187a      	adds	r2, r7, r1
 80020de:	4b28      	ldr	r3, [pc, #160]	@ (8002180 <MX_TIM22_Init+0x128>)
 80020e0:	0011      	movs	r1, r2
 80020e2:	0018      	movs	r0, r3
 80020e4:	f001 fdda 	bl	8003c9c <HAL_TIM_ConfigClockSource>
 80020e8:	1e03      	subs	r3, r0, #0
 80020ea:	d001      	beq.n	80020f0 <MX_TIM22_Init+0x98>
  {
    Error_Handler();
 80020ec:	f000 f8fc 	bl	80022e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim22) != HAL_OK)
 80020f0:	4b23      	ldr	r3, [pc, #140]	@ (8002180 <MX_TIM22_Init+0x128>)
 80020f2:	0018      	movs	r0, r3
 80020f4:	f001 fc38 	bl	8003968 <HAL_TIM_PWM_Init>
 80020f8:	1e03      	subs	r3, r0, #0
 80020fa:	d001      	beq.n	8002100 <MX_TIM22_Init+0xa8>
  {
    Error_Handler();
 80020fc:	f000 f8f4 	bl	80022e8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8002100:	211c      	movs	r1, #28
 8002102:	187b      	adds	r3, r7, r1
 8002104:	2206      	movs	r2, #6
 8002106:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002108:	187b      	adds	r3, r7, r1
 800210a:	2200      	movs	r2, #0
 800210c:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim22, &sSlaveConfig) != HAL_OK)
 800210e:	187a      	adds	r2, r7, r1
 8002110:	4b1b      	ldr	r3, [pc, #108]	@ (8002180 <MX_TIM22_Init+0x128>)
 8002112:	0011      	movs	r1, r2
 8002114:	0018      	movs	r0, r3
 8002116:	f001 fe95 	bl	8003e44 <HAL_TIM_SlaveConfigSynchro>
 800211a:	1e03      	subs	r3, r0, #0
 800211c:	d001      	beq.n	8002122 <MX_TIM22_Init+0xca>
  {
    Error_Handler();
 800211e:	f000 f8e3 	bl	80022e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002122:	2114      	movs	r1, #20
 8002124:	187b      	adds	r3, r7, r1
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800212a:	187b      	adds	r3, r7, r1
 800212c:	2200      	movs	r2, #0
 800212e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8002130:	187a      	adds	r2, r7, r1
 8002132:	4b13      	ldr	r3, [pc, #76]	@ (8002180 <MX_TIM22_Init+0x128>)
 8002134:	0011      	movs	r1, r2
 8002136:	0018      	movs	r0, r3
 8002138:	f002 f978 	bl	800442c <HAL_TIMEx_MasterConfigSynchronization>
 800213c:	1e03      	subs	r3, r0, #0
 800213e:	d001      	beq.n	8002144 <MX_TIM22_Init+0xec>
  {
    Error_Handler();
 8002140:	f000 f8d2 	bl	80022e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002144:	1d3b      	adds	r3, r7, #4
 8002146:	2260      	movs	r2, #96	@ 0x60
 8002148:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800214a:	1d3b      	adds	r3, r7, #4
 800214c:	2200      	movs	r2, #0
 800214e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002150:	1d3b      	adds	r3, r7, #4
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002156:	1d3b      	adds	r3, r7, #4
 8002158:	2200      	movs	r2, #0
 800215a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800215c:	1d39      	adds	r1, r7, #4
 800215e:	4b08      	ldr	r3, [pc, #32]	@ (8002180 <MX_TIM22_Init+0x128>)
 8002160:	2204      	movs	r2, #4
 8002162:	0018      	movs	r0, r3
 8002164:	f001 fcd4 	bl	8003b10 <HAL_TIM_PWM_ConfigChannel>
 8002168:	1e03      	subs	r3, r0, #0
 800216a:	d001      	beq.n	8002170 <MX_TIM22_Init+0x118>
  {
    Error_Handler();
 800216c:	f000 f8bc 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */
  HAL_TIM_MspPostInit(&htim22);
 8002170:	4b03      	ldr	r3, [pc, #12]	@ (8002180 <MX_TIM22_Init+0x128>)
 8002172:	0018      	movs	r0, r3
 8002174:	f000 f93a 	bl	80023ec <HAL_TIM_MspPostInit>

}
 8002178:	46c0      	nop			@ (mov r8, r8)
 800217a:	46bd      	mov	sp, r7
 800217c:	b010      	add	sp, #64	@ 0x40
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20000140 	.word	0x20000140
 8002184:	40011400 	.word	0x40011400

08002188 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002188:	b590      	push	{r4, r7, lr}
 800218a:	b089      	sub	sp, #36	@ 0x24
 800218c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218e:	240c      	movs	r4, #12
 8002190:	193b      	adds	r3, r7, r4
 8002192:	0018      	movs	r0, r3
 8002194:	2314      	movs	r3, #20
 8002196:	001a      	movs	r2, r3
 8002198:	2100      	movs	r1, #0
 800219a:	f002 ff2f 	bl	8004ffc <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800219e:	4b4e      	ldr	r3, [pc, #312]	@ (80022d8 <MX_GPIO_Init+0x150>)
 80021a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021a2:	4b4d      	ldr	r3, [pc, #308]	@ (80022d8 <MX_GPIO_Init+0x150>)
 80021a4:	2104      	movs	r1, #4
 80021a6:	430a      	orrs	r2, r1
 80021a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80021aa:	4b4b      	ldr	r3, [pc, #300]	@ (80022d8 <MX_GPIO_Init+0x150>)
 80021ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ae:	2204      	movs	r2, #4
 80021b0:	4013      	ands	r3, r2
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b6:	4b48      	ldr	r3, [pc, #288]	@ (80022d8 <MX_GPIO_Init+0x150>)
 80021b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021ba:	4b47      	ldr	r3, [pc, #284]	@ (80022d8 <MX_GPIO_Init+0x150>)
 80021bc:	2101      	movs	r1, #1
 80021be:	430a      	orrs	r2, r1
 80021c0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80021c2:	4b45      	ldr	r3, [pc, #276]	@ (80022d8 <MX_GPIO_Init+0x150>)
 80021c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c6:	2201      	movs	r2, #1
 80021c8:	4013      	ands	r3, r2
 80021ca:	607b      	str	r3, [r7, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ce:	4b42      	ldr	r3, [pc, #264]	@ (80022d8 <MX_GPIO_Init+0x150>)
 80021d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021d2:	4b41      	ldr	r3, [pc, #260]	@ (80022d8 <MX_GPIO_Init+0x150>)
 80021d4:	2102      	movs	r1, #2
 80021d6:	430a      	orrs	r2, r1
 80021d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80021da:	4b3f      	ldr	r3, [pc, #252]	@ (80022d8 <MX_GPIO_Init+0x150>)
 80021dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021de:	2202      	movs	r2, #2
 80021e0:	4013      	ands	r3, r2
 80021e2:	603b      	str	r3, [r7, #0]
 80021e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRVOFF_GPIO_Port, DRVOFF_Pin, GPIO_PIN_RESET);
 80021e6:	2380      	movs	r3, #128	@ 0x80
 80021e8:	01db      	lsls	r3, r3, #7
 80021ea:	483c      	ldr	r0, [pc, #240]	@ (80022dc <MX_GPIO_Init+0x154>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	0019      	movs	r1, r3
 80021f0:	f000 fcb0 	bl	8002b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PWM_INLC_Pin|PWM_INLB_Pin|NSLEEP_Pin, GPIO_PIN_RESET);
 80021f4:	493a      	ldr	r1, [pc, #232]	@ (80022e0 <MX_GPIO_Init+0x158>)
 80021f6:	23a0      	movs	r3, #160	@ 0xa0
 80021f8:	05db      	lsls	r3, r3, #23
 80021fa:	2200      	movs	r2, #0
 80021fc:	0018      	movs	r0, r3
 80021fe:	f000 fca9 	bl	8002b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWM_INLCB6_GPIO_Port, PWM_INLCB6_Pin, GPIO_PIN_RESET);
 8002202:	4b38      	ldr	r3, [pc, #224]	@ (80022e4 <MX_GPIO_Init+0x15c>)
 8002204:	2200      	movs	r2, #0
 8002206:	2140      	movs	r1, #64	@ 0x40
 8002208:	0018      	movs	r0, r3
 800220a:	f000 fca3 	bl	8002b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DRVOFF_Pin */
  GPIO_InitStruct.Pin = DRVOFF_Pin;
 800220e:	193b      	adds	r3, r7, r4
 8002210:	2280      	movs	r2, #128	@ 0x80
 8002212:	01d2      	lsls	r2, r2, #7
 8002214:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002216:	193b      	adds	r3, r7, r4
 8002218:	2201      	movs	r2, #1
 800221a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	193b      	adds	r3, r7, r4
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002222:	193b      	adds	r3, r7, r4
 8002224:	2200      	movs	r2, #0
 8002226:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DRVOFF_GPIO_Port, &GPIO_InitStruct);
 8002228:	193b      	adds	r3, r7, r4
 800222a:	4a2c      	ldr	r2, [pc, #176]	@ (80022dc <MX_GPIO_Init+0x154>)
 800222c:	0019      	movs	r1, r3
 800222e:	0010      	movs	r0, r2
 8002230:	f000 fb22 	bl	8002878 <HAL_GPIO_Init>

  /*Configure GPIO pin : NFAULT_Pin */
  GPIO_InitStruct.Pin = NFAULT_Pin;
 8002234:	0021      	movs	r1, r4
 8002236:	187b      	adds	r3, r7, r1
 8002238:	2280      	movs	r2, #128	@ 0x80
 800223a:	0212      	lsls	r2, r2, #8
 800223c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800223e:	000c      	movs	r4, r1
 8002240:	193b      	adds	r3, r7, r4
 8002242:	2200      	movs	r2, #0
 8002244:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	193b      	adds	r3, r7, r4
 8002248:	2200      	movs	r2, #0
 800224a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NFAULT_GPIO_Port, &GPIO_InitStruct);
 800224c:	193b      	adds	r3, r7, r4
 800224e:	4a23      	ldr	r2, [pc, #140]	@ (80022dc <MX_GPIO_Init+0x154>)
 8002250:	0019      	movs	r1, r3
 8002252:	0010      	movs	r0, r2
 8002254:	f000 fb10 	bl	8002878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWM_INLC_Pin PWM_INLB_Pin NSLEEP_Pin */
  GPIO_InitStruct.Pin = PWM_INLC_Pin|PWM_INLB_Pin|NSLEEP_Pin;
 8002258:	193b      	adds	r3, r7, r4
 800225a:	4a21      	ldr	r2, [pc, #132]	@ (80022e0 <MX_GPIO_Init+0x158>)
 800225c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800225e:	193b      	adds	r3, r7, r4
 8002260:	2201      	movs	r2, #1
 8002262:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	193b      	adds	r3, r7, r4
 8002266:	2200      	movs	r2, #0
 8002268:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226a:	193b      	adds	r3, r7, r4
 800226c:	2200      	movs	r2, #0
 800226e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002270:	193a      	adds	r2, r7, r4
 8002272:	23a0      	movs	r3, #160	@ 0xa0
 8002274:	05db      	lsls	r3, r3, #23
 8002276:	0011      	movs	r1, r2
 8002278:	0018      	movs	r0, r3
 800227a:	f000 fafd 	bl	8002878 <HAL_GPIO_Init>

  /*Configure GPIO pins : POCI_Pin PICO_Pin */
  GPIO_InitStruct.Pin = POCI_Pin|PICO_Pin;
 800227e:	193b      	adds	r3, r7, r4
 8002280:	22c0      	movs	r2, #192	@ 0xc0
 8002282:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002284:	193b      	adds	r3, r7, r4
 8002286:	2202      	movs	r2, #2
 8002288:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	193b      	adds	r3, r7, r4
 800228c:	2200      	movs	r2, #0
 800228e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002290:	193b      	adds	r3, r7, r4
 8002292:	2203      	movs	r2, #3
 8002294:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002296:	193b      	adds	r3, r7, r4
 8002298:	2200      	movs	r2, #0
 800229a:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229c:	193a      	adds	r2, r7, r4
 800229e:	23a0      	movs	r3, #160	@ 0xa0
 80022a0:	05db      	lsls	r3, r3, #23
 80022a2:	0011      	movs	r1, r2
 80022a4:	0018      	movs	r0, r3
 80022a6:	f000 fae7 	bl	8002878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWM_INLCB6_Pin */
  GPIO_InitStruct.Pin = PWM_INLCB6_Pin;
 80022aa:	0021      	movs	r1, r4
 80022ac:	187b      	adds	r3, r7, r1
 80022ae:	2240      	movs	r2, #64	@ 0x40
 80022b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b2:	187b      	adds	r3, r7, r1
 80022b4:	2201      	movs	r2, #1
 80022b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	187b      	adds	r3, r7, r1
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022be:	187b      	adds	r3, r7, r1
 80022c0:	2200      	movs	r2, #0
 80022c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PWM_INLCB6_GPIO_Port, &GPIO_InitStruct);
 80022c4:	187b      	adds	r3, r7, r1
 80022c6:	4a07      	ldr	r2, [pc, #28]	@ (80022e4 <MX_GPIO_Init+0x15c>)
 80022c8:	0019      	movs	r1, r3
 80022ca:	0010      	movs	r0, r2
 80022cc:	f000 fad4 	bl	8002878 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80022d0:	46c0      	nop			@ (mov r8, r8)
 80022d2:	46bd      	mov	sp, r7
 80022d4:	b009      	add	sp, #36	@ 0x24
 80022d6:	bd90      	pop	{r4, r7, pc}
 80022d8:	40021000 	.word	0x40021000
 80022dc:	50000800 	.word	0x50000800
 80022e0:	00001201 	.word	0x00001201
 80022e4:	50000400 	.word	0x50000400

080022e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022ec:	b672      	cpsid	i
}
 80022ee:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022f0:	46c0      	nop			@ (mov r8, r8)
 80022f2:	e7fd      	b.n	80022f0 <Error_Handler+0x8>

080022f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f8:	4b07      	ldr	r3, [pc, #28]	@ (8002318 <HAL_MspInit+0x24>)
 80022fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022fc:	4b06      	ldr	r3, [pc, #24]	@ (8002318 <HAL_MspInit+0x24>)
 80022fe:	2101      	movs	r1, #1
 8002300:	430a      	orrs	r2, r1
 8002302:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002304:	4b04      	ldr	r3, [pc, #16]	@ (8002318 <HAL_MspInit+0x24>)
 8002306:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002308:	4b03      	ldr	r3, [pc, #12]	@ (8002318 <HAL_MspInit+0x24>)
 800230a:	2180      	movs	r1, #128	@ 0x80
 800230c:	0549      	lsls	r1, r1, #21
 800230e:	430a      	orrs	r2, r1
 8002310:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002312:	46c0      	nop			@ (mov r8, r8)
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40021000 	.word	0x40021000

0800231c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800231c:	b590      	push	{r4, r7, lr}
 800231e:	b089      	sub	sp, #36	@ 0x24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002324:	240c      	movs	r4, #12
 8002326:	193b      	adds	r3, r7, r4
 8002328:	0018      	movs	r0, r3
 800232a:	2314      	movs	r3, #20
 800232c:	001a      	movs	r2, r3
 800232e:	2100      	movs	r1, #0
 8002330:	f002 fe64 	bl	8004ffc <memset>
  if(huart->Instance==LPUART1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a18      	ldr	r2, [pc, #96]	@ (800239c <HAL_UART_MspInit+0x80>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d129      	bne.n	8002392 <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN LPUART1_MspInit 0 */

    /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800233e:	4b18      	ldr	r3, [pc, #96]	@ (80023a0 <HAL_UART_MspInit+0x84>)
 8002340:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002342:	4b17      	ldr	r3, [pc, #92]	@ (80023a0 <HAL_UART_MspInit+0x84>)
 8002344:	2180      	movs	r1, #128	@ 0x80
 8002346:	02c9      	lsls	r1, r1, #11
 8002348:	430a      	orrs	r2, r1
 800234a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800234c:	4b14      	ldr	r3, [pc, #80]	@ (80023a0 <HAL_UART_MspInit+0x84>)
 800234e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002350:	4b13      	ldr	r3, [pc, #76]	@ (80023a0 <HAL_UART_MspInit+0x84>)
 8002352:	2101      	movs	r1, #1
 8002354:	430a      	orrs	r2, r1
 8002356:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002358:	4b11      	ldr	r3, [pc, #68]	@ (80023a0 <HAL_UART_MspInit+0x84>)
 800235a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800235c:	2201      	movs	r2, #1
 800235e:	4013      	ands	r3, r2
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002364:	0021      	movs	r1, r4
 8002366:	187b      	adds	r3, r7, r1
 8002368:	220c      	movs	r2, #12
 800236a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236c:	187b      	adds	r3, r7, r1
 800236e:	2202      	movs	r2, #2
 8002370:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	187b      	adds	r3, r7, r1
 8002374:	2200      	movs	r2, #0
 8002376:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002378:	187b      	adds	r3, r7, r1
 800237a:	2203      	movs	r2, #3
 800237c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800237e:	187b      	adds	r3, r7, r1
 8002380:	2206      	movs	r2, #6
 8002382:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002384:	187a      	adds	r2, r7, r1
 8002386:	23a0      	movs	r3, #160	@ 0xa0
 8002388:	05db      	lsls	r3, r3, #23
 800238a:	0011      	movs	r1, r2
 800238c:	0018      	movs	r0, r3
 800238e:	f000 fa73 	bl	8002878 <HAL_GPIO_Init>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8002392:	46c0      	nop			@ (mov r8, r8)
 8002394:	46bd      	mov	sp, r7
 8002396:	b009      	add	sp, #36	@ 0x24
 8002398:	bd90      	pop	{r4, r7, pc}
 800239a:	46c0      	nop			@ (mov r8, r8)
 800239c:	40004800 	.word	0x40004800
 80023a0:	40021000 	.word	0x40021000

080023a4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	2380      	movs	r3, #128	@ 0x80
 80023b2:	05db      	lsls	r3, r3, #23
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d106      	bne.n	80023c6 <HAL_TIM_Base_MspInit+0x22>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023b8:	4b0a      	ldr	r3, [pc, #40]	@ (80023e4 <HAL_TIM_Base_MspInit+0x40>)
 80023ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023bc:	4b09      	ldr	r3, [pc, #36]	@ (80023e4 <HAL_TIM_Base_MspInit+0x40>)
 80023be:	2101      	movs	r1, #1
 80023c0:	430a      	orrs	r2, r1
 80023c2:	639a      	str	r2, [r3, #56]	@ 0x38
    /* USER CODE BEGIN TIM22_MspInit 1 */

    /* USER CODE END TIM22_MspInit 1 */
  }

}
 80023c4:	e00a      	b.n	80023dc <HAL_TIM_Base_MspInit+0x38>
  else if(htim_base->Instance==TIM22)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a07      	ldr	r2, [pc, #28]	@ (80023e8 <HAL_TIM_Base_MspInit+0x44>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d105      	bne.n	80023dc <HAL_TIM_Base_MspInit+0x38>
    __HAL_RCC_TIM22_CLK_ENABLE();
 80023d0:	4b04      	ldr	r3, [pc, #16]	@ (80023e4 <HAL_TIM_Base_MspInit+0x40>)
 80023d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023d4:	4b03      	ldr	r3, [pc, #12]	@ (80023e4 <HAL_TIM_Base_MspInit+0x40>)
 80023d6:	2120      	movs	r1, #32
 80023d8:	430a      	orrs	r2, r1
 80023da:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80023dc:	46c0      	nop			@ (mov r8, r8)
 80023de:	46bd      	mov	sp, r7
 80023e0:	b002      	add	sp, #8
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40011400 	.word	0x40011400

080023ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023ec:	b590      	push	{r4, r7, lr}
 80023ee:	b08b      	sub	sp, #44	@ 0x2c
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	2414      	movs	r4, #20
 80023f6:	193b      	adds	r3, r7, r4
 80023f8:	0018      	movs	r0, r3
 80023fa:	2314      	movs	r3, #20
 80023fc:	001a      	movs	r2, r3
 80023fe:	2100      	movs	r1, #0
 8002400:	f002 fdfc 	bl	8004ffc <memset>
  if(htim->Instance==TIM2)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	2380      	movs	r3, #128	@ 0x80
 800240a:	05db      	lsls	r3, r3, #23
 800240c:	429a      	cmp	r2, r3
 800240e:	d13a      	bne.n	8002486 <HAL_TIM_MspPostInit+0x9a>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002410:	4b32      	ldr	r3, [pc, #200]	@ (80024dc <HAL_TIM_MspPostInit+0xf0>)
 8002412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002414:	4b31      	ldr	r3, [pc, #196]	@ (80024dc <HAL_TIM_MspPostInit+0xf0>)
 8002416:	2101      	movs	r1, #1
 8002418:	430a      	orrs	r2, r1
 800241a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800241c:	4b2f      	ldr	r3, [pc, #188]	@ (80024dc <HAL_TIM_MspPostInit+0xf0>)
 800241e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002420:	2201      	movs	r2, #1
 8002422:	4013      	ands	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA8     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM_INHA_Pin;
 8002428:	193b      	adds	r3, r7, r4
 800242a:	2202      	movs	r2, #2
 800242c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242e:	193b      	adds	r3, r7, r4
 8002430:	2202      	movs	r2, #2
 8002432:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	193b      	adds	r3, r7, r4
 8002436:	2200      	movs	r2, #0
 8002438:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243a:	193b      	adds	r3, r7, r4
 800243c:	2200      	movs	r2, #0
 800243e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002440:	193b      	adds	r3, r7, r4
 8002442:	2202      	movs	r2, #2
 8002444:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_INHA_GPIO_Port, &GPIO_InitStruct);
 8002446:	193a      	adds	r2, r7, r4
 8002448:	23a0      	movs	r3, #160	@ 0xa0
 800244a:	05db      	lsls	r3, r3, #23
 800244c:	0011      	movs	r1, r2
 800244e:	0018      	movs	r0, r3
 8002450:	f000 fa12 	bl	8002878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_INHB_Pin;
 8002454:	0021      	movs	r1, r4
 8002456:	187b      	adds	r3, r7, r1
 8002458:	2280      	movs	r2, #128	@ 0x80
 800245a:	0052      	lsls	r2, r2, #1
 800245c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245e:	187b      	adds	r3, r7, r1
 8002460:	2202      	movs	r2, #2
 8002462:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	187b      	adds	r3, r7, r1
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246a:	187b      	adds	r3, r7, r1
 800246c:	2200      	movs	r2, #0
 800246e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8002470:	187b      	adds	r3, r7, r1
 8002472:	2205      	movs	r2, #5
 8002474:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_INHB_GPIO_Port, &GPIO_InitStruct);
 8002476:	187a      	adds	r2, r7, r1
 8002478:	23a0      	movs	r3, #160	@ 0xa0
 800247a:	05db      	lsls	r3, r3, #23
 800247c:	0011      	movs	r1, r2
 800247e:	0018      	movs	r0, r3
 8002480:	f000 f9fa 	bl	8002878 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM22_MspPostInit 1 */

    /* USER CODE END TIM22_MspPostInit 1 */
  }

}
 8002484:	e026      	b.n	80024d4 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM22)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a15      	ldr	r2, [pc, #84]	@ (80024e0 <HAL_TIM_MspPostInit+0xf4>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d121      	bne.n	80024d4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002490:	4b12      	ldr	r3, [pc, #72]	@ (80024dc <HAL_TIM_MspPostInit+0xf0>)
 8002492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002494:	4b11      	ldr	r3, [pc, #68]	@ (80024dc <HAL_TIM_MspPostInit+0xf0>)
 8002496:	2102      	movs	r1, #2
 8002498:	430a      	orrs	r2, r1
 800249a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800249c:	4b0f      	ldr	r3, [pc, #60]	@ (80024dc <HAL_TIM_MspPostInit+0xf0>)
 800249e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a0:	2202      	movs	r2, #2
 80024a2:	4013      	ands	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]
 80024a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_INHC_Pin;
 80024a8:	2114      	movs	r1, #20
 80024aa:	187b      	adds	r3, r7, r1
 80024ac:	2220      	movs	r2, #32
 80024ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b0:	187b      	adds	r3, r7, r1
 80024b2:	2202      	movs	r2, #2
 80024b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	187b      	adds	r3, r7, r1
 80024b8:	2200      	movs	r2, #0
 80024ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024bc:	187b      	adds	r3, r7, r1
 80024be:	2200      	movs	r2, #0
 80024c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM22;
 80024c2:	187b      	adds	r3, r7, r1
 80024c4:	2204      	movs	r2, #4
 80024c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_INHC_GPIO_Port, &GPIO_InitStruct);
 80024c8:	187b      	adds	r3, r7, r1
 80024ca:	4a06      	ldr	r2, [pc, #24]	@ (80024e4 <HAL_TIM_MspPostInit+0xf8>)
 80024cc:	0019      	movs	r1, r3
 80024ce:	0010      	movs	r0, r2
 80024d0:	f000 f9d2 	bl	8002878 <HAL_GPIO_Init>
}
 80024d4:	46c0      	nop			@ (mov r8, r8)
 80024d6:	46bd      	mov	sp, r7
 80024d8:	b00b      	add	sp, #44	@ 0x2c
 80024da:	bd90      	pop	{r4, r7, pc}
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40011400 	.word	0x40011400
 80024e4:	50000400 	.word	0x50000400

080024e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024ec:	46c0      	nop			@ (mov r8, r8)
 80024ee:	e7fd      	b.n	80024ec <NMI_Handler+0x4>

080024f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024f4:	46c0      	nop			@ (mov r8, r8)
 80024f6:	e7fd      	b.n	80024f4 <HardFault_Handler+0x4>

080024f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80024fc:	46c0      	nop			@ (mov r8, r8)
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002506:	46c0      	nop			@ (mov r8, r8)
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002510:	f000 f8be 	bl	8002690 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002514:	46c0      	nop			@ (mov r8, r8)
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002524:	4a14      	ldr	r2, [pc, #80]	@ (8002578 <_sbrk+0x5c>)
 8002526:	4b15      	ldr	r3, [pc, #84]	@ (800257c <_sbrk+0x60>)
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002530:	4b13      	ldr	r3, [pc, #76]	@ (8002580 <_sbrk+0x64>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d102      	bne.n	800253e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002538:	4b11      	ldr	r3, [pc, #68]	@ (8002580 <_sbrk+0x64>)
 800253a:	4a12      	ldr	r2, [pc, #72]	@ (8002584 <_sbrk+0x68>)
 800253c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800253e:	4b10      	ldr	r3, [pc, #64]	@ (8002580 <_sbrk+0x64>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	18d3      	adds	r3, r2, r3
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	429a      	cmp	r2, r3
 800254a:	d207      	bcs.n	800255c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800254c:	f002 fd5e 	bl	800500c <__errno>
 8002550:	0003      	movs	r3, r0
 8002552:	220c      	movs	r2, #12
 8002554:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002556:	2301      	movs	r3, #1
 8002558:	425b      	negs	r3, r3
 800255a:	e009      	b.n	8002570 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800255c:	4b08      	ldr	r3, [pc, #32]	@ (8002580 <_sbrk+0x64>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002562:	4b07      	ldr	r3, [pc, #28]	@ (8002580 <_sbrk+0x64>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	18d2      	adds	r2, r2, r3
 800256a:	4b05      	ldr	r3, [pc, #20]	@ (8002580 <_sbrk+0x64>)
 800256c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800256e:	68fb      	ldr	r3, [r7, #12]
}
 8002570:	0018      	movs	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	b006      	add	sp, #24
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20002000 	.word	0x20002000
 800257c:	00000400 	.word	0x00000400
 8002580:	200001b4 	.word	0x200001b4
 8002584:	20000308 	.word	0x20000308

08002588 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800258c:	46c0      	nop			@ (mov r8, r8)
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002594:	480d      	ldr	r0, [pc, #52]	@ (80025cc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002596:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002598:	f7ff fff6 	bl	8002588 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800259c:	480c      	ldr	r0, [pc, #48]	@ (80025d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800259e:	490d      	ldr	r1, [pc, #52]	@ (80025d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025a0:	4a0d      	ldr	r2, [pc, #52]	@ (80025d8 <LoopForever+0xe>)
  movs r3, #0
 80025a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025a4:	e002      	b.n	80025ac <LoopCopyDataInit>

080025a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025aa:	3304      	adds	r3, #4

080025ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025b0:	d3f9      	bcc.n	80025a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025b2:	4a0a      	ldr	r2, [pc, #40]	@ (80025dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80025b4:	4c0a      	ldr	r4, [pc, #40]	@ (80025e0 <LoopForever+0x16>)
  movs r3, #0
 80025b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025b8:	e001      	b.n	80025be <LoopFillZerobss>

080025ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025bc:	3204      	adds	r2, #4

080025be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025c0:	d3fb      	bcc.n	80025ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025c2:	f002 fd29 	bl	8005018 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025c6:	f7ff fb6d 	bl	8001ca4 <main>

080025ca <LoopForever>:

LoopForever:
    b LoopForever
 80025ca:	e7fe      	b.n	80025ca <LoopForever>
   ldr   r0, =_estack
 80025cc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80025d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025d4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80025d8:	080059d4 	.word	0x080059d4
  ldr r2, =_sbss
 80025dc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80025e0:	20000304 	.word	0x20000304

080025e4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025e4:	e7fe      	b.n	80025e4 <ADC1_COMP_IRQHandler>
	...

080025e8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025ee:	1dfb      	adds	r3, r7, #7
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80025f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002624 <HAL_Init+0x3c>)
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002624 <HAL_Init+0x3c>)
 80025fa:	2140      	movs	r1, #64	@ 0x40
 80025fc:	430a      	orrs	r2, r1
 80025fe:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002600:	2003      	movs	r0, #3
 8002602:	f000 f811 	bl	8002628 <HAL_InitTick>
 8002606:	1e03      	subs	r3, r0, #0
 8002608:	d003      	beq.n	8002612 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800260a:	1dfb      	adds	r3, r7, #7
 800260c:	2201      	movs	r2, #1
 800260e:	701a      	strb	r2, [r3, #0]
 8002610:	e001      	b.n	8002616 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002612:	f7ff fe6f 	bl	80022f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002616:	1dfb      	adds	r3, r7, #7
 8002618:	781b      	ldrb	r3, [r3, #0]
}
 800261a:	0018      	movs	r0, r3
 800261c:	46bd      	mov	sp, r7
 800261e:	b002      	add	sp, #8
 8002620:	bd80      	pop	{r7, pc}
 8002622:	46c0      	nop			@ (mov r8, r8)
 8002624:	40022000 	.word	0x40022000

08002628 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002628:	b590      	push	{r4, r7, lr}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002630:	4b14      	ldr	r3, [pc, #80]	@ (8002684 <HAL_InitTick+0x5c>)
 8002632:	681c      	ldr	r4, [r3, #0]
 8002634:	4b14      	ldr	r3, [pc, #80]	@ (8002688 <HAL_InitTick+0x60>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	0019      	movs	r1, r3
 800263a:	23fa      	movs	r3, #250	@ 0xfa
 800263c:	0098      	lsls	r0, r3, #2
 800263e:	f7fd fd75 	bl	800012c <__udivsi3>
 8002642:	0003      	movs	r3, r0
 8002644:	0019      	movs	r1, r3
 8002646:	0020      	movs	r0, r4
 8002648:	f7fd fd70 	bl	800012c <__udivsi3>
 800264c:	0003      	movs	r3, r0
 800264e:	0018      	movs	r0, r3
 8002650:	f000 f905 	bl	800285e <HAL_SYSTICK_Config>
 8002654:	1e03      	subs	r3, r0, #0
 8002656:	d001      	beq.n	800265c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e00f      	b.n	800267c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b03      	cmp	r3, #3
 8002660:	d80b      	bhi.n	800267a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	2301      	movs	r3, #1
 8002666:	425b      	negs	r3, r3
 8002668:	2200      	movs	r2, #0
 800266a:	0018      	movs	r0, r3
 800266c:	f000 f8e2 	bl	8002834 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002670:	4b06      	ldr	r3, [pc, #24]	@ (800268c <HAL_InitTick+0x64>)
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	e000      	b.n	800267c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
}
 800267c:	0018      	movs	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	b003      	add	sp, #12
 8002682:	bd90      	pop	{r4, r7, pc}
 8002684:	20000000 	.word	0x20000000
 8002688:	20000008 	.word	0x20000008
 800268c:	20000004 	.word	0x20000004

08002690 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002694:	4b05      	ldr	r3, [pc, #20]	@ (80026ac <HAL_IncTick+0x1c>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	001a      	movs	r2, r3
 800269a:	4b05      	ldr	r3, [pc, #20]	@ (80026b0 <HAL_IncTick+0x20>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	18d2      	adds	r2, r2, r3
 80026a0:	4b03      	ldr	r3, [pc, #12]	@ (80026b0 <HAL_IncTick+0x20>)
 80026a2:	601a      	str	r2, [r3, #0]
}
 80026a4:	46c0      	nop			@ (mov r8, r8)
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	46c0      	nop			@ (mov r8, r8)
 80026ac:	20000008 	.word	0x20000008
 80026b0:	200001b8 	.word	0x200001b8

080026b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  return uwTick;
 80026b8:	4b02      	ldr	r3, [pc, #8]	@ (80026c4 <HAL_GetTick+0x10>)
 80026ba:	681b      	ldr	r3, [r3, #0]
}
 80026bc:	0018      	movs	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	46c0      	nop			@ (mov r8, r8)
 80026c4:	200001b8 	.word	0x200001b8

080026c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026d0:	f7ff fff0 	bl	80026b4 <HAL_GetTick>
 80026d4:	0003      	movs	r3, r0
 80026d6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	3301      	adds	r3, #1
 80026e0:	d005      	beq.n	80026ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026e2:	4b0a      	ldr	r3, [pc, #40]	@ (800270c <HAL_Delay+0x44>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	001a      	movs	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	189b      	adds	r3, r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026ee:	46c0      	nop			@ (mov r8, r8)
 80026f0:	f7ff ffe0 	bl	80026b4 <HAL_GetTick>
 80026f4:	0002      	movs	r2, r0
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d8f7      	bhi.n	80026f0 <HAL_Delay+0x28>
  {
  }
}
 8002700:	46c0      	nop			@ (mov r8, r8)
 8002702:	46c0      	nop			@ (mov r8, r8)
 8002704:	46bd      	mov	sp, r7
 8002706:	b004      	add	sp, #16
 8002708:	bd80      	pop	{r7, pc}
 800270a:	46c0      	nop			@ (mov r8, r8)
 800270c:	20000008 	.word	0x20000008

08002710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002710:	b590      	push	{r4, r7, lr}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	0002      	movs	r2, r0
 8002718:	6039      	str	r1, [r7, #0]
 800271a:	1dfb      	adds	r3, r7, #7
 800271c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800271e:	1dfb      	adds	r3, r7, #7
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b7f      	cmp	r3, #127	@ 0x7f
 8002724:	d828      	bhi.n	8002778 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002726:	4a2f      	ldr	r2, [pc, #188]	@ (80027e4 <__NVIC_SetPriority+0xd4>)
 8002728:	1dfb      	adds	r3, r7, #7
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	b25b      	sxtb	r3, r3
 800272e:	089b      	lsrs	r3, r3, #2
 8002730:	33c0      	adds	r3, #192	@ 0xc0
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	589b      	ldr	r3, [r3, r2]
 8002736:	1dfa      	adds	r2, r7, #7
 8002738:	7812      	ldrb	r2, [r2, #0]
 800273a:	0011      	movs	r1, r2
 800273c:	2203      	movs	r2, #3
 800273e:	400a      	ands	r2, r1
 8002740:	00d2      	lsls	r2, r2, #3
 8002742:	21ff      	movs	r1, #255	@ 0xff
 8002744:	4091      	lsls	r1, r2
 8002746:	000a      	movs	r2, r1
 8002748:	43d2      	mvns	r2, r2
 800274a:	401a      	ands	r2, r3
 800274c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	019b      	lsls	r3, r3, #6
 8002752:	22ff      	movs	r2, #255	@ 0xff
 8002754:	401a      	ands	r2, r3
 8002756:	1dfb      	adds	r3, r7, #7
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	0018      	movs	r0, r3
 800275c:	2303      	movs	r3, #3
 800275e:	4003      	ands	r3, r0
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002764:	481f      	ldr	r0, [pc, #124]	@ (80027e4 <__NVIC_SetPriority+0xd4>)
 8002766:	1dfb      	adds	r3, r7, #7
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	b25b      	sxtb	r3, r3
 800276c:	089b      	lsrs	r3, r3, #2
 800276e:	430a      	orrs	r2, r1
 8002770:	33c0      	adds	r3, #192	@ 0xc0
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002776:	e031      	b.n	80027dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002778:	4a1b      	ldr	r2, [pc, #108]	@ (80027e8 <__NVIC_SetPriority+0xd8>)
 800277a:	1dfb      	adds	r3, r7, #7
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	0019      	movs	r1, r3
 8002780:	230f      	movs	r3, #15
 8002782:	400b      	ands	r3, r1
 8002784:	3b08      	subs	r3, #8
 8002786:	089b      	lsrs	r3, r3, #2
 8002788:	3306      	adds	r3, #6
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	18d3      	adds	r3, r2, r3
 800278e:	3304      	adds	r3, #4
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	1dfa      	adds	r2, r7, #7
 8002794:	7812      	ldrb	r2, [r2, #0]
 8002796:	0011      	movs	r1, r2
 8002798:	2203      	movs	r2, #3
 800279a:	400a      	ands	r2, r1
 800279c:	00d2      	lsls	r2, r2, #3
 800279e:	21ff      	movs	r1, #255	@ 0xff
 80027a0:	4091      	lsls	r1, r2
 80027a2:	000a      	movs	r2, r1
 80027a4:	43d2      	mvns	r2, r2
 80027a6:	401a      	ands	r2, r3
 80027a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	019b      	lsls	r3, r3, #6
 80027ae:	22ff      	movs	r2, #255	@ 0xff
 80027b0:	401a      	ands	r2, r3
 80027b2:	1dfb      	adds	r3, r7, #7
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	0018      	movs	r0, r3
 80027b8:	2303      	movs	r3, #3
 80027ba:	4003      	ands	r3, r0
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027c0:	4809      	ldr	r0, [pc, #36]	@ (80027e8 <__NVIC_SetPriority+0xd8>)
 80027c2:	1dfb      	adds	r3, r7, #7
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	001c      	movs	r4, r3
 80027c8:	230f      	movs	r3, #15
 80027ca:	4023      	ands	r3, r4
 80027cc:	3b08      	subs	r3, #8
 80027ce:	089b      	lsrs	r3, r3, #2
 80027d0:	430a      	orrs	r2, r1
 80027d2:	3306      	adds	r3, #6
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	18c3      	adds	r3, r0, r3
 80027d8:	3304      	adds	r3, #4
 80027da:	601a      	str	r2, [r3, #0]
}
 80027dc:	46c0      	nop			@ (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	b003      	add	sp, #12
 80027e2:	bd90      	pop	{r4, r7, pc}
 80027e4:	e000e100 	.word	0xe000e100
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	1e5a      	subs	r2, r3, #1
 80027f8:	2380      	movs	r3, #128	@ 0x80
 80027fa:	045b      	lsls	r3, r3, #17
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d301      	bcc.n	8002804 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002800:	2301      	movs	r3, #1
 8002802:	e010      	b.n	8002826 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002804:	4b0a      	ldr	r3, [pc, #40]	@ (8002830 <SysTick_Config+0x44>)
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	3a01      	subs	r2, #1
 800280a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800280c:	2301      	movs	r3, #1
 800280e:	425b      	negs	r3, r3
 8002810:	2103      	movs	r1, #3
 8002812:	0018      	movs	r0, r3
 8002814:	f7ff ff7c 	bl	8002710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002818:	4b05      	ldr	r3, [pc, #20]	@ (8002830 <SysTick_Config+0x44>)
 800281a:	2200      	movs	r2, #0
 800281c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800281e:	4b04      	ldr	r3, [pc, #16]	@ (8002830 <SysTick_Config+0x44>)
 8002820:	2207      	movs	r2, #7
 8002822:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002824:	2300      	movs	r3, #0
}
 8002826:	0018      	movs	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	b002      	add	sp, #8
 800282c:	bd80      	pop	{r7, pc}
 800282e:	46c0      	nop			@ (mov r8, r8)
 8002830:	e000e010 	.word	0xe000e010

08002834 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	607a      	str	r2, [r7, #4]
 800283e:	210f      	movs	r1, #15
 8002840:	187b      	adds	r3, r7, r1
 8002842:	1c02      	adds	r2, r0, #0
 8002844:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	187b      	adds	r3, r7, r1
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	b25b      	sxtb	r3, r3
 800284e:	0011      	movs	r1, r2
 8002850:	0018      	movs	r0, r3
 8002852:	f7ff ff5d 	bl	8002710 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8002856:	46c0      	nop			@ (mov r8, r8)
 8002858:	46bd      	mov	sp, r7
 800285a:	b004      	add	sp, #16
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b082      	sub	sp, #8
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	0018      	movs	r0, r3
 800286a:	f7ff ffbf 	bl	80027ec <SysTick_Config>
 800286e:	0003      	movs	r3, r0
}
 8002870:	0018      	movs	r0, r3
 8002872:	46bd      	mov	sp, r7
 8002874:	b002      	add	sp, #8
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002886:	2300      	movs	r3, #0
 8002888:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800288a:	2300      	movs	r3, #0
 800288c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800288e:	e149      	b.n	8002b24 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2101      	movs	r1, #1
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	4091      	lsls	r1, r2
 800289a:	000a      	movs	r2, r1
 800289c:	4013      	ands	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d100      	bne.n	80028a8 <HAL_GPIO_Init+0x30>
 80028a6:	e13a      	b.n	8002b1e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2203      	movs	r2, #3
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d005      	beq.n	80028c0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2203      	movs	r2, #3
 80028ba:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d130      	bne.n	8002922 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	2203      	movs	r2, #3
 80028cc:	409a      	lsls	r2, r3
 80028ce:	0013      	movs	r3, r2
 80028d0:	43da      	mvns	r2, r3
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	4013      	ands	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	68da      	ldr	r2, [r3, #12]
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	409a      	lsls	r2, r3
 80028e2:	0013      	movs	r3, r2
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028f6:	2201      	movs	r2, #1
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	409a      	lsls	r2, r3
 80028fc:	0013      	movs	r3, r2
 80028fe:	43da      	mvns	r2, r3
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4013      	ands	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	091b      	lsrs	r3, r3, #4
 800290c:	2201      	movs	r2, #1
 800290e:	401a      	ands	r2, r3
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	409a      	lsls	r2, r3
 8002914:	0013      	movs	r3, r2
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	4313      	orrs	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2203      	movs	r2, #3
 8002928:	4013      	ands	r3, r2
 800292a:	2b03      	cmp	r3, #3
 800292c:	d017      	beq.n	800295e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	2203      	movs	r2, #3
 800293a:	409a      	lsls	r2, r3
 800293c:	0013      	movs	r3, r2
 800293e:	43da      	mvns	r2, r3
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4013      	ands	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	409a      	lsls	r2, r3
 8002950:	0013      	movs	r3, r2
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	4313      	orrs	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2203      	movs	r2, #3
 8002964:	4013      	ands	r3, r2
 8002966:	2b02      	cmp	r3, #2
 8002968:	d123      	bne.n	80029b2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	08da      	lsrs	r2, r3, #3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3208      	adds	r2, #8
 8002972:	0092      	lsls	r2, r2, #2
 8002974:	58d3      	ldr	r3, [r2, r3]
 8002976:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2207      	movs	r2, #7
 800297c:	4013      	ands	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	220f      	movs	r2, #15
 8002982:	409a      	lsls	r2, r3
 8002984:	0013      	movs	r3, r2
 8002986:	43da      	mvns	r2, r3
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	4013      	ands	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	691a      	ldr	r2, [r3, #16]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	2107      	movs	r1, #7
 8002996:	400b      	ands	r3, r1
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	409a      	lsls	r2, r3
 800299c:	0013      	movs	r3, r2
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	08da      	lsrs	r2, r3, #3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3208      	adds	r2, #8
 80029ac:	0092      	lsls	r2, r2, #2
 80029ae:	6939      	ldr	r1, [r7, #16]
 80029b0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	2203      	movs	r2, #3
 80029be:	409a      	lsls	r2, r3
 80029c0:	0013      	movs	r3, r2
 80029c2:	43da      	mvns	r2, r3
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	4013      	ands	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2203      	movs	r2, #3
 80029d0:	401a      	ands	r2, r3
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	409a      	lsls	r2, r3
 80029d8:	0013      	movs	r3, r2
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	23c0      	movs	r3, #192	@ 0xc0
 80029ec:	029b      	lsls	r3, r3, #10
 80029ee:	4013      	ands	r3, r2
 80029f0:	d100      	bne.n	80029f4 <HAL_GPIO_Init+0x17c>
 80029f2:	e094      	b.n	8002b1e <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f4:	4b51      	ldr	r3, [pc, #324]	@ (8002b3c <HAL_GPIO_Init+0x2c4>)
 80029f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029f8:	4b50      	ldr	r3, [pc, #320]	@ (8002b3c <HAL_GPIO_Init+0x2c4>)
 80029fa:	2101      	movs	r1, #1
 80029fc:	430a      	orrs	r2, r1
 80029fe:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a00:	4a4f      	ldr	r2, [pc, #316]	@ (8002b40 <HAL_GPIO_Init+0x2c8>)
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	089b      	lsrs	r3, r3, #2
 8002a06:	3302      	adds	r3, #2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	589b      	ldr	r3, [r3, r2]
 8002a0c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	2203      	movs	r2, #3
 8002a12:	4013      	ands	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	220f      	movs	r2, #15
 8002a18:	409a      	lsls	r2, r3
 8002a1a:	0013      	movs	r3, r2
 8002a1c:	43da      	mvns	r2, r3
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4013      	ands	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	23a0      	movs	r3, #160	@ 0xa0
 8002a28:	05db      	lsls	r3, r3, #23
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d013      	beq.n	8002a56 <HAL_GPIO_Init+0x1de>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a44      	ldr	r2, [pc, #272]	@ (8002b44 <HAL_GPIO_Init+0x2cc>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00d      	beq.n	8002a52 <HAL_GPIO_Init+0x1da>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a43      	ldr	r2, [pc, #268]	@ (8002b48 <HAL_GPIO_Init+0x2d0>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d007      	beq.n	8002a4e <HAL_GPIO_Init+0x1d6>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a42      	ldr	r2, [pc, #264]	@ (8002b4c <HAL_GPIO_Init+0x2d4>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d101      	bne.n	8002a4a <HAL_GPIO_Init+0x1d2>
 8002a46:	2305      	movs	r3, #5
 8002a48:	e006      	b.n	8002a58 <HAL_GPIO_Init+0x1e0>
 8002a4a:	2306      	movs	r3, #6
 8002a4c:	e004      	b.n	8002a58 <HAL_GPIO_Init+0x1e0>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e002      	b.n	8002a58 <HAL_GPIO_Init+0x1e0>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <HAL_GPIO_Init+0x1e0>
 8002a56:	2300      	movs	r3, #0
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	2103      	movs	r1, #3
 8002a5c:	400a      	ands	r2, r1
 8002a5e:	0092      	lsls	r2, r2, #2
 8002a60:	4093      	lsls	r3, r2
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a68:	4935      	ldr	r1, [pc, #212]	@ (8002b40 <HAL_GPIO_Init+0x2c8>)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	089b      	lsrs	r3, r3, #2
 8002a6e:	3302      	adds	r3, #2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a76:	4b36      	ldr	r3, [pc, #216]	@ (8002b50 <HAL_GPIO_Init+0x2d8>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	43da      	mvns	r2, r3
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4013      	ands	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	2380      	movs	r3, #128	@ 0x80
 8002a8c:	035b      	lsls	r3, r3, #13
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a9a:	4b2d      	ldr	r3, [pc, #180]	@ (8002b50 <HAL_GPIO_Init+0x2d8>)
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002aa0:	4b2b      	ldr	r3, [pc, #172]	@ (8002b50 <HAL_GPIO_Init+0x2d8>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	43da      	mvns	r2, r3
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4013      	ands	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	2380      	movs	r3, #128	@ 0x80
 8002ab6:	039b      	lsls	r3, r3, #14
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d003      	beq.n	8002ac4 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ac4:	4b22      	ldr	r3, [pc, #136]	@ (8002b50 <HAL_GPIO_Init+0x2d8>)
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002aca:	4b21      	ldr	r3, [pc, #132]	@ (8002b50 <HAL_GPIO_Init+0x2d8>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	43da      	mvns	r2, r3
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	2380      	movs	r3, #128	@ 0x80
 8002ae0:	029b      	lsls	r3, r3, #10
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002aee:	4b18      	ldr	r3, [pc, #96]	@ (8002b50 <HAL_GPIO_Init+0x2d8>)
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002af4:	4b16      	ldr	r3, [pc, #88]	@ (8002b50 <HAL_GPIO_Init+0x2d8>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	43da      	mvns	r2, r3
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4013      	ands	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	2380      	movs	r3, #128	@ 0x80
 8002b0a:	025b      	lsls	r3, r3, #9
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d003      	beq.n	8002b18 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002b18:	4b0d      	ldr	r3, [pc, #52]	@ (8002b50 <HAL_GPIO_Init+0x2d8>)
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	3301      	adds	r3, #1
 8002b22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	40da      	lsrs	r2, r3
 8002b2c:	1e13      	subs	r3, r2, #0
 8002b2e:	d000      	beq.n	8002b32 <HAL_GPIO_Init+0x2ba>
 8002b30:	e6ae      	b.n	8002890 <HAL_GPIO_Init+0x18>
  }
}
 8002b32:	46c0      	nop			@ (mov r8, r8)
 8002b34:	46c0      	nop			@ (mov r8, r8)
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b006      	add	sp, #24
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40010000 	.word	0x40010000
 8002b44:	50000400 	.word	0x50000400
 8002b48:	50000800 	.word	0x50000800
 8002b4c:	50001c00 	.word	0x50001c00
 8002b50:	40010400 	.word	0x40010400

08002b54 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	0008      	movs	r0, r1
 8002b5e:	0011      	movs	r1, r2
 8002b60:	1cbb      	adds	r3, r7, #2
 8002b62:	1c02      	adds	r2, r0, #0
 8002b64:	801a      	strh	r2, [r3, #0]
 8002b66:	1c7b      	adds	r3, r7, #1
 8002b68:	1c0a      	adds	r2, r1, #0
 8002b6a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b6c:	1c7b      	adds	r3, r7, #1
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d004      	beq.n	8002b7e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b74:	1cbb      	adds	r3, r7, #2
 8002b76:	881a      	ldrh	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002b7c:	e003      	b.n	8002b86 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002b7e:	1cbb      	adds	r3, r7, #2
 8002b80:	881a      	ldrh	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b86:	46c0      	nop			@ (mov r8, r8)
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	b002      	add	sp, #8
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b90:	b5b0      	push	{r4, r5, r7, lr}
 8002b92:	b08a      	sub	sp, #40	@ 0x28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d102      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	f000 fb6c 	bl	800327c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ba4:	4bc8      	ldr	r3, [pc, #800]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	220c      	movs	r2, #12
 8002baa:	4013      	ands	r3, r2
 8002bac:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bae:	4bc6      	ldr	r3, [pc, #792]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	2380      	movs	r3, #128	@ 0x80
 8002bb4:	025b      	lsls	r3, r3, #9
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d100      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x36>
 8002bc4:	e07d      	b.n	8002cc2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d007      	beq.n	8002bdc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	2b0c      	cmp	r3, #12
 8002bd0:	d112      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x68>
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	2380      	movs	r3, #128	@ 0x80
 8002bd6:	025b      	lsls	r3, r3, #9
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d10d      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bdc:	4bba      	ldr	r3, [pc, #744]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	2380      	movs	r3, #128	@ 0x80
 8002be2:	029b      	lsls	r3, r3, #10
 8002be4:	4013      	ands	r3, r2
 8002be6:	d100      	bne.n	8002bea <HAL_RCC_OscConfig+0x5a>
 8002be8:	e06a      	b.n	8002cc0 <HAL_RCC_OscConfig+0x130>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d166      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	f000 fb42 	bl	800327c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	2380      	movs	r3, #128	@ 0x80
 8002bfe:	025b      	lsls	r3, r3, #9
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d107      	bne.n	8002c14 <HAL_RCC_OscConfig+0x84>
 8002c04:	4bb0      	ldr	r3, [pc, #704]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	4baf      	ldr	r3, [pc, #700]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002c0a:	2180      	movs	r1, #128	@ 0x80
 8002c0c:	0249      	lsls	r1, r1, #9
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	e027      	b.n	8002c64 <HAL_RCC_OscConfig+0xd4>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	23a0      	movs	r3, #160	@ 0xa0
 8002c1a:	02db      	lsls	r3, r3, #11
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d10e      	bne.n	8002c3e <HAL_RCC_OscConfig+0xae>
 8002c20:	4ba9      	ldr	r3, [pc, #676]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	4ba8      	ldr	r3, [pc, #672]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002c26:	2180      	movs	r1, #128	@ 0x80
 8002c28:	02c9      	lsls	r1, r1, #11
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	4ba6      	ldr	r3, [pc, #664]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	4ba5      	ldr	r3, [pc, #660]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002c34:	2180      	movs	r1, #128	@ 0x80
 8002c36:	0249      	lsls	r1, r1, #9
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	e012      	b.n	8002c64 <HAL_RCC_OscConfig+0xd4>
 8002c3e:	4ba2      	ldr	r3, [pc, #648]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	4ba1      	ldr	r3, [pc, #644]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002c44:	49a1      	ldr	r1, [pc, #644]	@ (8002ecc <HAL_RCC_OscConfig+0x33c>)
 8002c46:	400a      	ands	r2, r1
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	4b9f      	ldr	r3, [pc, #636]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	2380      	movs	r3, #128	@ 0x80
 8002c50:	025b      	lsls	r3, r3, #9
 8002c52:	4013      	ands	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	4b9b      	ldr	r3, [pc, #620]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4b9a      	ldr	r3, [pc, #616]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002c5e:	499c      	ldr	r1, [pc, #624]	@ (8002ed0 <HAL_RCC_OscConfig+0x340>)
 8002c60:	400a      	ands	r2, r1
 8002c62:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d014      	beq.n	8002c96 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6c:	f7ff fd22 	bl	80026b4 <HAL_GetTick>
 8002c70:	0003      	movs	r3, r0
 8002c72:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c76:	f7ff fd1d 	bl	80026b4 <HAL_GetTick>
 8002c7a:	0002      	movs	r2, r0
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b64      	cmp	r3, #100	@ 0x64
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e2f9      	b.n	800327c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c88:	4b8f      	ldr	r3, [pc, #572]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	2380      	movs	r3, #128	@ 0x80
 8002c8e:	029b      	lsls	r3, r3, #10
 8002c90:	4013      	ands	r3, r2
 8002c92:	d0f0      	beq.n	8002c76 <HAL_RCC_OscConfig+0xe6>
 8002c94:	e015      	b.n	8002cc2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c96:	f7ff fd0d 	bl	80026b4 <HAL_GetTick>
 8002c9a:	0003      	movs	r3, r0
 8002c9c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ca0:	f7ff fd08 	bl	80026b4 <HAL_GetTick>
 8002ca4:	0002      	movs	r2, r0
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b64      	cmp	r3, #100	@ 0x64
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e2e4      	b.n	800327c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002cb2:	4b85      	ldr	r3, [pc, #532]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	2380      	movs	r3, #128	@ 0x80
 8002cb8:	029b      	lsls	r3, r3, #10
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x110>
 8002cbe:	e000      	b.n	8002cc2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d100      	bne.n	8002cce <HAL_RCC_OscConfig+0x13e>
 8002ccc:	e099      	b.n	8002e02 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d009      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002cdc:	4b7a      	ldr	r3, [pc, #488]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	4b79      	ldr	r3, [pc, #484]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002ce2:	2120      	movs	r1, #32
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cea:	2220      	movs	r2, #32
 8002cec:	4393      	bics	r3, r2
 8002cee:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	2b04      	cmp	r3, #4
 8002cf4:	d005      	beq.n	8002d02 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	2b0c      	cmp	r3, #12
 8002cfa:	d13e      	bne.n	8002d7a <HAL_RCC_OscConfig+0x1ea>
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d13b      	bne.n	8002d7a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002d02:	4b71      	ldr	r3, [pc, #452]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2204      	movs	r2, #4
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d004      	beq.n	8002d16 <HAL_RCC_OscConfig+0x186>
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e2b2      	b.n	800327c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d16:	4b6c      	ldr	r3, [pc, #432]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	4a6e      	ldr	r2, [pc, #440]	@ (8002ed4 <HAL_RCC_OscConfig+0x344>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	0019      	movs	r1, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	021a      	lsls	r2, r3, #8
 8002d26:	4b68      	ldr	r3, [pc, #416]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002d2c:	4b66      	ldr	r3, [pc, #408]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2209      	movs	r2, #9
 8002d32:	4393      	bics	r3, r2
 8002d34:	0019      	movs	r1, r3
 8002d36:	4b64      	ldr	r3, [pc, #400]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002d38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d3e:	f000 fbeb 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 8002d42:	0001      	movs	r1, r0
 8002d44:	4b60      	ldr	r3, [pc, #384]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	091b      	lsrs	r3, r3, #4
 8002d4a:	220f      	movs	r2, #15
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	4a62      	ldr	r2, [pc, #392]	@ (8002ed8 <HAL_RCC_OscConfig+0x348>)
 8002d50:	5cd3      	ldrb	r3, [r2, r3]
 8002d52:	000a      	movs	r2, r1
 8002d54:	40da      	lsrs	r2, r3
 8002d56:	4b61      	ldr	r3, [pc, #388]	@ (8002edc <HAL_RCC_OscConfig+0x34c>)
 8002d58:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002d5a:	4b61      	ldr	r3, [pc, #388]	@ (8002ee0 <HAL_RCC_OscConfig+0x350>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2513      	movs	r5, #19
 8002d60:	197c      	adds	r4, r7, r5
 8002d62:	0018      	movs	r0, r3
 8002d64:	f7ff fc60 	bl	8002628 <HAL_InitTick>
 8002d68:	0003      	movs	r3, r0
 8002d6a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002d6c:	197b      	adds	r3, r7, r5
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d046      	beq.n	8002e02 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002d74:	197b      	adds	r3, r7, r5
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	e280      	b.n	800327c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d027      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002d80:	4b51      	ldr	r3, [pc, #324]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2209      	movs	r2, #9
 8002d86:	4393      	bics	r3, r2
 8002d88:	0019      	movs	r1, r3
 8002d8a:	4b4f      	ldr	r3, [pc, #316]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002d8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d92:	f7ff fc8f 	bl	80026b4 <HAL_GetTick>
 8002d96:	0003      	movs	r3, r0
 8002d98:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d9c:	f7ff fc8a 	bl	80026b4 <HAL_GetTick>
 8002da0:	0002      	movs	r2, r0
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e266      	b.n	800327c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dae:	4b46      	ldr	r3, [pc, #280]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2204      	movs	r2, #4
 8002db4:	4013      	ands	r3, r2
 8002db6:	d0f1      	beq.n	8002d9c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db8:	4b43      	ldr	r3, [pc, #268]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	4a45      	ldr	r2, [pc, #276]	@ (8002ed4 <HAL_RCC_OscConfig+0x344>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	0019      	movs	r1, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	021a      	lsls	r2, r3, #8
 8002dc8:	4b3f      	ldr	r3, [pc, #252]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	605a      	str	r2, [r3, #4]
 8002dce:	e018      	b.n	8002e02 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dd0:	4b3d      	ldr	r3, [pc, #244]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	4b3c      	ldr	r3, [pc, #240]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	438a      	bics	r2, r1
 8002dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ddc:	f7ff fc6a 	bl	80026b4 <HAL_GetTick>
 8002de0:	0003      	movs	r3, r0
 8002de2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002de6:	f7ff fc65 	bl	80026b4 <HAL_GetTick>
 8002dea:	0002      	movs	r2, r0
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e241      	b.n	800327c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002df8:	4b33      	ldr	r3, [pc, #204]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2204      	movs	r2, #4
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d1f1      	bne.n	8002de6 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2210      	movs	r2, #16
 8002e08:	4013      	ands	r3, r2
 8002e0a:	d100      	bne.n	8002e0e <HAL_RCC_OscConfig+0x27e>
 8002e0c:	e0a1      	b.n	8002f52 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d140      	bne.n	8002e96 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e14:	4b2c      	ldr	r3, [pc, #176]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	2380      	movs	r3, #128	@ 0x80
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d005      	beq.n	8002e2c <HAL_RCC_OscConfig+0x29c>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e227      	b.n	800327c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e2c:	4b26      	ldr	r3, [pc, #152]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	4a2c      	ldr	r2, [pc, #176]	@ (8002ee4 <HAL_RCC_OscConfig+0x354>)
 8002e32:	4013      	ands	r3, r2
 8002e34:	0019      	movs	r1, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a1a      	ldr	r2, [r3, #32]
 8002e3a:	4b23      	ldr	r3, [pc, #140]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e40:	4b21      	ldr	r3, [pc, #132]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	021b      	lsls	r3, r3, #8
 8002e46:	0a19      	lsrs	r1, r3, #8
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	061a      	lsls	r2, r3, #24
 8002e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002e50:	430a      	orrs	r2, r1
 8002e52:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	0b5b      	lsrs	r3, r3, #13
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	2280      	movs	r2, #128	@ 0x80
 8002e5e:	0212      	lsls	r2, r2, #8
 8002e60:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002e62:	4b19      	ldr	r3, [pc, #100]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	091b      	lsrs	r3, r3, #4
 8002e68:	210f      	movs	r1, #15
 8002e6a:	400b      	ands	r3, r1
 8002e6c:	491a      	ldr	r1, [pc, #104]	@ (8002ed8 <HAL_RCC_OscConfig+0x348>)
 8002e6e:	5ccb      	ldrb	r3, [r1, r3]
 8002e70:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e72:	4b1a      	ldr	r3, [pc, #104]	@ (8002edc <HAL_RCC_OscConfig+0x34c>)
 8002e74:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002e76:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee0 <HAL_RCC_OscConfig+0x350>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2513      	movs	r5, #19
 8002e7c:	197c      	adds	r4, r7, r5
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f7ff fbd2 	bl	8002628 <HAL_InitTick>
 8002e84:	0003      	movs	r3, r0
 8002e86:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002e88:	197b      	adds	r3, r7, r5
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d060      	beq.n	8002f52 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002e90:	197b      	adds	r3, r7, r5
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	e1f2      	b.n	800327c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d03f      	beq.n	8002f1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	4b09      	ldr	r3, [pc, #36]	@ (8002ec8 <HAL_RCC_OscConfig+0x338>)
 8002ea4:	2180      	movs	r1, #128	@ 0x80
 8002ea6:	0049      	lsls	r1, r1, #1
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eac:	f7ff fc02 	bl	80026b4 <HAL_GetTick>
 8002eb0:	0003      	movs	r3, r0
 8002eb2:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002eb4:	e018      	b.n	8002ee8 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002eb6:	f7ff fbfd 	bl	80026b4 <HAL_GetTick>
 8002eba:	0002      	movs	r2, r0
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d911      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e1d9      	b.n	800327c <HAL_RCC_OscConfig+0x6ec>
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	fffeffff 	.word	0xfffeffff
 8002ed0:	fffbffff 	.word	0xfffbffff
 8002ed4:	ffffe0ff 	.word	0xffffe0ff
 8002ed8:	08005924 	.word	0x08005924
 8002edc:	20000000 	.word	0x20000000
 8002ee0:	20000004 	.word	0x20000004
 8002ee4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ee8:	4bc9      	ldr	r3, [pc, #804]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	2380      	movs	r3, #128	@ 0x80
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	d0e0      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ef4:	4bc6      	ldr	r3, [pc, #792]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	4ac6      	ldr	r2, [pc, #792]	@ (8003214 <HAL_RCC_OscConfig+0x684>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	0019      	movs	r1, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1a      	ldr	r2, [r3, #32]
 8002f02:	4bc3      	ldr	r3, [pc, #780]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 8002f04:	430a      	orrs	r2, r1
 8002f06:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f08:	4bc1      	ldr	r3, [pc, #772]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	021b      	lsls	r3, r3, #8
 8002f0e:	0a19      	lsrs	r1, r3, #8
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	061a      	lsls	r2, r3, #24
 8002f16:	4bbe      	ldr	r3, [pc, #760]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	605a      	str	r2, [r3, #4]
 8002f1c:	e019      	b.n	8002f52 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f1e:	4bbc      	ldr	r3, [pc, #752]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	4bbb      	ldr	r3, [pc, #748]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 8002f24:	49bc      	ldr	r1, [pc, #752]	@ (8003218 <HAL_RCC_OscConfig+0x688>)
 8002f26:	400a      	ands	r2, r1
 8002f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2a:	f7ff fbc3 	bl	80026b4 <HAL_GetTick>
 8002f2e:	0003      	movs	r3, r0
 8002f30:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f34:	f7ff fbbe 	bl	80026b4 <HAL_GetTick>
 8002f38:	0002      	movs	r2, r0
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e19a      	b.n	800327c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f46:	4bb2      	ldr	r3, [pc, #712]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	2380      	movs	r3, #128	@ 0x80
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4013      	ands	r3, r2
 8002f50:	d1f0      	bne.n	8002f34 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2208      	movs	r2, #8
 8002f58:	4013      	ands	r3, r2
 8002f5a:	d036      	beq.n	8002fca <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d019      	beq.n	8002f98 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f64:	4baa      	ldr	r3, [pc, #680]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 8002f66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f68:	4ba9      	ldr	r3, [pc, #676]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f70:	f7ff fba0 	bl	80026b4 <HAL_GetTick>
 8002f74:	0003      	movs	r3, r0
 8002f76:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f7a:	f7ff fb9b 	bl	80026b4 <HAL_GetTick>
 8002f7e:	0002      	movs	r2, r0
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e177      	b.n	800327c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f8c:	4ba0      	ldr	r3, [pc, #640]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 8002f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f90:	2202      	movs	r2, #2
 8002f92:	4013      	ands	r3, r2
 8002f94:	d0f1      	beq.n	8002f7a <HAL_RCC_OscConfig+0x3ea>
 8002f96:	e018      	b.n	8002fca <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f98:	4b9d      	ldr	r3, [pc, #628]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 8002f9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f9c:	4b9c      	ldr	r3, [pc, #624]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	438a      	bics	r2, r1
 8002fa2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa4:	f7ff fb86 	bl	80026b4 <HAL_GetTick>
 8002fa8:	0003      	movs	r3, r0
 8002faa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fac:	e008      	b.n	8002fc0 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fae:	f7ff fb81 	bl	80026b4 <HAL_GetTick>
 8002fb2:	0002      	movs	r2, r0
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e15d      	b.n	800327c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fc0:	4b93      	ldr	r3, [pc, #588]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 8002fc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d1f1      	bne.n	8002fae <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2204      	movs	r2, #4
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d100      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x446>
 8002fd4:	e0ae      	b.n	8003134 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd6:	2023      	movs	r0, #35	@ 0x23
 8002fd8:	183b      	adds	r3, r7, r0
 8002fda:	2200      	movs	r2, #0
 8002fdc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fde:	4b8c      	ldr	r3, [pc, #560]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 8002fe0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fe2:	2380      	movs	r3, #128	@ 0x80
 8002fe4:	055b      	lsls	r3, r3, #21
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d109      	bne.n	8002ffe <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fea:	4b89      	ldr	r3, [pc, #548]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 8002fec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fee:	4b88      	ldr	r3, [pc, #544]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 8002ff0:	2180      	movs	r1, #128	@ 0x80
 8002ff2:	0549      	lsls	r1, r1, #21
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002ff8:	183b      	adds	r3, r7, r0
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffe:	4b87      	ldr	r3, [pc, #540]	@ (800321c <HAL_RCC_OscConfig+0x68c>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	2380      	movs	r3, #128	@ 0x80
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	4013      	ands	r3, r2
 8003008:	d11a      	bne.n	8003040 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800300a:	4b84      	ldr	r3, [pc, #528]	@ (800321c <HAL_RCC_OscConfig+0x68c>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	4b83      	ldr	r3, [pc, #524]	@ (800321c <HAL_RCC_OscConfig+0x68c>)
 8003010:	2180      	movs	r1, #128	@ 0x80
 8003012:	0049      	lsls	r1, r1, #1
 8003014:	430a      	orrs	r2, r1
 8003016:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003018:	f7ff fb4c 	bl	80026b4 <HAL_GetTick>
 800301c:	0003      	movs	r3, r0
 800301e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003022:	f7ff fb47 	bl	80026b4 <HAL_GetTick>
 8003026:	0002      	movs	r2, r0
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b64      	cmp	r3, #100	@ 0x64
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e123      	b.n	800327c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003034:	4b79      	ldr	r3, [pc, #484]	@ (800321c <HAL_RCC_OscConfig+0x68c>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	2380      	movs	r3, #128	@ 0x80
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	4013      	ands	r3, r2
 800303e:	d0f0      	beq.n	8003022 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	2380      	movs	r3, #128	@ 0x80
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	429a      	cmp	r2, r3
 800304a:	d107      	bne.n	800305c <HAL_RCC_OscConfig+0x4cc>
 800304c:	4b70      	ldr	r3, [pc, #448]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 800304e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003050:	4b6f      	ldr	r3, [pc, #444]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 8003052:	2180      	movs	r1, #128	@ 0x80
 8003054:	0049      	lsls	r1, r1, #1
 8003056:	430a      	orrs	r2, r1
 8003058:	651a      	str	r2, [r3, #80]	@ 0x50
 800305a:	e031      	b.n	80030c0 <HAL_RCC_OscConfig+0x530>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10c      	bne.n	800307e <HAL_RCC_OscConfig+0x4ee>
 8003064:	4b6a      	ldr	r3, [pc, #424]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 8003066:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003068:	4b69      	ldr	r3, [pc, #420]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 800306a:	496b      	ldr	r1, [pc, #428]	@ (8003218 <HAL_RCC_OscConfig+0x688>)
 800306c:	400a      	ands	r2, r1
 800306e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003070:	4b67      	ldr	r3, [pc, #412]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 8003072:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003074:	4b66      	ldr	r3, [pc, #408]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 8003076:	496a      	ldr	r1, [pc, #424]	@ (8003220 <HAL_RCC_OscConfig+0x690>)
 8003078:	400a      	ands	r2, r1
 800307a:	651a      	str	r2, [r3, #80]	@ 0x50
 800307c:	e020      	b.n	80030c0 <HAL_RCC_OscConfig+0x530>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	23a0      	movs	r3, #160	@ 0xa0
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	429a      	cmp	r2, r3
 8003088:	d10e      	bne.n	80030a8 <HAL_RCC_OscConfig+0x518>
 800308a:	4b61      	ldr	r3, [pc, #388]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 800308c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800308e:	4b60      	ldr	r3, [pc, #384]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 8003090:	2180      	movs	r1, #128	@ 0x80
 8003092:	00c9      	lsls	r1, r1, #3
 8003094:	430a      	orrs	r2, r1
 8003096:	651a      	str	r2, [r3, #80]	@ 0x50
 8003098:	4b5d      	ldr	r3, [pc, #372]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 800309a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800309c:	4b5c      	ldr	r3, [pc, #368]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 800309e:	2180      	movs	r1, #128	@ 0x80
 80030a0:	0049      	lsls	r1, r1, #1
 80030a2:	430a      	orrs	r2, r1
 80030a4:	651a      	str	r2, [r3, #80]	@ 0x50
 80030a6:	e00b      	b.n	80030c0 <HAL_RCC_OscConfig+0x530>
 80030a8:	4b59      	ldr	r3, [pc, #356]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 80030aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030ac:	4b58      	ldr	r3, [pc, #352]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 80030ae:	495a      	ldr	r1, [pc, #360]	@ (8003218 <HAL_RCC_OscConfig+0x688>)
 80030b0:	400a      	ands	r2, r1
 80030b2:	651a      	str	r2, [r3, #80]	@ 0x50
 80030b4:	4b56      	ldr	r3, [pc, #344]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 80030b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030b8:	4b55      	ldr	r3, [pc, #340]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 80030ba:	4959      	ldr	r1, [pc, #356]	@ (8003220 <HAL_RCC_OscConfig+0x690>)
 80030bc:	400a      	ands	r2, r1
 80030be:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d015      	beq.n	80030f4 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c8:	f7ff faf4 	bl	80026b4 <HAL_GetTick>
 80030cc:	0003      	movs	r3, r0
 80030ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030d0:	e009      	b.n	80030e6 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d2:	f7ff faef 	bl	80026b4 <HAL_GetTick>
 80030d6:	0002      	movs	r2, r0
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	4a51      	ldr	r2, [pc, #324]	@ (8003224 <HAL_RCC_OscConfig+0x694>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e0ca      	b.n	800327c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030e6:	4b4a      	ldr	r3, [pc, #296]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 80030e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030ea:	2380      	movs	r3, #128	@ 0x80
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4013      	ands	r3, r2
 80030f0:	d0ef      	beq.n	80030d2 <HAL_RCC_OscConfig+0x542>
 80030f2:	e014      	b.n	800311e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f4:	f7ff fade 	bl	80026b4 <HAL_GetTick>
 80030f8:	0003      	movs	r3, r0
 80030fa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030fc:	e009      	b.n	8003112 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030fe:	f7ff fad9 	bl	80026b4 <HAL_GetTick>
 8003102:	0002      	movs	r2, r0
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	4a46      	ldr	r2, [pc, #280]	@ (8003224 <HAL_RCC_OscConfig+0x694>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e0b4      	b.n	800327c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003112:	4b3f      	ldr	r3, [pc, #252]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 8003114:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003116:	2380      	movs	r3, #128	@ 0x80
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4013      	ands	r3, r2
 800311c:	d1ef      	bne.n	80030fe <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800311e:	2323      	movs	r3, #35	@ 0x23
 8003120:	18fb      	adds	r3, r7, r3
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d105      	bne.n	8003134 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003128:	4b39      	ldr	r3, [pc, #228]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 800312a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800312c:	4b38      	ldr	r3, [pc, #224]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 800312e:	493e      	ldr	r1, [pc, #248]	@ (8003228 <HAL_RCC_OscConfig+0x698>)
 8003130:	400a      	ands	r2, r1
 8003132:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003138:	2b00      	cmp	r3, #0
 800313a:	d100      	bne.n	800313e <HAL_RCC_OscConfig+0x5ae>
 800313c:	e09d      	b.n	800327a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	2b0c      	cmp	r3, #12
 8003142:	d100      	bne.n	8003146 <HAL_RCC_OscConfig+0x5b6>
 8003144:	e076      	b.n	8003234 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314a:	2b02      	cmp	r3, #2
 800314c:	d145      	bne.n	80031da <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800314e:	4b30      	ldr	r3, [pc, #192]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	4b2f      	ldr	r3, [pc, #188]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 8003154:	4935      	ldr	r1, [pc, #212]	@ (800322c <HAL_RCC_OscConfig+0x69c>)
 8003156:	400a      	ands	r2, r1
 8003158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315a:	f7ff faab 	bl	80026b4 <HAL_GetTick>
 800315e:	0003      	movs	r3, r0
 8003160:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003164:	f7ff faa6 	bl	80026b4 <HAL_GetTick>
 8003168:	0002      	movs	r2, r0
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e082      	b.n	800327c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003176:	4b26      	ldr	r3, [pc, #152]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	2380      	movs	r3, #128	@ 0x80
 800317c:	049b      	lsls	r3, r3, #18
 800317e:	4013      	ands	r3, r2
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003182:	4b23      	ldr	r3, [pc, #140]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	4a2a      	ldr	r2, [pc, #168]	@ (8003230 <HAL_RCC_OscConfig+0x6a0>)
 8003188:	4013      	ands	r3, r2
 800318a:	0019      	movs	r1, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003194:	431a      	orrs	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319a:	431a      	orrs	r2, r3
 800319c:	4b1c      	ldr	r3, [pc, #112]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 800319e:	430a      	orrs	r2, r1
 80031a0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	4b1a      	ldr	r3, [pc, #104]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 80031a8:	2180      	movs	r1, #128	@ 0x80
 80031aa:	0449      	lsls	r1, r1, #17
 80031ac:	430a      	orrs	r2, r1
 80031ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b0:	f7ff fa80 	bl	80026b4 <HAL_GetTick>
 80031b4:	0003      	movs	r3, r0
 80031b6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ba:	f7ff fa7b 	bl	80026b4 <HAL_GetTick>
 80031be:	0002      	movs	r2, r0
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e057      	b.n	800327c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80031cc:	4b10      	ldr	r3, [pc, #64]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	2380      	movs	r3, #128	@ 0x80
 80031d2:	049b      	lsls	r3, r3, #18
 80031d4:	4013      	ands	r3, r2
 80031d6:	d0f0      	beq.n	80031ba <HAL_RCC_OscConfig+0x62a>
 80031d8:	e04f      	b.n	800327a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031da:	4b0d      	ldr	r3, [pc, #52]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	4b0c      	ldr	r3, [pc, #48]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 80031e0:	4912      	ldr	r1, [pc, #72]	@ (800322c <HAL_RCC_OscConfig+0x69c>)
 80031e2:	400a      	ands	r2, r1
 80031e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e6:	f7ff fa65 	bl	80026b4 <HAL_GetTick>
 80031ea:	0003      	movs	r3, r0
 80031ec:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f0:	f7ff fa60 	bl	80026b4 <HAL_GetTick>
 80031f4:	0002      	movs	r2, r0
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e03c      	b.n	800327c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003202:	4b03      	ldr	r3, [pc, #12]	@ (8003210 <HAL_RCC_OscConfig+0x680>)
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	2380      	movs	r3, #128	@ 0x80
 8003208:	049b      	lsls	r3, r3, #18
 800320a:	4013      	ands	r3, r2
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x660>
 800320e:	e034      	b.n	800327a <HAL_RCC_OscConfig+0x6ea>
 8003210:	40021000 	.word	0x40021000
 8003214:	ffff1fff 	.word	0xffff1fff
 8003218:	fffffeff 	.word	0xfffffeff
 800321c:	40007000 	.word	0x40007000
 8003220:	fffffbff 	.word	0xfffffbff
 8003224:	00001388 	.word	0x00001388
 8003228:	efffffff 	.word	0xefffffff
 800322c:	feffffff 	.word	0xfeffffff
 8003230:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003238:	2b01      	cmp	r3, #1
 800323a:	d101      	bne.n	8003240 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e01d      	b.n	800327c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003240:	4b10      	ldr	r3, [pc, #64]	@ (8003284 <HAL_RCC_OscConfig+0x6f4>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	2380      	movs	r3, #128	@ 0x80
 800324a:	025b      	lsls	r3, r3, #9
 800324c:	401a      	ands	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003252:	429a      	cmp	r2, r3
 8003254:	d10f      	bne.n	8003276 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	23f0      	movs	r3, #240	@ 0xf0
 800325a:	039b      	lsls	r3, r3, #14
 800325c:	401a      	ands	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003262:	429a      	cmp	r2, r3
 8003264:	d107      	bne.n	8003276 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	23c0      	movs	r3, #192	@ 0xc0
 800326a:	041b      	lsls	r3, r3, #16
 800326c:	401a      	ands	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003272:	429a      	cmp	r2, r3
 8003274:	d001      	beq.n	800327a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	0018      	movs	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	b00a      	add	sp, #40	@ 0x28
 8003282:	bdb0      	pop	{r4, r5, r7, pc}
 8003284:	40021000 	.word	0x40021000

08003288 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003288:	b5b0      	push	{r4, r5, r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e128      	b.n	80034ee <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800329c:	4b96      	ldr	r3, [pc, #600]	@ (80034f8 <HAL_RCC_ClockConfig+0x270>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2201      	movs	r2, #1
 80032a2:	4013      	ands	r3, r2
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d91e      	bls.n	80032e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032aa:	4b93      	ldr	r3, [pc, #588]	@ (80034f8 <HAL_RCC_ClockConfig+0x270>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2201      	movs	r2, #1
 80032b0:	4393      	bics	r3, r2
 80032b2:	0019      	movs	r1, r3
 80032b4:	4b90      	ldr	r3, [pc, #576]	@ (80034f8 <HAL_RCC_ClockConfig+0x270>)
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80032bc:	f7ff f9fa 	bl	80026b4 <HAL_GetTick>
 80032c0:	0003      	movs	r3, r0
 80032c2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c4:	e009      	b.n	80032da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c6:	f7ff f9f5 	bl	80026b4 <HAL_GetTick>
 80032ca:	0002      	movs	r2, r0
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	4a8a      	ldr	r2, [pc, #552]	@ (80034fc <HAL_RCC_ClockConfig+0x274>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e109      	b.n	80034ee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032da:	4b87      	ldr	r3, [pc, #540]	@ (80034f8 <HAL_RCC_ClockConfig+0x270>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2201      	movs	r2, #1
 80032e0:	4013      	ands	r3, r2
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d1ee      	bne.n	80032c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2202      	movs	r2, #2
 80032ee:	4013      	ands	r3, r2
 80032f0:	d009      	beq.n	8003306 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032f2:	4b83      	ldr	r3, [pc, #524]	@ (8003500 <HAL_RCC_ClockConfig+0x278>)
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	22f0      	movs	r2, #240	@ 0xf0
 80032f8:	4393      	bics	r3, r2
 80032fa:	0019      	movs	r1, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	4b7f      	ldr	r3, [pc, #508]	@ (8003500 <HAL_RCC_ClockConfig+0x278>)
 8003302:	430a      	orrs	r2, r1
 8003304:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2201      	movs	r2, #1
 800330c:	4013      	ands	r3, r2
 800330e:	d100      	bne.n	8003312 <HAL_RCC_ClockConfig+0x8a>
 8003310:	e089      	b.n	8003426 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2b02      	cmp	r3, #2
 8003318:	d107      	bne.n	800332a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800331a:	4b79      	ldr	r3, [pc, #484]	@ (8003500 <HAL_RCC_ClockConfig+0x278>)
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	2380      	movs	r3, #128	@ 0x80
 8003320:	029b      	lsls	r3, r3, #10
 8003322:	4013      	ands	r3, r2
 8003324:	d120      	bne.n	8003368 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e0e1      	b.n	80034ee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b03      	cmp	r3, #3
 8003330:	d107      	bne.n	8003342 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003332:	4b73      	ldr	r3, [pc, #460]	@ (8003500 <HAL_RCC_ClockConfig+0x278>)
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	2380      	movs	r3, #128	@ 0x80
 8003338:	049b      	lsls	r3, r3, #18
 800333a:	4013      	ands	r3, r2
 800333c:	d114      	bne.n	8003368 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e0d5      	b.n	80034ee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d106      	bne.n	8003358 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800334a:	4b6d      	ldr	r3, [pc, #436]	@ (8003500 <HAL_RCC_ClockConfig+0x278>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2204      	movs	r2, #4
 8003350:	4013      	ands	r3, r2
 8003352:	d109      	bne.n	8003368 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e0ca      	b.n	80034ee <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003358:	4b69      	ldr	r3, [pc, #420]	@ (8003500 <HAL_RCC_ClockConfig+0x278>)
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	2380      	movs	r3, #128	@ 0x80
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4013      	ands	r3, r2
 8003362:	d101      	bne.n	8003368 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e0c2      	b.n	80034ee <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003368:	4b65      	ldr	r3, [pc, #404]	@ (8003500 <HAL_RCC_ClockConfig+0x278>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	2203      	movs	r2, #3
 800336e:	4393      	bics	r3, r2
 8003370:	0019      	movs	r1, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	4b62      	ldr	r3, [pc, #392]	@ (8003500 <HAL_RCC_ClockConfig+0x278>)
 8003378:	430a      	orrs	r2, r1
 800337a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800337c:	f7ff f99a 	bl	80026b4 <HAL_GetTick>
 8003380:	0003      	movs	r3, r0
 8003382:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b02      	cmp	r3, #2
 800338a:	d111      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800338c:	e009      	b.n	80033a2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800338e:	f7ff f991 	bl	80026b4 <HAL_GetTick>
 8003392:	0002      	movs	r2, r0
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	4a58      	ldr	r2, [pc, #352]	@ (80034fc <HAL_RCC_ClockConfig+0x274>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e0a5      	b.n	80034ee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80033a2:	4b57      	ldr	r3, [pc, #348]	@ (8003500 <HAL_RCC_ClockConfig+0x278>)
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	220c      	movs	r2, #12
 80033a8:	4013      	ands	r3, r2
 80033aa:	2b08      	cmp	r3, #8
 80033ac:	d1ef      	bne.n	800338e <HAL_RCC_ClockConfig+0x106>
 80033ae:	e03a      	b.n	8003426 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b03      	cmp	r3, #3
 80033b6:	d111      	bne.n	80033dc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033b8:	e009      	b.n	80033ce <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ba:	f7ff f97b 	bl	80026b4 <HAL_GetTick>
 80033be:	0002      	movs	r2, r0
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	4a4d      	ldr	r2, [pc, #308]	@ (80034fc <HAL_RCC_ClockConfig+0x274>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e08f      	b.n	80034ee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033ce:	4b4c      	ldr	r3, [pc, #304]	@ (8003500 <HAL_RCC_ClockConfig+0x278>)
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	220c      	movs	r2, #12
 80033d4:	4013      	ands	r3, r2
 80033d6:	2b0c      	cmp	r3, #12
 80033d8:	d1ef      	bne.n	80033ba <HAL_RCC_ClockConfig+0x132>
 80033da:	e024      	b.n	8003426 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d11b      	bne.n	800341c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80033e4:	e009      	b.n	80033fa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e6:	f7ff f965 	bl	80026b4 <HAL_GetTick>
 80033ea:	0002      	movs	r2, r0
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	4a42      	ldr	r2, [pc, #264]	@ (80034fc <HAL_RCC_ClockConfig+0x274>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e079      	b.n	80034ee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80033fa:	4b41      	ldr	r3, [pc, #260]	@ (8003500 <HAL_RCC_ClockConfig+0x278>)
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	220c      	movs	r2, #12
 8003400:	4013      	ands	r3, r2
 8003402:	2b04      	cmp	r3, #4
 8003404:	d1ef      	bne.n	80033e6 <HAL_RCC_ClockConfig+0x15e>
 8003406:	e00e      	b.n	8003426 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003408:	f7ff f954 	bl	80026b4 <HAL_GetTick>
 800340c:	0002      	movs	r2, r0
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	4a3a      	ldr	r2, [pc, #232]	@ (80034fc <HAL_RCC_ClockConfig+0x274>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d901      	bls.n	800341c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e068      	b.n	80034ee <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800341c:	4b38      	ldr	r3, [pc, #224]	@ (8003500 <HAL_RCC_ClockConfig+0x278>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	220c      	movs	r2, #12
 8003422:	4013      	ands	r3, r2
 8003424:	d1f0      	bne.n	8003408 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003426:	4b34      	ldr	r3, [pc, #208]	@ (80034f8 <HAL_RCC_ClockConfig+0x270>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2201      	movs	r2, #1
 800342c:	4013      	ands	r3, r2
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	429a      	cmp	r2, r3
 8003432:	d21e      	bcs.n	8003472 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003434:	4b30      	ldr	r3, [pc, #192]	@ (80034f8 <HAL_RCC_ClockConfig+0x270>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2201      	movs	r2, #1
 800343a:	4393      	bics	r3, r2
 800343c:	0019      	movs	r1, r3
 800343e:	4b2e      	ldr	r3, [pc, #184]	@ (80034f8 <HAL_RCC_ClockConfig+0x270>)
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003446:	f7ff f935 	bl	80026b4 <HAL_GetTick>
 800344a:	0003      	movs	r3, r0
 800344c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800344e:	e009      	b.n	8003464 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003450:	f7ff f930 	bl	80026b4 <HAL_GetTick>
 8003454:	0002      	movs	r2, r0
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	4a28      	ldr	r2, [pc, #160]	@ (80034fc <HAL_RCC_ClockConfig+0x274>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e044      	b.n	80034ee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003464:	4b24      	ldr	r3, [pc, #144]	@ (80034f8 <HAL_RCC_ClockConfig+0x270>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2201      	movs	r2, #1
 800346a:	4013      	ands	r3, r2
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	429a      	cmp	r2, r3
 8003470:	d1ee      	bne.n	8003450 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2204      	movs	r2, #4
 8003478:	4013      	ands	r3, r2
 800347a:	d009      	beq.n	8003490 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800347c:	4b20      	ldr	r3, [pc, #128]	@ (8003500 <HAL_RCC_ClockConfig+0x278>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	4a20      	ldr	r2, [pc, #128]	@ (8003504 <HAL_RCC_ClockConfig+0x27c>)
 8003482:	4013      	ands	r3, r2
 8003484:	0019      	movs	r1, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	4b1d      	ldr	r3, [pc, #116]	@ (8003500 <HAL_RCC_ClockConfig+0x278>)
 800348c:	430a      	orrs	r2, r1
 800348e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2208      	movs	r2, #8
 8003496:	4013      	ands	r3, r2
 8003498:	d00a      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800349a:	4b19      	ldr	r3, [pc, #100]	@ (8003500 <HAL_RCC_ClockConfig+0x278>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	4a1a      	ldr	r2, [pc, #104]	@ (8003508 <HAL_RCC_ClockConfig+0x280>)
 80034a0:	4013      	ands	r3, r2
 80034a2:	0019      	movs	r1, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	00da      	lsls	r2, r3, #3
 80034aa:	4b15      	ldr	r3, [pc, #84]	@ (8003500 <HAL_RCC_ClockConfig+0x278>)
 80034ac:	430a      	orrs	r2, r1
 80034ae:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034b0:	f000 f832 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 80034b4:	0001      	movs	r1, r0
 80034b6:	4b12      	ldr	r3, [pc, #72]	@ (8003500 <HAL_RCC_ClockConfig+0x278>)
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	091b      	lsrs	r3, r3, #4
 80034bc:	220f      	movs	r2, #15
 80034be:	4013      	ands	r3, r2
 80034c0:	4a12      	ldr	r2, [pc, #72]	@ (800350c <HAL_RCC_ClockConfig+0x284>)
 80034c2:	5cd3      	ldrb	r3, [r2, r3]
 80034c4:	000a      	movs	r2, r1
 80034c6:	40da      	lsrs	r2, r3
 80034c8:	4b11      	ldr	r3, [pc, #68]	@ (8003510 <HAL_RCC_ClockConfig+0x288>)
 80034ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80034cc:	4b11      	ldr	r3, [pc, #68]	@ (8003514 <HAL_RCC_ClockConfig+0x28c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	250b      	movs	r5, #11
 80034d2:	197c      	adds	r4, r7, r5
 80034d4:	0018      	movs	r0, r3
 80034d6:	f7ff f8a7 	bl	8002628 <HAL_InitTick>
 80034da:	0003      	movs	r3, r0
 80034dc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80034de:	197b      	adds	r3, r7, r5
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d002      	beq.n	80034ec <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80034e6:	197b      	adds	r3, r7, r5
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	e000      	b.n	80034ee <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	0018      	movs	r0, r3
 80034f0:	46bd      	mov	sp, r7
 80034f2:	b004      	add	sp, #16
 80034f4:	bdb0      	pop	{r4, r5, r7, pc}
 80034f6:	46c0      	nop			@ (mov r8, r8)
 80034f8:	40022000 	.word	0x40022000
 80034fc:	00001388 	.word	0x00001388
 8003500:	40021000 	.word	0x40021000
 8003504:	fffff8ff 	.word	0xfffff8ff
 8003508:	ffffc7ff 	.word	0xffffc7ff
 800350c:	08005924 	.word	0x08005924
 8003510:	20000000 	.word	0x20000000
 8003514:	20000004 	.word	0x20000004

08003518 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800351e:	4b3c      	ldr	r3, [pc, #240]	@ (8003610 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	220c      	movs	r2, #12
 8003528:	4013      	ands	r3, r2
 800352a:	2b0c      	cmp	r3, #12
 800352c:	d013      	beq.n	8003556 <HAL_RCC_GetSysClockFreq+0x3e>
 800352e:	d85c      	bhi.n	80035ea <HAL_RCC_GetSysClockFreq+0xd2>
 8003530:	2b04      	cmp	r3, #4
 8003532:	d002      	beq.n	800353a <HAL_RCC_GetSysClockFreq+0x22>
 8003534:	2b08      	cmp	r3, #8
 8003536:	d00b      	beq.n	8003550 <HAL_RCC_GetSysClockFreq+0x38>
 8003538:	e057      	b.n	80035ea <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800353a:	4b35      	ldr	r3, [pc, #212]	@ (8003610 <HAL_RCC_GetSysClockFreq+0xf8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2210      	movs	r2, #16
 8003540:	4013      	ands	r3, r2
 8003542:	d002      	beq.n	800354a <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003544:	4b33      	ldr	r3, [pc, #204]	@ (8003614 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003546:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003548:	e05d      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800354a:	4b33      	ldr	r3, [pc, #204]	@ (8003618 <HAL_RCC_GetSysClockFreq+0x100>)
 800354c:	613b      	str	r3, [r7, #16]
      break;
 800354e:	e05a      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003550:	4b32      	ldr	r3, [pc, #200]	@ (800361c <HAL_RCC_GetSysClockFreq+0x104>)
 8003552:	613b      	str	r3, [r7, #16]
      break;
 8003554:	e057      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	0c9b      	lsrs	r3, r3, #18
 800355a:	220f      	movs	r2, #15
 800355c:	4013      	ands	r3, r2
 800355e:	4a30      	ldr	r2, [pc, #192]	@ (8003620 <HAL_RCC_GetSysClockFreq+0x108>)
 8003560:	5cd3      	ldrb	r3, [r2, r3]
 8003562:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	0d9b      	lsrs	r3, r3, #22
 8003568:	2203      	movs	r2, #3
 800356a:	4013      	ands	r3, r2
 800356c:	3301      	adds	r3, #1
 800356e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003570:	4b27      	ldr	r3, [pc, #156]	@ (8003610 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003572:	68da      	ldr	r2, [r3, #12]
 8003574:	2380      	movs	r3, #128	@ 0x80
 8003576:	025b      	lsls	r3, r3, #9
 8003578:	4013      	ands	r3, r2
 800357a:	d00f      	beq.n	800359c <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 800357c:	68b9      	ldr	r1, [r7, #8]
 800357e:	000a      	movs	r2, r1
 8003580:	0152      	lsls	r2, r2, #5
 8003582:	1a52      	subs	r2, r2, r1
 8003584:	0193      	lsls	r3, r2, #6
 8003586:	1a9b      	subs	r3, r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	185b      	adds	r3, r3, r1
 800358c:	025b      	lsls	r3, r3, #9
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	0018      	movs	r0, r3
 8003592:	f7fc fdcb 	bl	800012c <__udivsi3>
 8003596:	0003      	movs	r3, r0
 8003598:	617b      	str	r3, [r7, #20]
 800359a:	e023      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800359c:	4b1c      	ldr	r3, [pc, #112]	@ (8003610 <HAL_RCC_GetSysClockFreq+0xf8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2210      	movs	r2, #16
 80035a2:	4013      	ands	r3, r2
 80035a4:	d00f      	beq.n	80035c6 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 80035a6:	68b9      	ldr	r1, [r7, #8]
 80035a8:	000a      	movs	r2, r1
 80035aa:	0152      	lsls	r2, r2, #5
 80035ac:	1a52      	subs	r2, r2, r1
 80035ae:	0193      	lsls	r3, r2, #6
 80035b0:	1a9b      	subs	r3, r3, r2
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	185b      	adds	r3, r3, r1
 80035b6:	021b      	lsls	r3, r3, #8
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	0018      	movs	r0, r3
 80035bc:	f7fc fdb6 	bl	800012c <__udivsi3>
 80035c0:	0003      	movs	r3, r0
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	e00e      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80035c6:	68b9      	ldr	r1, [r7, #8]
 80035c8:	000a      	movs	r2, r1
 80035ca:	0152      	lsls	r2, r2, #5
 80035cc:	1a52      	subs	r2, r2, r1
 80035ce:	0193      	lsls	r3, r2, #6
 80035d0:	1a9b      	subs	r3, r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	185b      	adds	r3, r3, r1
 80035d6:	029b      	lsls	r3, r3, #10
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	0018      	movs	r0, r3
 80035dc:	f7fc fda6 	bl	800012c <__udivsi3>
 80035e0:	0003      	movs	r3, r0
 80035e2:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	613b      	str	r3, [r7, #16]
      break;
 80035e8:	e00d      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80035ea:	4b09      	ldr	r3, [pc, #36]	@ (8003610 <HAL_RCC_GetSysClockFreq+0xf8>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	0b5b      	lsrs	r3, r3, #13
 80035f0:	2207      	movs	r2, #7
 80035f2:	4013      	ands	r3, r2
 80035f4:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	3301      	adds	r3, #1
 80035fa:	2280      	movs	r2, #128	@ 0x80
 80035fc:	0212      	lsls	r2, r2, #8
 80035fe:	409a      	lsls	r2, r3
 8003600:	0013      	movs	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
      break;
 8003604:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003606:	693b      	ldr	r3, [r7, #16]
}
 8003608:	0018      	movs	r0, r3
 800360a:	46bd      	mov	sp, r7
 800360c:	b006      	add	sp, #24
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40021000 	.word	0x40021000
 8003614:	003d0900 	.word	0x003d0900
 8003618:	00f42400 	.word	0x00f42400
 800361c:	007a1200 	.word	0x007a1200
 8003620:	0800593c 	.word	0x0800593c

08003624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003628:	4b02      	ldr	r3, [pc, #8]	@ (8003634 <HAL_RCC_GetHCLKFreq+0x10>)
 800362a:	681b      	ldr	r3, [r3, #0]
}
 800362c:	0018      	movs	r0, r3
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	46c0      	nop			@ (mov r8, r8)
 8003634:	20000000 	.word	0x20000000

08003638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800363c:	f7ff fff2 	bl	8003624 <HAL_RCC_GetHCLKFreq>
 8003640:	0001      	movs	r1, r0
 8003642:	4b06      	ldr	r3, [pc, #24]	@ (800365c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	0a1b      	lsrs	r3, r3, #8
 8003648:	2207      	movs	r2, #7
 800364a:	4013      	ands	r3, r2
 800364c:	4a04      	ldr	r2, [pc, #16]	@ (8003660 <HAL_RCC_GetPCLK1Freq+0x28>)
 800364e:	5cd3      	ldrb	r3, [r2, r3]
 8003650:	40d9      	lsrs	r1, r3
 8003652:	000b      	movs	r3, r1
}
 8003654:	0018      	movs	r0, r3
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	46c0      	nop			@ (mov r8, r8)
 800365c:	40021000 	.word	0x40021000
 8003660:	08005934 	.word	0x08005934

08003664 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003668:	f7ff ffdc 	bl	8003624 <HAL_RCC_GetHCLKFreq>
 800366c:	0001      	movs	r1, r0
 800366e:	4b06      	ldr	r3, [pc, #24]	@ (8003688 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	0adb      	lsrs	r3, r3, #11
 8003674:	2207      	movs	r2, #7
 8003676:	4013      	ands	r3, r2
 8003678:	4a04      	ldr	r2, [pc, #16]	@ (800368c <HAL_RCC_GetPCLK2Freq+0x28>)
 800367a:	5cd3      	ldrb	r3, [r2, r3]
 800367c:	40d9      	lsrs	r1, r3
 800367e:	000b      	movs	r3, r1
}
 8003680:	0018      	movs	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	46c0      	nop			@ (mov r8, r8)
 8003688:	40021000 	.word	0x40021000
 800368c:	08005934 	.word	0x08005934

08003690 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003698:	2017      	movs	r0, #23
 800369a:	183b      	adds	r3, r7, r0
 800369c:	2200      	movs	r2, #0
 800369e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2220      	movs	r2, #32
 80036a6:	4013      	ands	r3, r2
 80036a8:	d100      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80036aa:	e0c7      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ac:	4b84      	ldr	r3, [pc, #528]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80036ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036b0:	2380      	movs	r3, #128	@ 0x80
 80036b2:	055b      	lsls	r3, r3, #21
 80036b4:	4013      	ands	r3, r2
 80036b6:	d109      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036b8:	4b81      	ldr	r3, [pc, #516]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80036ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036bc:	4b80      	ldr	r3, [pc, #512]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80036be:	2180      	movs	r1, #128	@ 0x80
 80036c0:	0549      	lsls	r1, r1, #21
 80036c2:	430a      	orrs	r2, r1
 80036c4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80036c6:	183b      	adds	r3, r7, r0
 80036c8:	2201      	movs	r2, #1
 80036ca:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036cc:	4b7d      	ldr	r3, [pc, #500]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	2380      	movs	r3, #128	@ 0x80
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	4013      	ands	r3, r2
 80036d6:	d11a      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036d8:	4b7a      	ldr	r3, [pc, #488]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	4b79      	ldr	r3, [pc, #484]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80036de:	2180      	movs	r1, #128	@ 0x80
 80036e0:	0049      	lsls	r1, r1, #1
 80036e2:	430a      	orrs	r2, r1
 80036e4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036e6:	f7fe ffe5 	bl	80026b4 <HAL_GetTick>
 80036ea:	0003      	movs	r3, r0
 80036ec:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ee:	e008      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036f0:	f7fe ffe0 	bl	80026b4 <HAL_GetTick>
 80036f4:	0002      	movs	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b64      	cmp	r3, #100	@ 0x64
 80036fc:	d901      	bls.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e0d9      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003702:	4b70      	ldr	r3, [pc, #448]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	2380      	movs	r3, #128	@ 0x80
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	4013      	ands	r3, r2
 800370c:	d0f0      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800370e:	4b6c      	ldr	r3, [pc, #432]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	23c0      	movs	r3, #192	@ 0xc0
 8003714:	039b      	lsls	r3, r3, #14
 8003716:	4013      	ands	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	23c0      	movs	r3, #192	@ 0xc0
 8003720:	039b      	lsls	r3, r3, #14
 8003722:	4013      	ands	r3, r2
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	429a      	cmp	r2, r3
 8003728:	d013      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	23c0      	movs	r3, #192	@ 0xc0
 8003730:	029b      	lsls	r3, r3, #10
 8003732:	401a      	ands	r2, r3
 8003734:	23c0      	movs	r3, #192	@ 0xc0
 8003736:	029b      	lsls	r3, r3, #10
 8003738:	429a      	cmp	r2, r3
 800373a:	d10a      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800373c:	4b60      	ldr	r3, [pc, #384]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	2380      	movs	r3, #128	@ 0x80
 8003742:	029b      	lsls	r3, r3, #10
 8003744:	401a      	ands	r2, r3
 8003746:	2380      	movs	r3, #128	@ 0x80
 8003748:	029b      	lsls	r3, r3, #10
 800374a:	429a      	cmp	r2, r3
 800374c:	d101      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e0b1      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003752:	4b5b      	ldr	r3, [pc, #364]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003754:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003756:	23c0      	movs	r3, #192	@ 0xc0
 8003758:	029b      	lsls	r3, r3, #10
 800375a:	4013      	ands	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d03b      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	23c0      	movs	r3, #192	@ 0xc0
 800376a:	029b      	lsls	r3, r3, #10
 800376c:	4013      	ands	r3, r2
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	429a      	cmp	r2, r3
 8003772:	d033      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2220      	movs	r2, #32
 800377a:	4013      	ands	r3, r2
 800377c:	d02e      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800377e:	4b50      	ldr	r3, [pc, #320]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003780:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003782:	4a51      	ldr	r2, [pc, #324]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003784:	4013      	ands	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003788:	4b4d      	ldr	r3, [pc, #308]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800378a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800378c:	4b4c      	ldr	r3, [pc, #304]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800378e:	2180      	movs	r1, #128	@ 0x80
 8003790:	0309      	lsls	r1, r1, #12
 8003792:	430a      	orrs	r2, r1
 8003794:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003796:	4b4a      	ldr	r3, [pc, #296]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003798:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800379a:	4b49      	ldr	r3, [pc, #292]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800379c:	494b      	ldr	r1, [pc, #300]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800379e:	400a      	ands	r2, r1
 80037a0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80037a2:	4b47      	ldr	r3, [pc, #284]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	2380      	movs	r3, #128	@ 0x80
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	4013      	ands	r3, r2
 80037b0:	d014      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b2:	f7fe ff7f 	bl	80026b4 <HAL_GetTick>
 80037b6:	0003      	movs	r3, r0
 80037b8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037ba:	e009      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037bc:	f7fe ff7a 	bl	80026b4 <HAL_GetTick>
 80037c0:	0002      	movs	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	4a42      	ldr	r2, [pc, #264]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e072      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037d0:	4b3b      	ldr	r3, [pc, #236]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80037d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80037d4:	2380      	movs	r3, #128	@ 0x80
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4013      	ands	r3, r2
 80037da:	d0ef      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2220      	movs	r2, #32
 80037e2:	4013      	ands	r3, r2
 80037e4:	d01f      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	23c0      	movs	r3, #192	@ 0xc0
 80037ec:	029b      	lsls	r3, r3, #10
 80037ee:	401a      	ands	r2, r3
 80037f0:	23c0      	movs	r3, #192	@ 0xc0
 80037f2:	029b      	lsls	r3, r3, #10
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d10c      	bne.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80037f8:	4b31      	ldr	r3, [pc, #196]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a35      	ldr	r2, [pc, #212]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80037fe:	4013      	ands	r3, r2
 8003800:	0019      	movs	r1, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	23c0      	movs	r3, #192	@ 0xc0
 8003808:	039b      	lsls	r3, r3, #14
 800380a:	401a      	ands	r2, r3
 800380c:	4b2c      	ldr	r3, [pc, #176]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800380e:	430a      	orrs	r2, r1
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	4b2b      	ldr	r3, [pc, #172]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003814:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	23c0      	movs	r3, #192	@ 0xc0
 800381c:	029b      	lsls	r3, r3, #10
 800381e:	401a      	ands	r2, r3
 8003820:	4b27      	ldr	r3, [pc, #156]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003822:	430a      	orrs	r2, r1
 8003824:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003826:	2317      	movs	r3, #23
 8003828:	18fb      	adds	r3, r7, r3
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d105      	bne.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003830:	4b23      	ldr	r3, [pc, #140]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003832:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003834:	4b22      	ldr	r3, [pc, #136]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003836:	4928      	ldr	r1, [pc, #160]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003838:	400a      	ands	r2, r1
 800383a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2202      	movs	r2, #2
 8003842:	4013      	ands	r3, r2
 8003844:	d009      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003846:	4b1e      	ldr	r3, [pc, #120]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800384a:	220c      	movs	r2, #12
 800384c:	4393      	bics	r3, r2
 800384e:	0019      	movs	r1, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	4b1a      	ldr	r3, [pc, #104]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003856:	430a      	orrs	r2, r1
 8003858:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2204      	movs	r2, #4
 8003860:	4013      	ands	r3, r2
 8003862:	d009      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003864:	4b16      	ldr	r3, [pc, #88]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003868:	4a1c      	ldr	r2, [pc, #112]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800386a:	4013      	ands	r3, r2
 800386c:	0019      	movs	r1, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	4b13      	ldr	r3, [pc, #76]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003874:	430a      	orrs	r2, r1
 8003876:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2208      	movs	r2, #8
 800387e:	4013      	ands	r3, r2
 8003880:	d009      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003882:	4b0f      	ldr	r3, [pc, #60]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003886:	4a16      	ldr	r2, [pc, #88]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003888:	4013      	ands	r3, r2
 800388a:	0019      	movs	r1, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691a      	ldr	r2, [r3, #16]
 8003890:	4b0b      	ldr	r3, [pc, #44]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003892:	430a      	orrs	r2, r1
 8003894:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2280      	movs	r2, #128	@ 0x80
 800389c:	4013      	ands	r3, r2
 800389e:	d009      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80038a0:	4b07      	ldr	r3, [pc, #28]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038a4:	4a0f      	ldr	r2, [pc, #60]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	0019      	movs	r1, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695a      	ldr	r2, [r3, #20]
 80038ae:	4b04      	ldr	r3, [pc, #16]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80038b0:	430a      	orrs	r2, r1
 80038b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	0018      	movs	r0, r3
 80038b8:	46bd      	mov	sp, r7
 80038ba:	b006      	add	sp, #24
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	46c0      	nop			@ (mov r8, r8)
 80038c0:	40021000 	.word	0x40021000
 80038c4:	40007000 	.word	0x40007000
 80038c8:	fffcffff 	.word	0xfffcffff
 80038cc:	fff7ffff 	.word	0xfff7ffff
 80038d0:	00001388 	.word	0x00001388
 80038d4:	ffcfffff 	.word	0xffcfffff
 80038d8:	efffffff 	.word	0xefffffff
 80038dc:	fffff3ff 	.word	0xfffff3ff
 80038e0:	ffffcfff 	.word	0xffffcfff
 80038e4:	fff3ffff 	.word	0xfff3ffff

080038e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e032      	b.n	8003960 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2239      	movs	r2, #57	@ 0x39
 80038fe:	5c9b      	ldrb	r3, [r3, r2]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d107      	bne.n	8003916 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2238      	movs	r2, #56	@ 0x38
 800390a:	2100      	movs	r1, #0
 800390c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	0018      	movs	r0, r3
 8003912:	f7fe fd47 	bl	80023a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2239      	movs	r2, #57	@ 0x39
 800391a:	2102      	movs	r1, #2
 800391c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	3304      	adds	r3, #4
 8003926:	0019      	movs	r1, r3
 8003928:	0010      	movs	r0, r2
 800392a:	f000 fad1 	bl	8003ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	223e      	movs	r2, #62	@ 0x3e
 8003932:	2101      	movs	r1, #1
 8003934:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	223a      	movs	r2, #58	@ 0x3a
 800393a:	2101      	movs	r1, #1
 800393c:	5499      	strb	r1, [r3, r2]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	223b      	movs	r2, #59	@ 0x3b
 8003942:	2101      	movs	r1, #1
 8003944:	5499      	strb	r1, [r3, r2]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	223c      	movs	r2, #60	@ 0x3c
 800394a:	2101      	movs	r1, #1
 800394c:	5499      	strb	r1, [r3, r2]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	223d      	movs	r2, #61	@ 0x3d
 8003952:	2101      	movs	r1, #1
 8003954:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2239      	movs	r2, #57	@ 0x39
 800395a:	2101      	movs	r1, #1
 800395c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	0018      	movs	r0, r3
 8003962:	46bd      	mov	sp, r7
 8003964:	b002      	add	sp, #8
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e032      	b.n	80039e0 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2239      	movs	r2, #57	@ 0x39
 800397e:	5c9b      	ldrb	r3, [r3, r2]
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d107      	bne.n	8003996 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2238      	movs	r2, #56	@ 0x38
 800398a:	2100      	movs	r1, #0
 800398c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	0018      	movs	r0, r3
 8003992:	f000 f829 	bl	80039e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2239      	movs	r2, #57	@ 0x39
 800399a:	2102      	movs	r1, #2
 800399c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3304      	adds	r3, #4
 80039a6:	0019      	movs	r1, r3
 80039a8:	0010      	movs	r0, r2
 80039aa:	f000 fa91 	bl	8003ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	223e      	movs	r2, #62	@ 0x3e
 80039b2:	2101      	movs	r1, #1
 80039b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	223a      	movs	r2, #58	@ 0x3a
 80039ba:	2101      	movs	r1, #1
 80039bc:	5499      	strb	r1, [r3, r2]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	223b      	movs	r2, #59	@ 0x3b
 80039c2:	2101      	movs	r1, #1
 80039c4:	5499      	strb	r1, [r3, r2]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	223c      	movs	r2, #60	@ 0x3c
 80039ca:	2101      	movs	r1, #1
 80039cc:	5499      	strb	r1, [r3, r2]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	223d      	movs	r2, #61	@ 0x3d
 80039d2:	2101      	movs	r1, #1
 80039d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2239      	movs	r2, #57	@ 0x39
 80039da:	2101      	movs	r1, #1
 80039dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	0018      	movs	r0, r3
 80039e2:	46bd      	mov	sp, r7
 80039e4:	b002      	add	sp, #8
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039f0:	46c0      	nop			@ (mov r8, r8)
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b002      	add	sp, #8
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d108      	bne.n	8003a1a <HAL_TIM_PWM_Start+0x22>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	223a      	movs	r2, #58	@ 0x3a
 8003a0c:	5c9b      	ldrb	r3, [r3, r2]
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	3b01      	subs	r3, #1
 8003a12:	1e5a      	subs	r2, r3, #1
 8003a14:	4193      	sbcs	r3, r2
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	e01f      	b.n	8003a5a <HAL_TIM_PWM_Start+0x62>
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d108      	bne.n	8003a32 <HAL_TIM_PWM_Start+0x3a>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	223b      	movs	r2, #59	@ 0x3b
 8003a24:	5c9b      	ldrb	r3, [r3, r2]
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	1e5a      	subs	r2, r3, #1
 8003a2c:	4193      	sbcs	r3, r2
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	e013      	b.n	8003a5a <HAL_TIM_PWM_Start+0x62>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d108      	bne.n	8003a4a <HAL_TIM_PWM_Start+0x52>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	223c      	movs	r2, #60	@ 0x3c
 8003a3c:	5c9b      	ldrb	r3, [r3, r2]
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	3b01      	subs	r3, #1
 8003a42:	1e5a      	subs	r2, r3, #1
 8003a44:	4193      	sbcs	r3, r2
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	e007      	b.n	8003a5a <HAL_TIM_PWM_Start+0x62>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	223d      	movs	r2, #61	@ 0x3d
 8003a4e:	5c9b      	ldrb	r3, [r3, r2]
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	3b01      	subs	r3, #1
 8003a54:	1e5a      	subs	r2, r3, #1
 8003a56:	4193      	sbcs	r3, r2
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e04d      	b.n	8003afe <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d104      	bne.n	8003a72 <HAL_TIM_PWM_Start+0x7a>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	223a      	movs	r2, #58	@ 0x3a
 8003a6c:	2102      	movs	r1, #2
 8003a6e:	5499      	strb	r1, [r3, r2]
 8003a70:	e013      	b.n	8003a9a <HAL_TIM_PWM_Start+0xa2>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d104      	bne.n	8003a82 <HAL_TIM_PWM_Start+0x8a>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	223b      	movs	r2, #59	@ 0x3b
 8003a7c:	2102      	movs	r1, #2
 8003a7e:	5499      	strb	r1, [r3, r2]
 8003a80:	e00b      	b.n	8003a9a <HAL_TIM_PWM_Start+0xa2>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d104      	bne.n	8003a92 <HAL_TIM_PWM_Start+0x9a>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	223c      	movs	r2, #60	@ 0x3c
 8003a8c:	2102      	movs	r1, #2
 8003a8e:	5499      	strb	r1, [r3, r2]
 8003a90:	e003      	b.n	8003a9a <HAL_TIM_PWM_Start+0xa2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	223d      	movs	r2, #61	@ 0x3d
 8003a96:	2102      	movs	r1, #2
 8003a98:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	6839      	ldr	r1, [r7, #0]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	f000 fc9e 	bl	80043e4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	2380      	movs	r3, #128	@ 0x80
 8003aae:	05db      	lsls	r3, r3, #23
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d009      	beq.n	8003ac8 <HAL_TIM_PWM_Start+0xd0>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a13      	ldr	r2, [pc, #76]	@ (8003b08 <HAL_TIM_PWM_Start+0x110>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d004      	beq.n	8003ac8 <HAL_TIM_PWM_Start+0xd0>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a12      	ldr	r2, [pc, #72]	@ (8003b0c <HAL_TIM_PWM_Start+0x114>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d111      	bne.n	8003aec <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	2207      	movs	r2, #7
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2b06      	cmp	r3, #6
 8003ad8:	d010      	beq.n	8003afc <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aea:	e007      	b.n	8003afc <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2101      	movs	r1, #1
 8003af8:	430a      	orrs	r2, r1
 8003afa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	0018      	movs	r0, r3
 8003b00:	46bd      	mov	sp, r7
 8003b02:	b004      	add	sp, #16
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	46c0      	nop			@ (mov r8, r8)
 8003b08:	40010800 	.word	0x40010800
 8003b0c:	40011400 	.word	0x40011400

08003b10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b1c:	2317      	movs	r3, #23
 8003b1e:	18fb      	adds	r3, r7, r3
 8003b20:	2200      	movs	r2, #0
 8003b22:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2238      	movs	r2, #56	@ 0x38
 8003b28:	5c9b      	ldrb	r3, [r3, r2]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e0ad      	b.n	8003c8e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2238      	movs	r2, #56	@ 0x38
 8003b36:	2101      	movs	r1, #1
 8003b38:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b0c      	cmp	r3, #12
 8003b3e:	d100      	bne.n	8003b42 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003b40:	e076      	b.n	8003c30 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b0c      	cmp	r3, #12
 8003b46:	d900      	bls.n	8003b4a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003b48:	e095      	b.n	8003c76 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d04e      	beq.n	8003bee <HAL_TIM_PWM_ConfigChannel+0xde>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b08      	cmp	r3, #8
 8003b54:	d900      	bls.n	8003b58 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003b56:	e08e      	b.n	8003c76 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_TIM_PWM_ConfigChannel+0x56>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d021      	beq.n	8003ba8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003b64:	e087      	b.n	8003c76 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	0011      	movs	r1, r2
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f000 fa08 	bl	8003f84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699a      	ldr	r2, [r3, #24]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2108      	movs	r1, #8
 8003b80:	430a      	orrs	r2, r1
 8003b82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699a      	ldr	r2, [r3, #24]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2104      	movs	r1, #4
 8003b90:	438a      	bics	r2, r1
 8003b92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6999      	ldr	r1, [r3, #24]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	619a      	str	r2, [r3, #24]
      break;
 8003ba6:	e06b      	b.n	8003c80 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	0011      	movs	r1, r2
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f000 fa23 	bl	8003ffc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	699a      	ldr	r2, [r3, #24]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2180      	movs	r1, #128	@ 0x80
 8003bc2:	0109      	lsls	r1, r1, #4
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	699a      	ldr	r2, [r3, #24]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4931      	ldr	r1, [pc, #196]	@ (8003c98 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003bd4:	400a      	ands	r2, r1
 8003bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6999      	ldr	r1, [r3, #24]
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	021a      	lsls	r2, r3, #8
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	619a      	str	r2, [r3, #24]
      break;
 8003bec:	e048      	b.n	8003c80 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	0011      	movs	r1, r2
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f000 fa42 	bl	8004080 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	69da      	ldr	r2, [r3, #28]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2108      	movs	r1, #8
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	69da      	ldr	r2, [r3, #28]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2104      	movs	r1, #4
 8003c18:	438a      	bics	r2, r1
 8003c1a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	69d9      	ldr	r1, [r3, #28]
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	68da      	ldr	r2, [r3, #12]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	61da      	str	r2, [r3, #28]
      break;
 8003c2e:	e027      	b.n	8003c80 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	0011      	movs	r1, r2
 8003c38:	0018      	movs	r0, r3
 8003c3a:	f000 fa61 	bl	8004100 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	69da      	ldr	r2, [r3, #28]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2180      	movs	r1, #128	@ 0x80
 8003c4a:	0109      	lsls	r1, r1, #4
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	69da      	ldr	r2, [r3, #28]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	490f      	ldr	r1, [pc, #60]	@ (8003c98 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003c5c:	400a      	ands	r2, r1
 8003c5e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	69d9      	ldr	r1, [r3, #28]
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	021a      	lsls	r2, r3, #8
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	61da      	str	r2, [r3, #28]
      break;
 8003c74:	e004      	b.n	8003c80 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003c76:	2317      	movs	r3, #23
 8003c78:	18fb      	adds	r3, r7, r3
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	701a      	strb	r2, [r3, #0]
      break;
 8003c7e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2238      	movs	r2, #56	@ 0x38
 8003c84:	2100      	movs	r1, #0
 8003c86:	5499      	strb	r1, [r3, r2]

  return status;
 8003c88:	2317      	movs	r3, #23
 8003c8a:	18fb      	adds	r3, r7, r3
 8003c8c:	781b      	ldrb	r3, [r3, #0]
}
 8003c8e:	0018      	movs	r0, r3
 8003c90:	46bd      	mov	sp, r7
 8003c92:	b006      	add	sp, #24
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	46c0      	nop			@ (mov r8, r8)
 8003c98:	fffffbff 	.word	0xfffffbff

08003c9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca6:	230f      	movs	r3, #15
 8003ca8:	18fb      	adds	r3, r7, r3
 8003caa:	2200      	movs	r2, #0
 8003cac:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2238      	movs	r2, #56	@ 0x38
 8003cb2:	5c9b      	ldrb	r3, [r3, r2]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d101      	bne.n	8003cbc <HAL_TIM_ConfigClockSource+0x20>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	e0bc      	b.n	8003e36 <HAL_TIM_ConfigClockSource+0x19a>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2238      	movs	r2, #56	@ 0x38
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2239      	movs	r2, #57	@ 0x39
 8003cc8:	2102      	movs	r1, #2
 8003cca:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2277      	movs	r2, #119	@ 0x77
 8003cd8:	4393      	bics	r3, r2
 8003cda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	4a58      	ldr	r2, [pc, #352]	@ (8003e40 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2280      	movs	r2, #128	@ 0x80
 8003cf2:	0192      	lsls	r2, r2, #6
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d040      	beq.n	8003d7a <HAL_TIM_ConfigClockSource+0xde>
 8003cf8:	2280      	movs	r2, #128	@ 0x80
 8003cfa:	0192      	lsls	r2, r2, #6
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d900      	bls.n	8003d02 <HAL_TIM_ConfigClockSource+0x66>
 8003d00:	e088      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x178>
 8003d02:	2280      	movs	r2, #128	@ 0x80
 8003d04:	0152      	lsls	r2, r2, #5
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d100      	bne.n	8003d0c <HAL_TIM_ConfigClockSource+0x70>
 8003d0a:	e088      	b.n	8003e1e <HAL_TIM_ConfigClockSource+0x182>
 8003d0c:	2280      	movs	r2, #128	@ 0x80
 8003d0e:	0152      	lsls	r2, r2, #5
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d900      	bls.n	8003d16 <HAL_TIM_ConfigClockSource+0x7a>
 8003d14:	e07e      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x178>
 8003d16:	2b70      	cmp	r3, #112	@ 0x70
 8003d18:	d018      	beq.n	8003d4c <HAL_TIM_ConfigClockSource+0xb0>
 8003d1a:	d900      	bls.n	8003d1e <HAL_TIM_ConfigClockSource+0x82>
 8003d1c:	e07a      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x178>
 8003d1e:	2b60      	cmp	r3, #96	@ 0x60
 8003d20:	d04f      	beq.n	8003dc2 <HAL_TIM_ConfigClockSource+0x126>
 8003d22:	d900      	bls.n	8003d26 <HAL_TIM_ConfigClockSource+0x8a>
 8003d24:	e076      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x178>
 8003d26:	2b50      	cmp	r3, #80	@ 0x50
 8003d28:	d03b      	beq.n	8003da2 <HAL_TIM_ConfigClockSource+0x106>
 8003d2a:	d900      	bls.n	8003d2e <HAL_TIM_ConfigClockSource+0x92>
 8003d2c:	e072      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x178>
 8003d2e:	2b40      	cmp	r3, #64	@ 0x40
 8003d30:	d057      	beq.n	8003de2 <HAL_TIM_ConfigClockSource+0x146>
 8003d32:	d900      	bls.n	8003d36 <HAL_TIM_ConfigClockSource+0x9a>
 8003d34:	e06e      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x178>
 8003d36:	2b30      	cmp	r3, #48	@ 0x30
 8003d38:	d063      	beq.n	8003e02 <HAL_TIM_ConfigClockSource+0x166>
 8003d3a:	d86b      	bhi.n	8003e14 <HAL_TIM_ConfigClockSource+0x178>
 8003d3c:	2b20      	cmp	r3, #32
 8003d3e:	d060      	beq.n	8003e02 <HAL_TIM_ConfigClockSource+0x166>
 8003d40:	d868      	bhi.n	8003e14 <HAL_TIM_ConfigClockSource+0x178>
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d05d      	beq.n	8003e02 <HAL_TIM_ConfigClockSource+0x166>
 8003d46:	2b10      	cmp	r3, #16
 8003d48:	d05b      	beq.n	8003e02 <HAL_TIM_ConfigClockSource+0x166>
 8003d4a:	e063      	b.n	8003e14 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d5c:	f000 fb22 	bl	80043a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2277      	movs	r2, #119	@ 0x77
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68ba      	ldr	r2, [r7, #8]
 8003d76:	609a      	str	r2, [r3, #8]
      break;
 8003d78:	e052      	b.n	8003e20 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d8a:	f000 fb0b 	bl	80043a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2180      	movs	r1, #128	@ 0x80
 8003d9a:	01c9      	lsls	r1, r1, #7
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	609a      	str	r2, [r3, #8]
      break;
 8003da0:	e03e      	b.n	8003e20 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dae:	001a      	movs	r2, r3
 8003db0:	f000 fa7e 	bl	80042b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2150      	movs	r1, #80	@ 0x50
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f000 fad8 	bl	8004370 <TIM_ITRx_SetConfig>
      break;
 8003dc0:	e02e      	b.n	8003e20 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dce:	001a      	movs	r2, r3
 8003dd0:	f000 fa9c 	bl	800430c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2160      	movs	r1, #96	@ 0x60
 8003dda:	0018      	movs	r0, r3
 8003ddc:	f000 fac8 	bl	8004370 <TIM_ITRx_SetConfig>
      break;
 8003de0:	e01e      	b.n	8003e20 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dee:	001a      	movs	r2, r3
 8003df0:	f000 fa5e 	bl	80042b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2140      	movs	r1, #64	@ 0x40
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	f000 fab8 	bl	8004370 <TIM_ITRx_SetConfig>
      break;
 8003e00:	e00e      	b.n	8003e20 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	0019      	movs	r1, r3
 8003e0c:	0010      	movs	r0, r2
 8003e0e:	f000 faaf 	bl	8004370 <TIM_ITRx_SetConfig>
      break;
 8003e12:	e005      	b.n	8003e20 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003e14:	230f      	movs	r3, #15
 8003e16:	18fb      	adds	r3, r7, r3
 8003e18:	2201      	movs	r2, #1
 8003e1a:	701a      	strb	r2, [r3, #0]
      break;
 8003e1c:	e000      	b.n	8003e20 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003e1e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2239      	movs	r2, #57	@ 0x39
 8003e24:	2101      	movs	r1, #1
 8003e26:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2238      	movs	r2, #56	@ 0x38
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	5499      	strb	r1, [r3, r2]

  return status;
 8003e30:	230f      	movs	r3, #15
 8003e32:	18fb      	adds	r3, r7, r3
 8003e34:	781b      	ldrb	r3, [r3, #0]
}
 8003e36:	0018      	movs	r0, r3
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b004      	add	sp, #16
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	46c0      	nop			@ (mov r8, r8)
 8003e40:	ffff00ff 	.word	0xffff00ff

08003e44 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2238      	movs	r2, #56	@ 0x38
 8003e52:	5c9b      	ldrb	r3, [r3, r2]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <HAL_TIM_SlaveConfigSynchro+0x18>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e032      	b.n	8003ec2 <HAL_TIM_SlaveConfigSynchro+0x7e>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2238      	movs	r2, #56	@ 0x38
 8003e60:	2101      	movs	r1, #1
 8003e62:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2239      	movs	r2, #57	@ 0x39
 8003e68:	2102      	movs	r1, #2
 8003e6a:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	0011      	movs	r1, r2
 8003e72:	0018      	movs	r0, r3
 8003e74:	f000 f98a 	bl	800418c <TIM_SlaveTimer_SetConfig>
 8003e78:	1e03      	subs	r3, r0, #0
 8003e7a:	d009      	beq.n	8003e90 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2239      	movs	r2, #57	@ 0x39
 8003e80:	2101      	movs	r1, #1
 8003e82:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2238      	movs	r2, #56	@ 0x38
 8003e88:	2100      	movs	r1, #0
 8003e8a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e018      	b.n	8003ec2 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2140      	movs	r1, #64	@ 0x40
 8003e9c:	438a      	bics	r2, r1
 8003e9e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4908      	ldr	r1, [pc, #32]	@ (8003ecc <HAL_TIM_SlaveConfigSynchro+0x88>)
 8003eac:	400a      	ands	r2, r1
 8003eae:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2239      	movs	r2, #57	@ 0x39
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2238      	movs	r2, #56	@ 0x38
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	b002      	add	sp, #8
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	46c0      	nop			@ (mov r8, r8)
 8003ecc:	ffffbfff 	.word	0xffffbfff

08003ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	2380      	movs	r3, #128	@ 0x80
 8003ee4:	05db      	lsls	r3, r3, #23
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d007      	beq.n	8003efa <TIM_Base_SetConfig+0x2a>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a22      	ldr	r2, [pc, #136]	@ (8003f78 <TIM_Base_SetConfig+0xa8>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d003      	beq.n	8003efa <TIM_Base_SetConfig+0x2a>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a21      	ldr	r2, [pc, #132]	@ (8003f7c <TIM_Base_SetConfig+0xac>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d108      	bne.n	8003f0c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2270      	movs	r2, #112	@ 0x70
 8003efe:	4393      	bics	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	2380      	movs	r3, #128	@ 0x80
 8003f10:	05db      	lsls	r3, r3, #23
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d007      	beq.n	8003f26 <TIM_Base_SetConfig+0x56>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a17      	ldr	r2, [pc, #92]	@ (8003f78 <TIM_Base_SetConfig+0xa8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d003      	beq.n	8003f26 <TIM_Base_SetConfig+0x56>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a16      	ldr	r2, [pc, #88]	@ (8003f7c <TIM_Base_SetConfig+0xac>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d108      	bne.n	8003f38 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4a15      	ldr	r2, [pc, #84]	@ (8003f80 <TIM_Base_SetConfig+0xb0>)
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2280      	movs	r2, #128	@ 0x80
 8003f3c:	4393      	bics	r3, r2
 8003f3e:	001a      	movs	r2, r3
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2204      	movs	r2, #4
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	601a      	str	r2, [r3, #0]
}
 8003f70:	46c0      	nop			@ (mov r8, r8)
 8003f72:	46bd      	mov	sp, r7
 8003f74:	b004      	add	sp, #16
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40010800 	.word	0x40010800
 8003f7c:	40011400 	.word	0x40011400
 8003f80:	fffffcff 	.word	0xfffffcff

08003f84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	4393      	bics	r3, r2
 8003f9c:	001a      	movs	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2270      	movs	r2, #112	@ 0x70
 8003fb2:	4393      	bics	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2203      	movs	r2, #3
 8003fba:	4393      	bics	r3, r2
 8003fbc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	4393      	bics	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	621a      	str	r2, [r3, #32]
}
 8003ff4:	46c0      	nop			@ (mov r8, r8)
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	b006      	add	sp, #24
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	2210      	movs	r2, #16
 8004012:	4393      	bics	r3, r2
 8004014:	001a      	movs	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4a13      	ldr	r2, [pc, #76]	@ (8004078 <TIM_OC2_SetConfig+0x7c>)
 800402a:	4013      	ands	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	4a12      	ldr	r2, [pc, #72]	@ (800407c <TIM_OC2_SetConfig+0x80>)
 8004032:	4013      	ands	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	021b      	lsls	r3, r3, #8
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2220      	movs	r2, #32
 8004046:	4393      	bics	r3, r2
 8004048:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	4313      	orrs	r3, r2
 8004054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	621a      	str	r2, [r3, #32]
}
 8004070:	46c0      	nop			@ (mov r8, r8)
 8004072:	46bd      	mov	sp, r7
 8004074:	b006      	add	sp, #24
 8004076:	bd80      	pop	{r7, pc}
 8004078:	ffff8fff 	.word	0xffff8fff
 800407c:	fffffcff 	.word	0xfffffcff

08004080 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	4a18      	ldr	r2, [pc, #96]	@ (80040f8 <TIM_OC3_SetConfig+0x78>)
 8004096:	401a      	ands	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2270      	movs	r2, #112	@ 0x70
 80040ac:	4393      	bics	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2203      	movs	r2, #3
 80040b4:	4393      	bics	r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	4a0d      	ldr	r2, [pc, #52]	@ (80040fc <TIM_OC3_SetConfig+0x7c>)
 80040c6:	4013      	ands	r3, r2
 80040c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	021b      	lsls	r3, r3, #8
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	621a      	str	r2, [r3, #32]
}
 80040f0:	46c0      	nop			@ (mov r8, r8)
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b006      	add	sp, #24
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	fffffeff 	.word	0xfffffeff
 80040fc:	fffffdff 	.word	0xfffffdff

08004100 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	4a19      	ldr	r2, [pc, #100]	@ (800417c <TIM_OC4_SetConfig+0x7c>)
 8004116:	401a      	ands	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4a15      	ldr	r2, [pc, #84]	@ (8004180 <TIM_OC4_SetConfig+0x80>)
 800412c:	4013      	ands	r3, r2
 800412e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4a14      	ldr	r2, [pc, #80]	@ (8004184 <TIM_OC4_SetConfig+0x84>)
 8004134:	4013      	ands	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	021b      	lsls	r3, r3, #8
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	4313      	orrs	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	4a10      	ldr	r2, [pc, #64]	@ (8004188 <TIM_OC4_SetConfig+0x88>)
 8004148:	4013      	ands	r3, r2
 800414a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	031b      	lsls	r3, r3, #12
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	4313      	orrs	r3, r2
 8004156:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	621a      	str	r2, [r3, #32]
}
 8004172:	46c0      	nop			@ (mov r8, r8)
 8004174:	46bd      	mov	sp, r7
 8004176:	b006      	add	sp, #24
 8004178:	bd80      	pop	{r7, pc}
 800417a:	46c0      	nop			@ (mov r8, r8)
 800417c:	ffffefff 	.word	0xffffefff
 8004180:	ffff8fff 	.word	0xffff8fff
 8004184:	fffffcff 	.word	0xfffffcff
 8004188:	ffffdfff 	.word	0xffffdfff

0800418c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004196:	2317      	movs	r3, #23
 8004198:	18fb      	adds	r3, r7, r3
 800419a:	2200      	movs	r2, #0
 800419c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	2270      	movs	r2, #112	@ 0x70
 80041aa:	4393      	bics	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	2207      	movs	r2, #7
 80041bc:	4393      	bics	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2b70      	cmp	r3, #112	@ 0x70
 80041d8:	d015      	beq.n	8004206 <TIM_SlaveTimer_SetConfig+0x7a>
 80041da:	d900      	bls.n	80041de <TIM_SlaveTimer_SetConfig+0x52>
 80041dc:	e05b      	b.n	8004296 <TIM_SlaveTimer_SetConfig+0x10a>
 80041de:	2b60      	cmp	r3, #96	@ 0x60
 80041e0:	d04f      	beq.n	8004282 <TIM_SlaveTimer_SetConfig+0xf6>
 80041e2:	d858      	bhi.n	8004296 <TIM_SlaveTimer_SetConfig+0x10a>
 80041e4:	2b50      	cmp	r3, #80	@ 0x50
 80041e6:	d042      	beq.n	800426e <TIM_SlaveTimer_SetConfig+0xe2>
 80041e8:	d855      	bhi.n	8004296 <TIM_SlaveTimer_SetConfig+0x10a>
 80041ea:	2b40      	cmp	r3, #64	@ 0x40
 80041ec:	d016      	beq.n	800421c <TIM_SlaveTimer_SetConfig+0x90>
 80041ee:	d852      	bhi.n	8004296 <TIM_SlaveTimer_SetConfig+0x10a>
 80041f0:	2b30      	cmp	r3, #48	@ 0x30
 80041f2:	d055      	beq.n	80042a0 <TIM_SlaveTimer_SetConfig+0x114>
 80041f4:	d84f      	bhi.n	8004296 <TIM_SlaveTimer_SetConfig+0x10a>
 80041f6:	2b20      	cmp	r3, #32
 80041f8:	d052      	beq.n	80042a0 <TIM_SlaveTimer_SetConfig+0x114>
 80041fa:	d84c      	bhi.n	8004296 <TIM_SlaveTimer_SetConfig+0x10a>
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d04f      	beq.n	80042a0 <TIM_SlaveTimer_SetConfig+0x114>
 8004200:	2b10      	cmp	r3, #16
 8004202:	d04d      	beq.n	80042a0 <TIM_SlaveTimer_SetConfig+0x114>
 8004204:	e047      	b.n	8004296 <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004216:	f000 f8c5 	bl	80043a4 <TIM_ETR_SetConfig>
      break;
 800421a:	e042      	b.n	80042a2 <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b05      	cmp	r3, #5
 8004222:	d101      	bne.n	8004228 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e03f      	b.n	80042a8 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6a1a      	ldr	r2, [r3, #32]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2101      	movs	r1, #1
 800423c:	438a      	bics	r2, r1
 800423e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	22f0      	movs	r2, #240	@ 0xf0
 800424c:	4393      	bics	r3, r2
 800424e:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	4313      	orrs	r3, r2
 800425a:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	621a      	str	r2, [r3, #32]
      break;
 800426c:	e019      	b.n	80042a2 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800427a:	001a      	movs	r2, r3
 800427c:	f000 f818 	bl	80042b0 <TIM_TI1_ConfigInputStage>
      break;
 8004280:	e00f      	b.n	80042a2 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800428e:	001a      	movs	r2, r3
 8004290:	f000 f83c 	bl	800430c <TIM_TI2_ConfigInputStage>
      break;
 8004294:	e005      	b.n	80042a2 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004296:	2317      	movs	r3, #23
 8004298:	18fb      	adds	r3, r7, r3
 800429a:	2201      	movs	r2, #1
 800429c:	701a      	strb	r2, [r3, #0]
      break;
 800429e:	e000      	b.n	80042a2 <TIM_SlaveTimer_SetConfig+0x116>
      break;
 80042a0:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 80042a2:	2317      	movs	r3, #23
 80042a4:	18fb      	adds	r3, r7, r3
 80042a6:	781b      	ldrb	r3, [r3, #0]
}
 80042a8:	0018      	movs	r0, r3
 80042aa:	46bd      	mov	sp, r7
 80042ac:	b006      	add	sp, #24
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	2201      	movs	r2, #1
 80042c8:	4393      	bics	r3, r2
 80042ca:	001a      	movs	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	22f0      	movs	r2, #240	@ 0xf0
 80042da:	4393      	bics	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	011b      	lsls	r3, r3, #4
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	220a      	movs	r2, #10
 80042ec:	4393      	bics	r3, r2
 80042ee:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	621a      	str	r2, [r3, #32]
}
 8004304:	46c0      	nop			@ (mov r8, r8)
 8004306:	46bd      	mov	sp, r7
 8004308:	b006      	add	sp, #24
 800430a:	bd80      	pop	{r7, pc}

0800430c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	2210      	movs	r2, #16
 8004324:	4393      	bics	r3, r2
 8004326:	001a      	movs	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	4a0d      	ldr	r2, [pc, #52]	@ (800436c <TIM_TI2_ConfigInputStage+0x60>)
 8004336:	4013      	ands	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	031b      	lsls	r3, r3, #12
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	4313      	orrs	r3, r2
 8004342:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	22a0      	movs	r2, #160	@ 0xa0
 8004348:	4393      	bics	r3, r2
 800434a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	4313      	orrs	r3, r2
 8004354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	621a      	str	r2, [r3, #32]
}
 8004362:	46c0      	nop			@ (mov r8, r8)
 8004364:	46bd      	mov	sp, r7
 8004366:	b006      	add	sp, #24
 8004368:	bd80      	pop	{r7, pc}
 800436a:	46c0      	nop			@ (mov r8, r8)
 800436c:	ffff0fff 	.word	0xffff0fff

08004370 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2270      	movs	r2, #112	@ 0x70
 8004384:	4393      	bics	r3, r2
 8004386:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	4313      	orrs	r3, r2
 800438e:	2207      	movs	r2, #7
 8004390:	4313      	orrs	r3, r2
 8004392:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	609a      	str	r2, [r3, #8]
}
 800439a:	46c0      	nop			@ (mov r8, r8)
 800439c:	46bd      	mov	sp, r7
 800439e:	b004      	add	sp, #16
 80043a0:	bd80      	pop	{r7, pc}
	...

080043a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
 80043b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	4a09      	ldr	r2, [pc, #36]	@ (80043e0 <TIM_ETR_SetConfig+0x3c>)
 80043bc:	4013      	ands	r3, r2
 80043be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	021a      	lsls	r2, r3, #8
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	431a      	orrs	r2, r3
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	609a      	str	r2, [r3, #8]
}
 80043d8:	46c0      	nop			@ (mov r8, r8)
 80043da:	46bd      	mov	sp, r7
 80043dc:	b006      	add	sp, #24
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	ffff00ff 	.word	0xffff00ff

080043e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	221f      	movs	r2, #31
 80043f4:	4013      	ands	r3, r2
 80043f6:	2201      	movs	r2, #1
 80043f8:	409a      	lsls	r2, r3
 80043fa:	0013      	movs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	43d2      	mvns	r2, r2
 8004406:	401a      	ands	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a1a      	ldr	r2, [r3, #32]
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	211f      	movs	r1, #31
 8004414:	400b      	ands	r3, r1
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	4099      	lsls	r1, r3
 800441a:	000b      	movs	r3, r1
 800441c:	431a      	orrs	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	621a      	str	r2, [r3, #32]
}
 8004422:	46c0      	nop			@ (mov r8, r8)
 8004424:	46bd      	mov	sp, r7
 8004426:	b006      	add	sp, #24
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2238      	movs	r2, #56	@ 0x38
 800443a:	5c9b      	ldrb	r3, [r3, r2]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d101      	bne.n	8004444 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004440:	2302      	movs	r3, #2
 8004442:	e042      	b.n	80044ca <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2238      	movs	r2, #56	@ 0x38
 8004448:	2101      	movs	r1, #1
 800444a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2239      	movs	r2, #57	@ 0x39
 8004450:	2102      	movs	r1, #2
 8004452:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2270      	movs	r2, #112	@ 0x70
 8004468:	4393      	bics	r3, r2
 800446a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	2380      	movs	r3, #128	@ 0x80
 8004484:	05db      	lsls	r3, r3, #23
 8004486:	429a      	cmp	r2, r3
 8004488:	d009      	beq.n	800449e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a11      	ldr	r2, [pc, #68]	@ (80044d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d004      	beq.n	800449e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a0f      	ldr	r2, [pc, #60]	@ (80044d8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d10c      	bne.n	80044b8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2280      	movs	r2, #128	@ 0x80
 80044a2:	4393      	bics	r3, r2
 80044a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2239      	movs	r2, #57	@ 0x39
 80044bc:	2101      	movs	r1, #1
 80044be:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2238      	movs	r2, #56	@ 0x38
 80044c4:	2100      	movs	r1, #0
 80044c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	0018      	movs	r0, r3
 80044cc:	46bd      	mov	sp, r7
 80044ce:	b004      	add	sp, #16
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	46c0      	nop			@ (mov r8, r8)
 80044d4:	40010800 	.word	0x40010800
 80044d8:	40011400 	.word	0x40011400

080044dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e044      	b.n	8004578 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d107      	bne.n	8004506 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2278      	movs	r2, #120	@ 0x78
 80044fa:	2100      	movs	r1, #0
 80044fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	0018      	movs	r0, r3
 8004502:	f7fd ff0b 	bl	800231c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2224      	movs	r2, #36	@ 0x24
 800450a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2101      	movs	r1, #1
 8004518:	438a      	bics	r2, r1
 800451a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	0018      	movs	r0, r3
 8004528:	f000 fb16 	bl	8004b58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	0018      	movs	r0, r3
 8004530:	f000 f8c8 	bl	80046c4 <UART_SetConfig>
 8004534:	0003      	movs	r3, r0
 8004536:	2b01      	cmp	r3, #1
 8004538:	d101      	bne.n	800453e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e01c      	b.n	8004578 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	490d      	ldr	r1, [pc, #52]	@ (8004580 <HAL_UART_Init+0xa4>)
 800454a:	400a      	ands	r2, r1
 800454c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	212a      	movs	r1, #42	@ 0x2a
 800455a:	438a      	bics	r2, r1
 800455c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2101      	movs	r1, #1
 800456a:	430a      	orrs	r2, r1
 800456c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	0018      	movs	r0, r3
 8004572:	f000 fba5 	bl	8004cc0 <UART_CheckIdleState>
 8004576:	0003      	movs	r3, r0
}
 8004578:	0018      	movs	r0, r3
 800457a:	46bd      	mov	sp, r7
 800457c:	b002      	add	sp, #8
 800457e:	bd80      	pop	{r7, pc}
 8004580:	ffffb7ff 	.word	0xffffb7ff

08004584 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b08a      	sub	sp, #40	@ 0x28
 8004588:	af02      	add	r7, sp, #8
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	603b      	str	r3, [r7, #0]
 8004590:	1dbb      	adds	r3, r7, #6
 8004592:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004598:	2b20      	cmp	r3, #32
 800459a:	d000      	beq.n	800459e <HAL_UART_Transmit+0x1a>
 800459c:	e08c      	b.n	80046b8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d003      	beq.n	80045ac <HAL_UART_Transmit+0x28>
 80045a4:	1dbb      	adds	r3, r7, #6
 80045a6:	881b      	ldrh	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e084      	b.n	80046ba <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	689a      	ldr	r2, [r3, #8]
 80045b4:	2380      	movs	r3, #128	@ 0x80
 80045b6:	015b      	lsls	r3, r3, #5
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d109      	bne.n	80045d0 <HAL_UART_Transmit+0x4c>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d105      	bne.n	80045d0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	2201      	movs	r2, #1
 80045c8:	4013      	ands	r3, r2
 80045ca:	d001      	beq.n	80045d0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e074      	b.n	80046ba <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2284      	movs	r2, #132	@ 0x84
 80045d4:	2100      	movs	r1, #0
 80045d6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2221      	movs	r2, #33	@ 0x21
 80045dc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045de:	f7fe f869 	bl	80026b4 <HAL_GetTick>
 80045e2:	0003      	movs	r3, r0
 80045e4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	1dba      	adds	r2, r7, #6
 80045ea:	2150      	movs	r1, #80	@ 0x50
 80045ec:	8812      	ldrh	r2, [r2, #0]
 80045ee:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	1dba      	adds	r2, r7, #6
 80045f4:	2152      	movs	r1, #82	@ 0x52
 80045f6:	8812      	ldrh	r2, [r2, #0]
 80045f8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	2380      	movs	r3, #128	@ 0x80
 8004600:	015b      	lsls	r3, r3, #5
 8004602:	429a      	cmp	r2, r3
 8004604:	d108      	bne.n	8004618 <HAL_UART_Transmit+0x94>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d104      	bne.n	8004618 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800460e:	2300      	movs	r3, #0
 8004610:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	61bb      	str	r3, [r7, #24]
 8004616:	e003      	b.n	8004620 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800461c:	2300      	movs	r3, #0
 800461e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004620:	e02f      	b.n	8004682 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	0013      	movs	r3, r2
 800462c:	2200      	movs	r2, #0
 800462e:	2180      	movs	r1, #128	@ 0x80
 8004630:	f000 fbee 	bl	8004e10 <UART_WaitOnFlagUntilTimeout>
 8004634:	1e03      	subs	r3, r0, #0
 8004636:	d004      	beq.n	8004642 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2220      	movs	r2, #32
 800463c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e03b      	b.n	80046ba <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10b      	bne.n	8004660 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	881b      	ldrh	r3, [r3, #0]
 800464c:	001a      	movs	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	05d2      	lsls	r2, r2, #23
 8004654:	0dd2      	lsrs	r2, r2, #23
 8004656:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	3302      	adds	r3, #2
 800465c:	61bb      	str	r3, [r7, #24]
 800465e:	e007      	b.n	8004670 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	781a      	ldrb	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	3301      	adds	r3, #1
 800466e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2252      	movs	r2, #82	@ 0x52
 8004674:	5a9b      	ldrh	r3, [r3, r2]
 8004676:	b29b      	uxth	r3, r3
 8004678:	3b01      	subs	r3, #1
 800467a:	b299      	uxth	r1, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2252      	movs	r2, #82	@ 0x52
 8004680:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2252      	movs	r2, #82	@ 0x52
 8004686:	5a9b      	ldrh	r3, [r3, r2]
 8004688:	b29b      	uxth	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1c9      	bne.n	8004622 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	0013      	movs	r3, r2
 8004698:	2200      	movs	r2, #0
 800469a:	2140      	movs	r1, #64	@ 0x40
 800469c:	f000 fbb8 	bl	8004e10 <UART_WaitOnFlagUntilTimeout>
 80046a0:	1e03      	subs	r3, r0, #0
 80046a2:	d004      	beq.n	80046ae <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2220      	movs	r2, #32
 80046a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e005      	b.n	80046ba <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2220      	movs	r2, #32
 80046b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80046b4:	2300      	movs	r3, #0
 80046b6:	e000      	b.n	80046ba <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80046b8:	2302      	movs	r3, #2
  }
}
 80046ba:	0018      	movs	r0, r3
 80046bc:	46bd      	mov	sp, r7
 80046be:	b008      	add	sp, #32
 80046c0:	bd80      	pop	{r7, pc}
	...

080046c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046c4:	b5b0      	push	{r4, r5, r7, lr}
 80046c6:	b08e      	sub	sp, #56	@ 0x38
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046cc:	231a      	movs	r3, #26
 80046ce:	2218      	movs	r2, #24
 80046d0:	189b      	adds	r3, r3, r2
 80046d2:	19db      	adds	r3, r3, r7
 80046d4:	2200      	movs	r2, #0
 80046d6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	689a      	ldr	r2, [r3, #8]
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	431a      	orrs	r2, r3
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	431a      	orrs	r2, r3
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4ab4      	ldr	r2, [pc, #720]	@ (80049c8 <UART_SetConfig+0x304>)
 80046f8:	4013      	ands	r3, r2
 80046fa:	0019      	movs	r1, r3
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004702:	430a      	orrs	r2, r1
 8004704:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	4aaf      	ldr	r2, [pc, #700]	@ (80049cc <UART_SetConfig+0x308>)
 800470e:	4013      	ands	r3, r2
 8004710:	0019      	movs	r1, r3
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	68da      	ldr	r2, [r3, #12]
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4aa9      	ldr	r2, [pc, #676]	@ (80049d0 <UART_SetConfig+0x30c>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d004      	beq.n	8004738 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004734:	4313      	orrs	r3, r2
 8004736:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	4aa5      	ldr	r2, [pc, #660]	@ (80049d4 <UART_SetConfig+0x310>)
 8004740:	4013      	ands	r3, r2
 8004742:	0019      	movs	r1, r3
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800474a:	430a      	orrs	r2, r1
 800474c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4aa1      	ldr	r2, [pc, #644]	@ (80049d8 <UART_SetConfig+0x314>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d131      	bne.n	80047bc <UART_SetConfig+0xf8>
 8004758:	4ba0      	ldr	r3, [pc, #640]	@ (80049dc <UART_SetConfig+0x318>)
 800475a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800475c:	220c      	movs	r2, #12
 800475e:	4013      	ands	r3, r2
 8004760:	2b0c      	cmp	r3, #12
 8004762:	d01d      	beq.n	80047a0 <UART_SetConfig+0xdc>
 8004764:	d823      	bhi.n	80047ae <UART_SetConfig+0xea>
 8004766:	2b08      	cmp	r3, #8
 8004768:	d00c      	beq.n	8004784 <UART_SetConfig+0xc0>
 800476a:	d820      	bhi.n	80047ae <UART_SetConfig+0xea>
 800476c:	2b00      	cmp	r3, #0
 800476e:	d002      	beq.n	8004776 <UART_SetConfig+0xb2>
 8004770:	2b04      	cmp	r3, #4
 8004772:	d00e      	beq.n	8004792 <UART_SetConfig+0xce>
 8004774:	e01b      	b.n	80047ae <UART_SetConfig+0xea>
 8004776:	231b      	movs	r3, #27
 8004778:	2218      	movs	r2, #24
 800477a:	189b      	adds	r3, r3, r2
 800477c:	19db      	adds	r3, r3, r7
 800477e:	2200      	movs	r2, #0
 8004780:	701a      	strb	r2, [r3, #0]
 8004782:	e065      	b.n	8004850 <UART_SetConfig+0x18c>
 8004784:	231b      	movs	r3, #27
 8004786:	2218      	movs	r2, #24
 8004788:	189b      	adds	r3, r3, r2
 800478a:	19db      	adds	r3, r3, r7
 800478c:	2202      	movs	r2, #2
 800478e:	701a      	strb	r2, [r3, #0]
 8004790:	e05e      	b.n	8004850 <UART_SetConfig+0x18c>
 8004792:	231b      	movs	r3, #27
 8004794:	2218      	movs	r2, #24
 8004796:	189b      	adds	r3, r3, r2
 8004798:	19db      	adds	r3, r3, r7
 800479a:	2204      	movs	r2, #4
 800479c:	701a      	strb	r2, [r3, #0]
 800479e:	e057      	b.n	8004850 <UART_SetConfig+0x18c>
 80047a0:	231b      	movs	r3, #27
 80047a2:	2218      	movs	r2, #24
 80047a4:	189b      	adds	r3, r3, r2
 80047a6:	19db      	adds	r3, r3, r7
 80047a8:	2208      	movs	r2, #8
 80047aa:	701a      	strb	r2, [r3, #0]
 80047ac:	e050      	b.n	8004850 <UART_SetConfig+0x18c>
 80047ae:	231b      	movs	r3, #27
 80047b0:	2218      	movs	r2, #24
 80047b2:	189b      	adds	r3, r3, r2
 80047b4:	19db      	adds	r3, r3, r7
 80047b6:	2210      	movs	r2, #16
 80047b8:	701a      	strb	r2, [r3, #0]
 80047ba:	e049      	b.n	8004850 <UART_SetConfig+0x18c>
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a83      	ldr	r2, [pc, #524]	@ (80049d0 <UART_SetConfig+0x30c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d13e      	bne.n	8004844 <UART_SetConfig+0x180>
 80047c6:	4b85      	ldr	r3, [pc, #532]	@ (80049dc <UART_SetConfig+0x318>)
 80047c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80047ca:	23c0      	movs	r3, #192	@ 0xc0
 80047cc:	011b      	lsls	r3, r3, #4
 80047ce:	4013      	ands	r3, r2
 80047d0:	22c0      	movs	r2, #192	@ 0xc0
 80047d2:	0112      	lsls	r2, r2, #4
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d027      	beq.n	8004828 <UART_SetConfig+0x164>
 80047d8:	22c0      	movs	r2, #192	@ 0xc0
 80047da:	0112      	lsls	r2, r2, #4
 80047dc:	4293      	cmp	r3, r2
 80047de:	d82a      	bhi.n	8004836 <UART_SetConfig+0x172>
 80047e0:	2280      	movs	r2, #128	@ 0x80
 80047e2:	0112      	lsls	r2, r2, #4
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d011      	beq.n	800480c <UART_SetConfig+0x148>
 80047e8:	2280      	movs	r2, #128	@ 0x80
 80047ea:	0112      	lsls	r2, r2, #4
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d822      	bhi.n	8004836 <UART_SetConfig+0x172>
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d004      	beq.n	80047fe <UART_SetConfig+0x13a>
 80047f4:	2280      	movs	r2, #128	@ 0x80
 80047f6:	00d2      	lsls	r2, r2, #3
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d00e      	beq.n	800481a <UART_SetConfig+0x156>
 80047fc:	e01b      	b.n	8004836 <UART_SetConfig+0x172>
 80047fe:	231b      	movs	r3, #27
 8004800:	2218      	movs	r2, #24
 8004802:	189b      	adds	r3, r3, r2
 8004804:	19db      	adds	r3, r3, r7
 8004806:	2200      	movs	r2, #0
 8004808:	701a      	strb	r2, [r3, #0]
 800480a:	e021      	b.n	8004850 <UART_SetConfig+0x18c>
 800480c:	231b      	movs	r3, #27
 800480e:	2218      	movs	r2, #24
 8004810:	189b      	adds	r3, r3, r2
 8004812:	19db      	adds	r3, r3, r7
 8004814:	2202      	movs	r2, #2
 8004816:	701a      	strb	r2, [r3, #0]
 8004818:	e01a      	b.n	8004850 <UART_SetConfig+0x18c>
 800481a:	231b      	movs	r3, #27
 800481c:	2218      	movs	r2, #24
 800481e:	189b      	adds	r3, r3, r2
 8004820:	19db      	adds	r3, r3, r7
 8004822:	2204      	movs	r2, #4
 8004824:	701a      	strb	r2, [r3, #0]
 8004826:	e013      	b.n	8004850 <UART_SetConfig+0x18c>
 8004828:	231b      	movs	r3, #27
 800482a:	2218      	movs	r2, #24
 800482c:	189b      	adds	r3, r3, r2
 800482e:	19db      	adds	r3, r3, r7
 8004830:	2208      	movs	r2, #8
 8004832:	701a      	strb	r2, [r3, #0]
 8004834:	e00c      	b.n	8004850 <UART_SetConfig+0x18c>
 8004836:	231b      	movs	r3, #27
 8004838:	2218      	movs	r2, #24
 800483a:	189b      	adds	r3, r3, r2
 800483c:	19db      	adds	r3, r3, r7
 800483e:	2210      	movs	r2, #16
 8004840:	701a      	strb	r2, [r3, #0]
 8004842:	e005      	b.n	8004850 <UART_SetConfig+0x18c>
 8004844:	231b      	movs	r3, #27
 8004846:	2218      	movs	r2, #24
 8004848:	189b      	adds	r3, r3, r2
 800484a:	19db      	adds	r3, r3, r7
 800484c:	2210      	movs	r2, #16
 800484e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a5e      	ldr	r2, [pc, #376]	@ (80049d0 <UART_SetConfig+0x30c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d000      	beq.n	800485c <UART_SetConfig+0x198>
 800485a:	e084      	b.n	8004966 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800485c:	231b      	movs	r3, #27
 800485e:	2218      	movs	r2, #24
 8004860:	189b      	adds	r3, r3, r2
 8004862:	19db      	adds	r3, r3, r7
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	2b08      	cmp	r3, #8
 8004868:	d01d      	beq.n	80048a6 <UART_SetConfig+0x1e2>
 800486a:	dc20      	bgt.n	80048ae <UART_SetConfig+0x1ea>
 800486c:	2b04      	cmp	r3, #4
 800486e:	d015      	beq.n	800489c <UART_SetConfig+0x1d8>
 8004870:	dc1d      	bgt.n	80048ae <UART_SetConfig+0x1ea>
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <UART_SetConfig+0x1b8>
 8004876:	2b02      	cmp	r3, #2
 8004878:	d005      	beq.n	8004886 <UART_SetConfig+0x1c2>
 800487a:	e018      	b.n	80048ae <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800487c:	f7fe fedc 	bl	8003638 <HAL_RCC_GetPCLK1Freq>
 8004880:	0003      	movs	r3, r0
 8004882:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004884:	e01c      	b.n	80048c0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004886:	4b55      	ldr	r3, [pc, #340]	@ (80049dc <UART_SetConfig+0x318>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2210      	movs	r2, #16
 800488c:	4013      	ands	r3, r2
 800488e:	d002      	beq.n	8004896 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004890:	4b53      	ldr	r3, [pc, #332]	@ (80049e0 <UART_SetConfig+0x31c>)
 8004892:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004894:	e014      	b.n	80048c0 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8004896:	4b53      	ldr	r3, [pc, #332]	@ (80049e4 <UART_SetConfig+0x320>)
 8004898:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800489a:	e011      	b.n	80048c0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800489c:	f7fe fe3c 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 80048a0:	0003      	movs	r3, r0
 80048a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80048a4:	e00c      	b.n	80048c0 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048a6:	2380      	movs	r3, #128	@ 0x80
 80048a8:	021b      	lsls	r3, r3, #8
 80048aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80048ac:	e008      	b.n	80048c0 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80048b2:	231a      	movs	r3, #26
 80048b4:	2218      	movs	r2, #24
 80048b6:	189b      	adds	r3, r3, r2
 80048b8:	19db      	adds	r3, r3, r7
 80048ba:	2201      	movs	r2, #1
 80048bc:	701a      	strb	r2, [r3, #0]
        break;
 80048be:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d100      	bne.n	80048c8 <UART_SetConfig+0x204>
 80048c6:	e12f      	b.n	8004b28 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	0013      	movs	r3, r2
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	189b      	adds	r3, r3, r2
 80048d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d305      	bcc.n	80048e4 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d906      	bls.n	80048f2 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 80048e4:	231a      	movs	r3, #26
 80048e6:	2218      	movs	r2, #24
 80048e8:	189b      	adds	r3, r3, r2
 80048ea:	19db      	adds	r3, r3, r7
 80048ec:	2201      	movs	r2, #1
 80048ee:	701a      	strb	r2, [r3, #0]
 80048f0:	e11a      	b.n	8004b28 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80048f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048f4:	613b      	str	r3, [r7, #16]
 80048f6:	2300      	movs	r3, #0
 80048f8:	617b      	str	r3, [r7, #20]
 80048fa:	6939      	ldr	r1, [r7, #16]
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	000b      	movs	r3, r1
 8004900:	0e1b      	lsrs	r3, r3, #24
 8004902:	0010      	movs	r0, r2
 8004904:	0205      	lsls	r5, r0, #8
 8004906:	431d      	orrs	r5, r3
 8004908:	000b      	movs	r3, r1
 800490a:	021c      	lsls	r4, r3, #8
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	085b      	lsrs	r3, r3, #1
 8004912:	60bb      	str	r3, [r7, #8]
 8004914:	2300      	movs	r3, #0
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	68b8      	ldr	r0, [r7, #8]
 800491a:	68f9      	ldr	r1, [r7, #12]
 800491c:	1900      	adds	r0, r0, r4
 800491e:	4169      	adcs	r1, r5
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	603b      	str	r3, [r7, #0]
 8004926:	2300      	movs	r3, #0
 8004928:	607b      	str	r3, [r7, #4]
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f7fb fc89 	bl	8000244 <__aeabi_uldivmod>
 8004932:	0002      	movs	r2, r0
 8004934:	000b      	movs	r3, r1
 8004936:	0013      	movs	r3, r2
 8004938:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800493a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800493c:	23c0      	movs	r3, #192	@ 0xc0
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	429a      	cmp	r2, r3
 8004942:	d309      	bcc.n	8004958 <UART_SetConfig+0x294>
 8004944:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004946:	2380      	movs	r3, #128	@ 0x80
 8004948:	035b      	lsls	r3, r3, #13
 800494a:	429a      	cmp	r2, r3
 800494c:	d204      	bcs.n	8004958 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004954:	60da      	str	r2, [r3, #12]
 8004956:	e0e7      	b.n	8004b28 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8004958:	231a      	movs	r3, #26
 800495a:	2218      	movs	r2, #24
 800495c:	189b      	adds	r3, r3, r2
 800495e:	19db      	adds	r3, r3, r7
 8004960:	2201      	movs	r2, #1
 8004962:	701a      	strb	r2, [r3, #0]
 8004964:	e0e0      	b.n	8004b28 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	69da      	ldr	r2, [r3, #28]
 800496a:	2380      	movs	r3, #128	@ 0x80
 800496c:	021b      	lsls	r3, r3, #8
 800496e:	429a      	cmp	r2, r3
 8004970:	d000      	beq.n	8004974 <UART_SetConfig+0x2b0>
 8004972:	e082      	b.n	8004a7a <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8004974:	231b      	movs	r3, #27
 8004976:	2218      	movs	r2, #24
 8004978:	189b      	adds	r3, r3, r2
 800497a:	19db      	adds	r3, r3, r7
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	2b08      	cmp	r3, #8
 8004980:	d834      	bhi.n	80049ec <UART_SetConfig+0x328>
 8004982:	009a      	lsls	r2, r3, #2
 8004984:	4b18      	ldr	r3, [pc, #96]	@ (80049e8 <UART_SetConfig+0x324>)
 8004986:	18d3      	adds	r3, r2, r3
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800498c:	f7fe fe54 	bl	8003638 <HAL_RCC_GetPCLK1Freq>
 8004990:	0003      	movs	r3, r0
 8004992:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004994:	e033      	b.n	80049fe <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004996:	f7fe fe65 	bl	8003664 <HAL_RCC_GetPCLK2Freq>
 800499a:	0003      	movs	r3, r0
 800499c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800499e:	e02e      	b.n	80049fe <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049a0:	4b0e      	ldr	r3, [pc, #56]	@ (80049dc <UART_SetConfig+0x318>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2210      	movs	r2, #16
 80049a6:	4013      	ands	r3, r2
 80049a8:	d002      	beq.n	80049b0 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80049aa:	4b0d      	ldr	r3, [pc, #52]	@ (80049e0 <UART_SetConfig+0x31c>)
 80049ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80049ae:	e026      	b.n	80049fe <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 80049b0:	4b0c      	ldr	r3, [pc, #48]	@ (80049e4 <UART_SetConfig+0x320>)
 80049b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80049b4:	e023      	b.n	80049fe <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049b6:	f7fe fdaf 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 80049ba:	0003      	movs	r3, r0
 80049bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80049be:	e01e      	b.n	80049fe <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049c0:	2380      	movs	r3, #128	@ 0x80
 80049c2:	021b      	lsls	r3, r3, #8
 80049c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80049c6:	e01a      	b.n	80049fe <UART_SetConfig+0x33a>
 80049c8:	efff69f3 	.word	0xefff69f3
 80049cc:	ffffcfff 	.word	0xffffcfff
 80049d0:	40004800 	.word	0x40004800
 80049d4:	fffff4ff 	.word	0xfffff4ff
 80049d8:	40004400 	.word	0x40004400
 80049dc:	40021000 	.word	0x40021000
 80049e0:	003d0900 	.word	0x003d0900
 80049e4:	00f42400 	.word	0x00f42400
 80049e8:	08005948 	.word	0x08005948
      default:
        pclk = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80049f0:	231a      	movs	r3, #26
 80049f2:	2218      	movs	r2, #24
 80049f4:	189b      	adds	r3, r3, r2
 80049f6:	19db      	adds	r3, r3, r7
 80049f8:	2201      	movs	r2, #1
 80049fa:	701a      	strb	r2, [r3, #0]
        break;
 80049fc:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d100      	bne.n	8004a06 <UART_SetConfig+0x342>
 8004a04:	e090      	b.n	8004b28 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a08:	005a      	lsls	r2, r3, #1
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	085b      	lsrs	r3, r3, #1
 8004a10:	18d2      	adds	r2, r2, r3
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	0019      	movs	r1, r3
 8004a18:	0010      	movs	r0, r2
 8004a1a:	f7fb fb87 	bl	800012c <__udivsi3>
 8004a1e:	0003      	movs	r3, r0
 8004a20:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a24:	2b0f      	cmp	r3, #15
 8004a26:	d921      	bls.n	8004a6c <UART_SetConfig+0x3a8>
 8004a28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a2a:	2380      	movs	r3, #128	@ 0x80
 8004a2c:	025b      	lsls	r3, r3, #9
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d21c      	bcs.n	8004a6c <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	200e      	movs	r0, #14
 8004a38:	2418      	movs	r4, #24
 8004a3a:	1903      	adds	r3, r0, r4
 8004a3c:	19db      	adds	r3, r3, r7
 8004a3e:	210f      	movs	r1, #15
 8004a40:	438a      	bics	r2, r1
 8004a42:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a46:	085b      	lsrs	r3, r3, #1
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	2207      	movs	r2, #7
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	b299      	uxth	r1, r3
 8004a50:	1903      	adds	r3, r0, r4
 8004a52:	19db      	adds	r3, r3, r7
 8004a54:	1902      	adds	r2, r0, r4
 8004a56:	19d2      	adds	r2, r2, r7
 8004a58:	8812      	ldrh	r2, [r2, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	1902      	adds	r2, r0, r4
 8004a64:	19d2      	adds	r2, r2, r7
 8004a66:	8812      	ldrh	r2, [r2, #0]
 8004a68:	60da      	str	r2, [r3, #12]
 8004a6a:	e05d      	b.n	8004b28 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8004a6c:	231a      	movs	r3, #26
 8004a6e:	2218      	movs	r2, #24
 8004a70:	189b      	adds	r3, r3, r2
 8004a72:	19db      	adds	r3, r3, r7
 8004a74:	2201      	movs	r2, #1
 8004a76:	701a      	strb	r2, [r3, #0]
 8004a78:	e056      	b.n	8004b28 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a7a:	231b      	movs	r3, #27
 8004a7c:	2218      	movs	r2, #24
 8004a7e:	189b      	adds	r3, r3, r2
 8004a80:	19db      	adds	r3, r3, r7
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d822      	bhi.n	8004ace <UART_SetConfig+0x40a>
 8004a88:	009a      	lsls	r2, r3, #2
 8004a8a:	4b2f      	ldr	r3, [pc, #188]	@ (8004b48 <UART_SetConfig+0x484>)
 8004a8c:	18d3      	adds	r3, r2, r3
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a92:	f7fe fdd1 	bl	8003638 <HAL_RCC_GetPCLK1Freq>
 8004a96:	0003      	movs	r3, r0
 8004a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a9a:	e021      	b.n	8004ae0 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a9c:	f7fe fde2 	bl	8003664 <HAL_RCC_GetPCLK2Freq>
 8004aa0:	0003      	movs	r3, r0
 8004aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004aa4:	e01c      	b.n	8004ae0 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004aa6:	4b29      	ldr	r3, [pc, #164]	@ (8004b4c <UART_SetConfig+0x488>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2210      	movs	r2, #16
 8004aac:	4013      	ands	r3, r2
 8004aae:	d002      	beq.n	8004ab6 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004ab0:	4b27      	ldr	r3, [pc, #156]	@ (8004b50 <UART_SetConfig+0x48c>)
 8004ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004ab4:	e014      	b.n	8004ae0 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8004ab6:	4b27      	ldr	r3, [pc, #156]	@ (8004b54 <UART_SetConfig+0x490>)
 8004ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004aba:	e011      	b.n	8004ae0 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004abc:	f7fe fd2c 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 8004ac0:	0003      	movs	r3, r0
 8004ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004ac4:	e00c      	b.n	8004ae0 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ac6:	2380      	movs	r3, #128	@ 0x80
 8004ac8:	021b      	lsls	r3, r3, #8
 8004aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004acc:	e008      	b.n	8004ae0 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004ad2:	231a      	movs	r3, #26
 8004ad4:	2218      	movs	r2, #24
 8004ad6:	189b      	adds	r3, r3, r2
 8004ad8:	19db      	adds	r3, r3, r7
 8004ada:	2201      	movs	r2, #1
 8004adc:	701a      	strb	r2, [r3, #0]
        break;
 8004ade:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d020      	beq.n	8004b28 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	085a      	lsrs	r2, r3, #1
 8004aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aee:	18d2      	adds	r2, r2, r3
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	0019      	movs	r1, r3
 8004af6:	0010      	movs	r0, r2
 8004af8:	f7fb fb18 	bl	800012c <__udivsi3>
 8004afc:	0003      	movs	r3, r0
 8004afe:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b02:	2b0f      	cmp	r3, #15
 8004b04:	d90a      	bls.n	8004b1c <UART_SetConfig+0x458>
 8004b06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b08:	2380      	movs	r3, #128	@ 0x80
 8004b0a:	025b      	lsls	r3, r3, #9
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d205      	bcs.n	8004b1c <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	60da      	str	r2, [r3, #12]
 8004b1a:	e005      	b.n	8004b28 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8004b1c:	231a      	movs	r3, #26
 8004b1e:	2218      	movs	r2, #24
 8004b20:	189b      	adds	r3, r3, r2
 8004b22:	19db      	adds	r3, r3, r7
 8004b24:	2201      	movs	r2, #1
 8004b26:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	2200      	movs	r2, #0
 8004b32:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004b34:	231a      	movs	r3, #26
 8004b36:	2218      	movs	r2, #24
 8004b38:	189b      	adds	r3, r3, r2
 8004b3a:	19db      	adds	r3, r3, r7
 8004b3c:	781b      	ldrb	r3, [r3, #0]
}
 8004b3e:	0018      	movs	r0, r3
 8004b40:	46bd      	mov	sp, r7
 8004b42:	b00e      	add	sp, #56	@ 0x38
 8004b44:	bdb0      	pop	{r4, r5, r7, pc}
 8004b46:	46c0      	nop			@ (mov r8, r8)
 8004b48:	0800596c 	.word	0x0800596c
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	003d0900 	.word	0x003d0900
 8004b54:	00f42400 	.word	0x00f42400

08004b58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b64:	2208      	movs	r2, #8
 8004b66:	4013      	ands	r3, r2
 8004b68:	d00b      	beq.n	8004b82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	4a4a      	ldr	r2, [pc, #296]	@ (8004c9c <UART_AdvFeatureConfig+0x144>)
 8004b72:	4013      	ands	r3, r2
 8004b74:	0019      	movs	r1, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b86:	2201      	movs	r2, #1
 8004b88:	4013      	ands	r3, r2
 8004b8a:	d00b      	beq.n	8004ba4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	4a43      	ldr	r2, [pc, #268]	@ (8004ca0 <UART_AdvFeatureConfig+0x148>)
 8004b94:	4013      	ands	r3, r2
 8004b96:	0019      	movs	r1, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba8:	2202      	movs	r2, #2
 8004baa:	4013      	ands	r3, r2
 8004bac:	d00b      	beq.n	8004bc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	4a3b      	ldr	r2, [pc, #236]	@ (8004ca4 <UART_AdvFeatureConfig+0x14c>)
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	0019      	movs	r1, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	430a      	orrs	r2, r1
 8004bc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bca:	2204      	movs	r2, #4
 8004bcc:	4013      	ands	r3, r2
 8004bce:	d00b      	beq.n	8004be8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	4a34      	ldr	r2, [pc, #208]	@ (8004ca8 <UART_AdvFeatureConfig+0x150>)
 8004bd8:	4013      	ands	r3, r2
 8004bda:	0019      	movs	r1, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bec:	2210      	movs	r2, #16
 8004bee:	4013      	ands	r3, r2
 8004bf0:	d00b      	beq.n	8004c0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	4a2c      	ldr	r2, [pc, #176]	@ (8004cac <UART_AdvFeatureConfig+0x154>)
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	0019      	movs	r1, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0e:	2220      	movs	r2, #32
 8004c10:	4013      	ands	r3, r2
 8004c12:	d00b      	beq.n	8004c2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	4a25      	ldr	r2, [pc, #148]	@ (8004cb0 <UART_AdvFeatureConfig+0x158>)
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	0019      	movs	r1, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c30:	2240      	movs	r2, #64	@ 0x40
 8004c32:	4013      	ands	r3, r2
 8004c34:	d01d      	beq.n	8004c72 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8004cb4 <UART_AdvFeatureConfig+0x15c>)
 8004c3e:	4013      	ands	r3, r2
 8004c40:	0019      	movs	r1, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c52:	2380      	movs	r3, #128	@ 0x80
 8004c54:	035b      	lsls	r3, r3, #13
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d10b      	bne.n	8004c72 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	4a15      	ldr	r2, [pc, #84]	@ (8004cb8 <UART_AdvFeatureConfig+0x160>)
 8004c62:	4013      	ands	r3, r2
 8004c64:	0019      	movs	r1, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c76:	2280      	movs	r2, #128	@ 0x80
 8004c78:	4013      	ands	r3, r2
 8004c7a:	d00b      	beq.n	8004c94 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	4a0e      	ldr	r2, [pc, #56]	@ (8004cbc <UART_AdvFeatureConfig+0x164>)
 8004c84:	4013      	ands	r3, r2
 8004c86:	0019      	movs	r1, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	605a      	str	r2, [r3, #4]
  }
}
 8004c94:	46c0      	nop			@ (mov r8, r8)
 8004c96:	46bd      	mov	sp, r7
 8004c98:	b002      	add	sp, #8
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	ffff7fff 	.word	0xffff7fff
 8004ca0:	fffdffff 	.word	0xfffdffff
 8004ca4:	fffeffff 	.word	0xfffeffff
 8004ca8:	fffbffff 	.word	0xfffbffff
 8004cac:	ffffefff 	.word	0xffffefff
 8004cb0:	ffffdfff 	.word	0xffffdfff
 8004cb4:	ffefffff 	.word	0xffefffff
 8004cb8:	ff9fffff 	.word	0xff9fffff
 8004cbc:	fff7ffff 	.word	0xfff7ffff

08004cc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b092      	sub	sp, #72	@ 0x48
 8004cc4:	af02      	add	r7, sp, #8
 8004cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2284      	movs	r2, #132	@ 0x84
 8004ccc:	2100      	movs	r1, #0
 8004cce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cd0:	f7fd fcf0 	bl	80026b4 <HAL_GetTick>
 8004cd4:	0003      	movs	r3, r0
 8004cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2208      	movs	r2, #8
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	2b08      	cmp	r3, #8
 8004ce4:	d12c      	bne.n	8004d40 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ce8:	2280      	movs	r2, #128	@ 0x80
 8004cea:	0391      	lsls	r1, r2, #14
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	4a46      	ldr	r2, [pc, #280]	@ (8004e08 <UART_CheckIdleState+0x148>)
 8004cf0:	9200      	str	r2, [sp, #0]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f000 f88c 	bl	8004e10 <UART_WaitOnFlagUntilTimeout>
 8004cf8:	1e03      	subs	r3, r0, #0
 8004cfa:	d021      	beq.n	8004d40 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8004d00:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d04:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d06:	2301      	movs	r3, #1
 8004d08:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d0c:	f383 8810 	msr	PRIMASK, r3
}
 8004d10:	46c0      	nop			@ (mov r8, r8)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2180      	movs	r1, #128	@ 0x80
 8004d1e:	438a      	bics	r2, r1
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d28:	f383 8810 	msr	PRIMASK, r3
}
 8004d2c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2220      	movs	r2, #32
 8004d32:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2278      	movs	r2, #120	@ 0x78
 8004d38:	2100      	movs	r1, #0
 8004d3a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e05f      	b.n	8004e00 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2204      	movs	r2, #4
 8004d48:	4013      	ands	r3, r2
 8004d4a:	2b04      	cmp	r3, #4
 8004d4c:	d146      	bne.n	8004ddc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d50:	2280      	movs	r2, #128	@ 0x80
 8004d52:	03d1      	lsls	r1, r2, #15
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	4a2c      	ldr	r2, [pc, #176]	@ (8004e08 <UART_CheckIdleState+0x148>)
 8004d58:	9200      	str	r2, [sp, #0]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f000 f858 	bl	8004e10 <UART_WaitOnFlagUntilTimeout>
 8004d60:	1e03      	subs	r3, r0, #0
 8004d62:	d03b      	beq.n	8004ddc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d64:	f3ef 8310 	mrs	r3, PRIMASK
 8004d68:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d6e:	2301      	movs	r3, #1
 8004d70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	f383 8810 	msr	PRIMASK, r3
}
 8004d78:	46c0      	nop			@ (mov r8, r8)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4921      	ldr	r1, [pc, #132]	@ (8004e0c <UART_CheckIdleState+0x14c>)
 8004d86:	400a      	ands	r2, r1
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f383 8810 	msr	PRIMASK, r3
}
 8004d94:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d96:	f3ef 8310 	mrs	r3, PRIMASK
 8004d9a:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d9c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004da0:	2301      	movs	r3, #1
 8004da2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	f383 8810 	msr	PRIMASK, r3
}
 8004daa:	46c0      	nop			@ (mov r8, r8)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689a      	ldr	r2, [r3, #8]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2101      	movs	r1, #1
 8004db8:	438a      	bics	r2, r1
 8004dba:	609a      	str	r2, [r3, #8]
 8004dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dbe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dc0:	6a3b      	ldr	r3, [r7, #32]
 8004dc2:	f383 8810 	msr	PRIMASK, r3
}
 8004dc6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2280      	movs	r2, #128	@ 0x80
 8004dcc:	2120      	movs	r1, #32
 8004dce:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2278      	movs	r2, #120	@ 0x78
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e011      	b.n	8004e00 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2220      	movs	r2, #32
 8004de0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2280      	movs	r2, #128	@ 0x80
 8004de6:	2120      	movs	r1, #32
 8004de8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2278      	movs	r2, #120	@ 0x78
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	0018      	movs	r0, r3
 8004e02:	46bd      	mov	sp, r7
 8004e04:	b010      	add	sp, #64	@ 0x40
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	01ffffff 	.word	0x01ffffff
 8004e0c:	fffffedf 	.word	0xfffffedf

08004e10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	603b      	str	r3, [r7, #0]
 8004e1c:	1dfb      	adds	r3, r7, #7
 8004e1e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e20:	e051      	b.n	8004ec6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	3301      	adds	r3, #1
 8004e26:	d04e      	beq.n	8004ec6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e28:	f7fd fc44 	bl	80026b4 <HAL_GetTick>
 8004e2c:	0002      	movs	r2, r0
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d302      	bcc.n	8004e3e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e051      	b.n	8004ee6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2204      	movs	r2, #4
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	d03b      	beq.n	8004ec6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	2b80      	cmp	r3, #128	@ 0x80
 8004e52:	d038      	beq.n	8004ec6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	2b40      	cmp	r3, #64	@ 0x40
 8004e58:	d035      	beq.n	8004ec6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	69db      	ldr	r3, [r3, #28]
 8004e60:	2208      	movs	r2, #8
 8004e62:	4013      	ands	r3, r2
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	d111      	bne.n	8004e8c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2208      	movs	r2, #8
 8004e6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	0018      	movs	r0, r3
 8004e74:	f000 f83c 	bl	8004ef0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2284      	movs	r2, #132	@ 0x84
 8004e7c:	2108      	movs	r1, #8
 8004e7e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2278      	movs	r2, #120	@ 0x78
 8004e84:	2100      	movs	r1, #0
 8004e86:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e02c      	b.n	8004ee6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	69da      	ldr	r2, [r3, #28]
 8004e92:	2380      	movs	r3, #128	@ 0x80
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	401a      	ands	r2, r3
 8004e98:	2380      	movs	r3, #128	@ 0x80
 8004e9a:	011b      	lsls	r3, r3, #4
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d112      	bne.n	8004ec6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2280      	movs	r2, #128	@ 0x80
 8004ea6:	0112      	lsls	r2, r2, #4
 8004ea8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	0018      	movs	r0, r3
 8004eae:	f000 f81f 	bl	8004ef0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2284      	movs	r2, #132	@ 0x84
 8004eb6:	2120      	movs	r1, #32
 8004eb8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2278      	movs	r2, #120	@ 0x78
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e00f      	b.n	8004ee6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	69db      	ldr	r3, [r3, #28]
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	425a      	negs	r2, r3
 8004ed6:	4153      	adcs	r3, r2
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	001a      	movs	r2, r3
 8004edc:	1dfb      	adds	r3, r7, #7
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d09e      	beq.n	8004e22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	b004      	add	sp, #16
 8004eec:	bd80      	pop	{r7, pc}
	...

08004ef0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08e      	sub	sp, #56	@ 0x38
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ef8:	f3ef 8310 	mrs	r3, PRIMASK
 8004efc:	617b      	str	r3, [r7, #20]
  return(result);
 8004efe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f00:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f02:	2301      	movs	r3, #1
 8004f04:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	f383 8810 	msr	PRIMASK, r3
}
 8004f0c:	46c0      	nop			@ (mov r8, r8)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4926      	ldr	r1, [pc, #152]	@ (8004fb4 <UART_EndRxTransfer+0xc4>)
 8004f1a:	400a      	ands	r2, r1
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	f383 8810 	msr	PRIMASK, r3
}
 8004f28:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f2a:	f3ef 8310 	mrs	r3, PRIMASK
 8004f2e:	623b      	str	r3, [r7, #32]
  return(result);
 8004f30:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f32:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f34:	2301      	movs	r3, #1
 8004f36:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3a:	f383 8810 	msr	PRIMASK, r3
}
 8004f3e:	46c0      	nop			@ (mov r8, r8)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689a      	ldr	r2, [r3, #8]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	438a      	bics	r2, r1
 8004f4e:	609a      	str	r2, [r3, #8]
 8004f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f52:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f56:	f383 8810 	msr	PRIMASK, r3
}
 8004f5a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d118      	bne.n	8004f96 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f64:	f3ef 8310 	mrs	r3, PRIMASK
 8004f68:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f6a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f6e:	2301      	movs	r3, #1
 8004f70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f383 8810 	msr	PRIMASK, r3
}
 8004f78:	46c0      	nop			@ (mov r8, r8)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2110      	movs	r1, #16
 8004f86:	438a      	bics	r2, r1
 8004f88:	601a      	str	r2, [r3, #0]
 8004f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f383 8810 	msr	PRIMASK, r3
}
 8004f94:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2280      	movs	r2, #128	@ 0x80
 8004f9a:	2120      	movs	r1, #32
 8004f9c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004faa:	46c0      	nop			@ (mov r8, r8)
 8004fac:	46bd      	mov	sp, r7
 8004fae:	b00e      	add	sp, #56	@ 0x38
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	46c0      	nop			@ (mov r8, r8)
 8004fb4:	fffffedf 	.word	0xfffffedf

08004fb8 <siprintf>:
 8004fb8:	b40e      	push	{r1, r2, r3}
 8004fba:	b510      	push	{r4, lr}
 8004fbc:	2400      	movs	r4, #0
 8004fbe:	490c      	ldr	r1, [pc, #48]	@ (8004ff0 <siprintf+0x38>)
 8004fc0:	b09d      	sub	sp, #116	@ 0x74
 8004fc2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004fc4:	9002      	str	r0, [sp, #8]
 8004fc6:	9006      	str	r0, [sp, #24]
 8004fc8:	9107      	str	r1, [sp, #28]
 8004fca:	9104      	str	r1, [sp, #16]
 8004fcc:	4809      	ldr	r0, [pc, #36]	@ (8004ff4 <siprintf+0x3c>)
 8004fce:	490a      	ldr	r1, [pc, #40]	@ (8004ff8 <siprintf+0x40>)
 8004fd0:	cb04      	ldmia	r3!, {r2}
 8004fd2:	9105      	str	r1, [sp, #20]
 8004fd4:	6800      	ldr	r0, [r0, #0]
 8004fd6:	a902      	add	r1, sp, #8
 8004fd8:	9301      	str	r3, [sp, #4]
 8004fda:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004fdc:	f000 f99e 	bl	800531c <_svfiprintf_r>
 8004fe0:	9b02      	ldr	r3, [sp, #8]
 8004fe2:	701c      	strb	r4, [r3, #0]
 8004fe4:	b01d      	add	sp, #116	@ 0x74
 8004fe6:	bc10      	pop	{r4}
 8004fe8:	bc08      	pop	{r3}
 8004fea:	b003      	add	sp, #12
 8004fec:	4718      	bx	r3
 8004fee:	46c0      	nop			@ (mov r8, r8)
 8004ff0:	7fffffff 	.word	0x7fffffff
 8004ff4:	2000000c 	.word	0x2000000c
 8004ff8:	ffff0208 	.word	0xffff0208

08004ffc <memset>:
 8004ffc:	0003      	movs	r3, r0
 8004ffe:	1882      	adds	r2, r0, r2
 8005000:	4293      	cmp	r3, r2
 8005002:	d100      	bne.n	8005006 <memset+0xa>
 8005004:	4770      	bx	lr
 8005006:	7019      	strb	r1, [r3, #0]
 8005008:	3301      	adds	r3, #1
 800500a:	e7f9      	b.n	8005000 <memset+0x4>

0800500c <__errno>:
 800500c:	4b01      	ldr	r3, [pc, #4]	@ (8005014 <__errno+0x8>)
 800500e:	6818      	ldr	r0, [r3, #0]
 8005010:	4770      	bx	lr
 8005012:	46c0      	nop			@ (mov r8, r8)
 8005014:	2000000c 	.word	0x2000000c

08005018 <__libc_init_array>:
 8005018:	b570      	push	{r4, r5, r6, lr}
 800501a:	2600      	movs	r6, #0
 800501c:	4c0c      	ldr	r4, [pc, #48]	@ (8005050 <__libc_init_array+0x38>)
 800501e:	4d0d      	ldr	r5, [pc, #52]	@ (8005054 <__libc_init_array+0x3c>)
 8005020:	1b64      	subs	r4, r4, r5
 8005022:	10a4      	asrs	r4, r4, #2
 8005024:	42a6      	cmp	r6, r4
 8005026:	d109      	bne.n	800503c <__libc_init_array+0x24>
 8005028:	2600      	movs	r6, #0
 800502a:	f000 fc61 	bl	80058f0 <_init>
 800502e:	4c0a      	ldr	r4, [pc, #40]	@ (8005058 <__libc_init_array+0x40>)
 8005030:	4d0a      	ldr	r5, [pc, #40]	@ (800505c <__libc_init_array+0x44>)
 8005032:	1b64      	subs	r4, r4, r5
 8005034:	10a4      	asrs	r4, r4, #2
 8005036:	42a6      	cmp	r6, r4
 8005038:	d105      	bne.n	8005046 <__libc_init_array+0x2e>
 800503a:	bd70      	pop	{r4, r5, r6, pc}
 800503c:	00b3      	lsls	r3, r6, #2
 800503e:	58eb      	ldr	r3, [r5, r3]
 8005040:	4798      	blx	r3
 8005042:	3601      	adds	r6, #1
 8005044:	e7ee      	b.n	8005024 <__libc_init_array+0xc>
 8005046:	00b3      	lsls	r3, r6, #2
 8005048:	58eb      	ldr	r3, [r5, r3]
 800504a:	4798      	blx	r3
 800504c:	3601      	adds	r6, #1
 800504e:	e7f2      	b.n	8005036 <__libc_init_array+0x1e>
 8005050:	080059cc 	.word	0x080059cc
 8005054:	080059cc 	.word	0x080059cc
 8005058:	080059d0 	.word	0x080059d0
 800505c:	080059cc 	.word	0x080059cc

08005060 <__retarget_lock_acquire_recursive>:
 8005060:	4770      	bx	lr

08005062 <__retarget_lock_release_recursive>:
 8005062:	4770      	bx	lr

08005064 <_free_r>:
 8005064:	b570      	push	{r4, r5, r6, lr}
 8005066:	0005      	movs	r5, r0
 8005068:	1e0c      	subs	r4, r1, #0
 800506a:	d010      	beq.n	800508e <_free_r+0x2a>
 800506c:	3c04      	subs	r4, #4
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	da00      	bge.n	8005076 <_free_r+0x12>
 8005074:	18e4      	adds	r4, r4, r3
 8005076:	0028      	movs	r0, r5
 8005078:	f000 f8e0 	bl	800523c <__malloc_lock>
 800507c:	4a1d      	ldr	r2, [pc, #116]	@ (80050f4 <_free_r+0x90>)
 800507e:	6813      	ldr	r3, [r2, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d105      	bne.n	8005090 <_free_r+0x2c>
 8005084:	6063      	str	r3, [r4, #4]
 8005086:	6014      	str	r4, [r2, #0]
 8005088:	0028      	movs	r0, r5
 800508a:	f000 f8df 	bl	800524c <__malloc_unlock>
 800508e:	bd70      	pop	{r4, r5, r6, pc}
 8005090:	42a3      	cmp	r3, r4
 8005092:	d908      	bls.n	80050a6 <_free_r+0x42>
 8005094:	6820      	ldr	r0, [r4, #0]
 8005096:	1821      	adds	r1, r4, r0
 8005098:	428b      	cmp	r3, r1
 800509a:	d1f3      	bne.n	8005084 <_free_r+0x20>
 800509c:	6819      	ldr	r1, [r3, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	1809      	adds	r1, r1, r0
 80050a2:	6021      	str	r1, [r4, #0]
 80050a4:	e7ee      	b.n	8005084 <_free_r+0x20>
 80050a6:	001a      	movs	r2, r3
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <_free_r+0x4e>
 80050ae:	42a3      	cmp	r3, r4
 80050b0:	d9f9      	bls.n	80050a6 <_free_r+0x42>
 80050b2:	6811      	ldr	r1, [r2, #0]
 80050b4:	1850      	adds	r0, r2, r1
 80050b6:	42a0      	cmp	r0, r4
 80050b8:	d10b      	bne.n	80050d2 <_free_r+0x6e>
 80050ba:	6820      	ldr	r0, [r4, #0]
 80050bc:	1809      	adds	r1, r1, r0
 80050be:	1850      	adds	r0, r2, r1
 80050c0:	6011      	str	r1, [r2, #0]
 80050c2:	4283      	cmp	r3, r0
 80050c4:	d1e0      	bne.n	8005088 <_free_r+0x24>
 80050c6:	6818      	ldr	r0, [r3, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	1841      	adds	r1, r0, r1
 80050cc:	6011      	str	r1, [r2, #0]
 80050ce:	6053      	str	r3, [r2, #4]
 80050d0:	e7da      	b.n	8005088 <_free_r+0x24>
 80050d2:	42a0      	cmp	r0, r4
 80050d4:	d902      	bls.n	80050dc <_free_r+0x78>
 80050d6:	230c      	movs	r3, #12
 80050d8:	602b      	str	r3, [r5, #0]
 80050da:	e7d5      	b.n	8005088 <_free_r+0x24>
 80050dc:	6820      	ldr	r0, [r4, #0]
 80050de:	1821      	adds	r1, r4, r0
 80050e0:	428b      	cmp	r3, r1
 80050e2:	d103      	bne.n	80050ec <_free_r+0x88>
 80050e4:	6819      	ldr	r1, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	1809      	adds	r1, r1, r0
 80050ea:	6021      	str	r1, [r4, #0]
 80050ec:	6063      	str	r3, [r4, #4]
 80050ee:	6054      	str	r4, [r2, #4]
 80050f0:	e7ca      	b.n	8005088 <_free_r+0x24>
 80050f2:	46c0      	nop			@ (mov r8, r8)
 80050f4:	20000300 	.word	0x20000300

080050f8 <sbrk_aligned>:
 80050f8:	b570      	push	{r4, r5, r6, lr}
 80050fa:	4e0f      	ldr	r6, [pc, #60]	@ (8005138 <sbrk_aligned+0x40>)
 80050fc:	000d      	movs	r5, r1
 80050fe:	6831      	ldr	r1, [r6, #0]
 8005100:	0004      	movs	r4, r0
 8005102:	2900      	cmp	r1, #0
 8005104:	d102      	bne.n	800510c <sbrk_aligned+0x14>
 8005106:	f000 fb95 	bl	8005834 <_sbrk_r>
 800510a:	6030      	str	r0, [r6, #0]
 800510c:	0029      	movs	r1, r5
 800510e:	0020      	movs	r0, r4
 8005110:	f000 fb90 	bl	8005834 <_sbrk_r>
 8005114:	1c43      	adds	r3, r0, #1
 8005116:	d103      	bne.n	8005120 <sbrk_aligned+0x28>
 8005118:	2501      	movs	r5, #1
 800511a:	426d      	negs	r5, r5
 800511c:	0028      	movs	r0, r5
 800511e:	bd70      	pop	{r4, r5, r6, pc}
 8005120:	2303      	movs	r3, #3
 8005122:	1cc5      	adds	r5, r0, #3
 8005124:	439d      	bics	r5, r3
 8005126:	42a8      	cmp	r0, r5
 8005128:	d0f8      	beq.n	800511c <sbrk_aligned+0x24>
 800512a:	1a29      	subs	r1, r5, r0
 800512c:	0020      	movs	r0, r4
 800512e:	f000 fb81 	bl	8005834 <_sbrk_r>
 8005132:	3001      	adds	r0, #1
 8005134:	d1f2      	bne.n	800511c <sbrk_aligned+0x24>
 8005136:	e7ef      	b.n	8005118 <sbrk_aligned+0x20>
 8005138:	200002fc 	.word	0x200002fc

0800513c <_malloc_r>:
 800513c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800513e:	2203      	movs	r2, #3
 8005140:	1ccb      	adds	r3, r1, #3
 8005142:	4393      	bics	r3, r2
 8005144:	3308      	adds	r3, #8
 8005146:	0005      	movs	r5, r0
 8005148:	001f      	movs	r7, r3
 800514a:	2b0c      	cmp	r3, #12
 800514c:	d234      	bcs.n	80051b8 <_malloc_r+0x7c>
 800514e:	270c      	movs	r7, #12
 8005150:	42b9      	cmp	r1, r7
 8005152:	d833      	bhi.n	80051bc <_malloc_r+0x80>
 8005154:	0028      	movs	r0, r5
 8005156:	f000 f871 	bl	800523c <__malloc_lock>
 800515a:	4e37      	ldr	r6, [pc, #220]	@ (8005238 <_malloc_r+0xfc>)
 800515c:	6833      	ldr	r3, [r6, #0]
 800515e:	001c      	movs	r4, r3
 8005160:	2c00      	cmp	r4, #0
 8005162:	d12f      	bne.n	80051c4 <_malloc_r+0x88>
 8005164:	0039      	movs	r1, r7
 8005166:	0028      	movs	r0, r5
 8005168:	f7ff ffc6 	bl	80050f8 <sbrk_aligned>
 800516c:	0004      	movs	r4, r0
 800516e:	1c43      	adds	r3, r0, #1
 8005170:	d15f      	bne.n	8005232 <_malloc_r+0xf6>
 8005172:	6834      	ldr	r4, [r6, #0]
 8005174:	9400      	str	r4, [sp, #0]
 8005176:	9b00      	ldr	r3, [sp, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d14a      	bne.n	8005212 <_malloc_r+0xd6>
 800517c:	2c00      	cmp	r4, #0
 800517e:	d052      	beq.n	8005226 <_malloc_r+0xea>
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	0028      	movs	r0, r5
 8005184:	18e3      	adds	r3, r4, r3
 8005186:	9900      	ldr	r1, [sp, #0]
 8005188:	9301      	str	r3, [sp, #4]
 800518a:	f000 fb53 	bl	8005834 <_sbrk_r>
 800518e:	9b01      	ldr	r3, [sp, #4]
 8005190:	4283      	cmp	r3, r0
 8005192:	d148      	bne.n	8005226 <_malloc_r+0xea>
 8005194:	6823      	ldr	r3, [r4, #0]
 8005196:	0028      	movs	r0, r5
 8005198:	1aff      	subs	r7, r7, r3
 800519a:	0039      	movs	r1, r7
 800519c:	f7ff ffac 	bl	80050f8 <sbrk_aligned>
 80051a0:	3001      	adds	r0, #1
 80051a2:	d040      	beq.n	8005226 <_malloc_r+0xea>
 80051a4:	6823      	ldr	r3, [r4, #0]
 80051a6:	19db      	adds	r3, r3, r7
 80051a8:	6023      	str	r3, [r4, #0]
 80051aa:	6833      	ldr	r3, [r6, #0]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	2a00      	cmp	r2, #0
 80051b0:	d133      	bne.n	800521a <_malloc_r+0xde>
 80051b2:	9b00      	ldr	r3, [sp, #0]
 80051b4:	6033      	str	r3, [r6, #0]
 80051b6:	e019      	b.n	80051ec <_malloc_r+0xb0>
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	dac9      	bge.n	8005150 <_malloc_r+0x14>
 80051bc:	230c      	movs	r3, #12
 80051be:	602b      	str	r3, [r5, #0]
 80051c0:	2000      	movs	r0, #0
 80051c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80051c4:	6821      	ldr	r1, [r4, #0]
 80051c6:	1bc9      	subs	r1, r1, r7
 80051c8:	d420      	bmi.n	800520c <_malloc_r+0xd0>
 80051ca:	290b      	cmp	r1, #11
 80051cc:	d90a      	bls.n	80051e4 <_malloc_r+0xa8>
 80051ce:	19e2      	adds	r2, r4, r7
 80051d0:	6027      	str	r7, [r4, #0]
 80051d2:	42a3      	cmp	r3, r4
 80051d4:	d104      	bne.n	80051e0 <_malloc_r+0xa4>
 80051d6:	6032      	str	r2, [r6, #0]
 80051d8:	6863      	ldr	r3, [r4, #4]
 80051da:	6011      	str	r1, [r2, #0]
 80051dc:	6053      	str	r3, [r2, #4]
 80051de:	e005      	b.n	80051ec <_malloc_r+0xb0>
 80051e0:	605a      	str	r2, [r3, #4]
 80051e2:	e7f9      	b.n	80051d8 <_malloc_r+0x9c>
 80051e4:	6862      	ldr	r2, [r4, #4]
 80051e6:	42a3      	cmp	r3, r4
 80051e8:	d10e      	bne.n	8005208 <_malloc_r+0xcc>
 80051ea:	6032      	str	r2, [r6, #0]
 80051ec:	0028      	movs	r0, r5
 80051ee:	f000 f82d 	bl	800524c <__malloc_unlock>
 80051f2:	0020      	movs	r0, r4
 80051f4:	2207      	movs	r2, #7
 80051f6:	300b      	adds	r0, #11
 80051f8:	1d23      	adds	r3, r4, #4
 80051fa:	4390      	bics	r0, r2
 80051fc:	1ac2      	subs	r2, r0, r3
 80051fe:	4298      	cmp	r0, r3
 8005200:	d0df      	beq.n	80051c2 <_malloc_r+0x86>
 8005202:	1a1b      	subs	r3, r3, r0
 8005204:	50a3      	str	r3, [r4, r2]
 8005206:	e7dc      	b.n	80051c2 <_malloc_r+0x86>
 8005208:	605a      	str	r2, [r3, #4]
 800520a:	e7ef      	b.n	80051ec <_malloc_r+0xb0>
 800520c:	0023      	movs	r3, r4
 800520e:	6864      	ldr	r4, [r4, #4]
 8005210:	e7a6      	b.n	8005160 <_malloc_r+0x24>
 8005212:	9c00      	ldr	r4, [sp, #0]
 8005214:	6863      	ldr	r3, [r4, #4]
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	e7ad      	b.n	8005176 <_malloc_r+0x3a>
 800521a:	001a      	movs	r2, r3
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	42a3      	cmp	r3, r4
 8005220:	d1fb      	bne.n	800521a <_malloc_r+0xde>
 8005222:	2300      	movs	r3, #0
 8005224:	e7da      	b.n	80051dc <_malloc_r+0xa0>
 8005226:	230c      	movs	r3, #12
 8005228:	0028      	movs	r0, r5
 800522a:	602b      	str	r3, [r5, #0]
 800522c:	f000 f80e 	bl	800524c <__malloc_unlock>
 8005230:	e7c6      	b.n	80051c0 <_malloc_r+0x84>
 8005232:	6007      	str	r7, [r0, #0]
 8005234:	e7da      	b.n	80051ec <_malloc_r+0xb0>
 8005236:	46c0      	nop			@ (mov r8, r8)
 8005238:	20000300 	.word	0x20000300

0800523c <__malloc_lock>:
 800523c:	b510      	push	{r4, lr}
 800523e:	4802      	ldr	r0, [pc, #8]	@ (8005248 <__malloc_lock+0xc>)
 8005240:	f7ff ff0e 	bl	8005060 <__retarget_lock_acquire_recursive>
 8005244:	bd10      	pop	{r4, pc}
 8005246:	46c0      	nop			@ (mov r8, r8)
 8005248:	200002f8 	.word	0x200002f8

0800524c <__malloc_unlock>:
 800524c:	b510      	push	{r4, lr}
 800524e:	4802      	ldr	r0, [pc, #8]	@ (8005258 <__malloc_unlock+0xc>)
 8005250:	f7ff ff07 	bl	8005062 <__retarget_lock_release_recursive>
 8005254:	bd10      	pop	{r4, pc}
 8005256:	46c0      	nop			@ (mov r8, r8)
 8005258:	200002f8 	.word	0x200002f8

0800525c <__ssputs_r>:
 800525c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800525e:	688e      	ldr	r6, [r1, #8]
 8005260:	b085      	sub	sp, #20
 8005262:	001f      	movs	r7, r3
 8005264:	000c      	movs	r4, r1
 8005266:	680b      	ldr	r3, [r1, #0]
 8005268:	9002      	str	r0, [sp, #8]
 800526a:	9203      	str	r2, [sp, #12]
 800526c:	42be      	cmp	r6, r7
 800526e:	d830      	bhi.n	80052d2 <__ssputs_r+0x76>
 8005270:	210c      	movs	r1, #12
 8005272:	5e62      	ldrsh	r2, [r4, r1]
 8005274:	2190      	movs	r1, #144	@ 0x90
 8005276:	00c9      	lsls	r1, r1, #3
 8005278:	420a      	tst	r2, r1
 800527a:	d028      	beq.n	80052ce <__ssputs_r+0x72>
 800527c:	2003      	movs	r0, #3
 800527e:	6921      	ldr	r1, [r4, #16]
 8005280:	1a5b      	subs	r3, r3, r1
 8005282:	9301      	str	r3, [sp, #4]
 8005284:	6963      	ldr	r3, [r4, #20]
 8005286:	4343      	muls	r3, r0
 8005288:	9801      	ldr	r0, [sp, #4]
 800528a:	0fdd      	lsrs	r5, r3, #31
 800528c:	18ed      	adds	r5, r5, r3
 800528e:	1c7b      	adds	r3, r7, #1
 8005290:	181b      	adds	r3, r3, r0
 8005292:	106d      	asrs	r5, r5, #1
 8005294:	42ab      	cmp	r3, r5
 8005296:	d900      	bls.n	800529a <__ssputs_r+0x3e>
 8005298:	001d      	movs	r5, r3
 800529a:	0552      	lsls	r2, r2, #21
 800529c:	d528      	bpl.n	80052f0 <__ssputs_r+0x94>
 800529e:	0029      	movs	r1, r5
 80052a0:	9802      	ldr	r0, [sp, #8]
 80052a2:	f7ff ff4b 	bl	800513c <_malloc_r>
 80052a6:	1e06      	subs	r6, r0, #0
 80052a8:	d02c      	beq.n	8005304 <__ssputs_r+0xa8>
 80052aa:	9a01      	ldr	r2, [sp, #4]
 80052ac:	6921      	ldr	r1, [r4, #16]
 80052ae:	f000 fade 	bl	800586e <memcpy>
 80052b2:	89a2      	ldrh	r2, [r4, #12]
 80052b4:	4b18      	ldr	r3, [pc, #96]	@ (8005318 <__ssputs_r+0xbc>)
 80052b6:	401a      	ands	r2, r3
 80052b8:	2380      	movs	r3, #128	@ 0x80
 80052ba:	4313      	orrs	r3, r2
 80052bc:	81a3      	strh	r3, [r4, #12]
 80052be:	9b01      	ldr	r3, [sp, #4]
 80052c0:	6126      	str	r6, [r4, #16]
 80052c2:	18f6      	adds	r6, r6, r3
 80052c4:	6026      	str	r6, [r4, #0]
 80052c6:	003e      	movs	r6, r7
 80052c8:	6165      	str	r5, [r4, #20]
 80052ca:	1aed      	subs	r5, r5, r3
 80052cc:	60a5      	str	r5, [r4, #8]
 80052ce:	42be      	cmp	r6, r7
 80052d0:	d900      	bls.n	80052d4 <__ssputs_r+0x78>
 80052d2:	003e      	movs	r6, r7
 80052d4:	0032      	movs	r2, r6
 80052d6:	9903      	ldr	r1, [sp, #12]
 80052d8:	6820      	ldr	r0, [r4, #0]
 80052da:	f000 fa99 	bl	8005810 <memmove>
 80052de:	2000      	movs	r0, #0
 80052e0:	68a3      	ldr	r3, [r4, #8]
 80052e2:	1b9b      	subs	r3, r3, r6
 80052e4:	60a3      	str	r3, [r4, #8]
 80052e6:	6823      	ldr	r3, [r4, #0]
 80052e8:	199b      	adds	r3, r3, r6
 80052ea:	6023      	str	r3, [r4, #0]
 80052ec:	b005      	add	sp, #20
 80052ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052f0:	002a      	movs	r2, r5
 80052f2:	9802      	ldr	r0, [sp, #8]
 80052f4:	f000 fac4 	bl	8005880 <_realloc_r>
 80052f8:	1e06      	subs	r6, r0, #0
 80052fa:	d1e0      	bne.n	80052be <__ssputs_r+0x62>
 80052fc:	6921      	ldr	r1, [r4, #16]
 80052fe:	9802      	ldr	r0, [sp, #8]
 8005300:	f7ff feb0 	bl	8005064 <_free_r>
 8005304:	230c      	movs	r3, #12
 8005306:	2001      	movs	r0, #1
 8005308:	9a02      	ldr	r2, [sp, #8]
 800530a:	4240      	negs	r0, r0
 800530c:	6013      	str	r3, [r2, #0]
 800530e:	89a2      	ldrh	r2, [r4, #12]
 8005310:	3334      	adds	r3, #52	@ 0x34
 8005312:	4313      	orrs	r3, r2
 8005314:	81a3      	strh	r3, [r4, #12]
 8005316:	e7e9      	b.n	80052ec <__ssputs_r+0x90>
 8005318:	fffffb7f 	.word	0xfffffb7f

0800531c <_svfiprintf_r>:
 800531c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800531e:	b0a1      	sub	sp, #132	@ 0x84
 8005320:	9003      	str	r0, [sp, #12]
 8005322:	001d      	movs	r5, r3
 8005324:	898b      	ldrh	r3, [r1, #12]
 8005326:	000f      	movs	r7, r1
 8005328:	0016      	movs	r6, r2
 800532a:	061b      	lsls	r3, r3, #24
 800532c:	d511      	bpl.n	8005352 <_svfiprintf_r+0x36>
 800532e:	690b      	ldr	r3, [r1, #16]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10e      	bne.n	8005352 <_svfiprintf_r+0x36>
 8005334:	2140      	movs	r1, #64	@ 0x40
 8005336:	f7ff ff01 	bl	800513c <_malloc_r>
 800533a:	6038      	str	r0, [r7, #0]
 800533c:	6138      	str	r0, [r7, #16]
 800533e:	2800      	cmp	r0, #0
 8005340:	d105      	bne.n	800534e <_svfiprintf_r+0x32>
 8005342:	230c      	movs	r3, #12
 8005344:	9a03      	ldr	r2, [sp, #12]
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	2001      	movs	r0, #1
 800534a:	4240      	negs	r0, r0
 800534c:	e0cf      	b.n	80054ee <_svfiprintf_r+0x1d2>
 800534e:	2340      	movs	r3, #64	@ 0x40
 8005350:	617b      	str	r3, [r7, #20]
 8005352:	2300      	movs	r3, #0
 8005354:	ac08      	add	r4, sp, #32
 8005356:	6163      	str	r3, [r4, #20]
 8005358:	3320      	adds	r3, #32
 800535a:	7663      	strb	r3, [r4, #25]
 800535c:	3310      	adds	r3, #16
 800535e:	76a3      	strb	r3, [r4, #26]
 8005360:	9507      	str	r5, [sp, #28]
 8005362:	0035      	movs	r5, r6
 8005364:	782b      	ldrb	r3, [r5, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <_svfiprintf_r+0x52>
 800536a:	2b25      	cmp	r3, #37	@ 0x25
 800536c:	d148      	bne.n	8005400 <_svfiprintf_r+0xe4>
 800536e:	1bab      	subs	r3, r5, r6
 8005370:	9305      	str	r3, [sp, #20]
 8005372:	42b5      	cmp	r5, r6
 8005374:	d00b      	beq.n	800538e <_svfiprintf_r+0x72>
 8005376:	0032      	movs	r2, r6
 8005378:	0039      	movs	r1, r7
 800537a:	9803      	ldr	r0, [sp, #12]
 800537c:	f7ff ff6e 	bl	800525c <__ssputs_r>
 8005380:	3001      	adds	r0, #1
 8005382:	d100      	bne.n	8005386 <_svfiprintf_r+0x6a>
 8005384:	e0ae      	b.n	80054e4 <_svfiprintf_r+0x1c8>
 8005386:	6963      	ldr	r3, [r4, #20]
 8005388:	9a05      	ldr	r2, [sp, #20]
 800538a:	189b      	adds	r3, r3, r2
 800538c:	6163      	str	r3, [r4, #20]
 800538e:	782b      	ldrb	r3, [r5, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d100      	bne.n	8005396 <_svfiprintf_r+0x7a>
 8005394:	e0a6      	b.n	80054e4 <_svfiprintf_r+0x1c8>
 8005396:	2201      	movs	r2, #1
 8005398:	2300      	movs	r3, #0
 800539a:	4252      	negs	r2, r2
 800539c:	6062      	str	r2, [r4, #4]
 800539e:	a904      	add	r1, sp, #16
 80053a0:	3254      	adds	r2, #84	@ 0x54
 80053a2:	1852      	adds	r2, r2, r1
 80053a4:	1c6e      	adds	r6, r5, #1
 80053a6:	6023      	str	r3, [r4, #0]
 80053a8:	60e3      	str	r3, [r4, #12]
 80053aa:	60a3      	str	r3, [r4, #8]
 80053ac:	7013      	strb	r3, [r2, #0]
 80053ae:	65a3      	str	r3, [r4, #88]	@ 0x58
 80053b0:	4b54      	ldr	r3, [pc, #336]	@ (8005504 <_svfiprintf_r+0x1e8>)
 80053b2:	2205      	movs	r2, #5
 80053b4:	0018      	movs	r0, r3
 80053b6:	7831      	ldrb	r1, [r6, #0]
 80053b8:	9305      	str	r3, [sp, #20]
 80053ba:	f000 fa4d 	bl	8005858 <memchr>
 80053be:	1c75      	adds	r5, r6, #1
 80053c0:	2800      	cmp	r0, #0
 80053c2:	d11f      	bne.n	8005404 <_svfiprintf_r+0xe8>
 80053c4:	6822      	ldr	r2, [r4, #0]
 80053c6:	06d3      	lsls	r3, r2, #27
 80053c8:	d504      	bpl.n	80053d4 <_svfiprintf_r+0xb8>
 80053ca:	2353      	movs	r3, #83	@ 0x53
 80053cc:	a904      	add	r1, sp, #16
 80053ce:	185b      	adds	r3, r3, r1
 80053d0:	2120      	movs	r1, #32
 80053d2:	7019      	strb	r1, [r3, #0]
 80053d4:	0713      	lsls	r3, r2, #28
 80053d6:	d504      	bpl.n	80053e2 <_svfiprintf_r+0xc6>
 80053d8:	2353      	movs	r3, #83	@ 0x53
 80053da:	a904      	add	r1, sp, #16
 80053dc:	185b      	adds	r3, r3, r1
 80053de:	212b      	movs	r1, #43	@ 0x2b
 80053e0:	7019      	strb	r1, [r3, #0]
 80053e2:	7833      	ldrb	r3, [r6, #0]
 80053e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80053e6:	d016      	beq.n	8005416 <_svfiprintf_r+0xfa>
 80053e8:	0035      	movs	r5, r6
 80053ea:	2100      	movs	r1, #0
 80053ec:	200a      	movs	r0, #10
 80053ee:	68e3      	ldr	r3, [r4, #12]
 80053f0:	782a      	ldrb	r2, [r5, #0]
 80053f2:	1c6e      	adds	r6, r5, #1
 80053f4:	3a30      	subs	r2, #48	@ 0x30
 80053f6:	2a09      	cmp	r2, #9
 80053f8:	d950      	bls.n	800549c <_svfiprintf_r+0x180>
 80053fa:	2900      	cmp	r1, #0
 80053fc:	d111      	bne.n	8005422 <_svfiprintf_r+0x106>
 80053fe:	e017      	b.n	8005430 <_svfiprintf_r+0x114>
 8005400:	3501      	adds	r5, #1
 8005402:	e7af      	b.n	8005364 <_svfiprintf_r+0x48>
 8005404:	9b05      	ldr	r3, [sp, #20]
 8005406:	6822      	ldr	r2, [r4, #0]
 8005408:	1ac0      	subs	r0, r0, r3
 800540a:	2301      	movs	r3, #1
 800540c:	4083      	lsls	r3, r0
 800540e:	4313      	orrs	r3, r2
 8005410:	002e      	movs	r6, r5
 8005412:	6023      	str	r3, [r4, #0]
 8005414:	e7cc      	b.n	80053b0 <_svfiprintf_r+0x94>
 8005416:	9b07      	ldr	r3, [sp, #28]
 8005418:	1d19      	adds	r1, r3, #4
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	9107      	str	r1, [sp, #28]
 800541e:	2b00      	cmp	r3, #0
 8005420:	db01      	blt.n	8005426 <_svfiprintf_r+0x10a>
 8005422:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005424:	e004      	b.n	8005430 <_svfiprintf_r+0x114>
 8005426:	425b      	negs	r3, r3
 8005428:	60e3      	str	r3, [r4, #12]
 800542a:	2302      	movs	r3, #2
 800542c:	4313      	orrs	r3, r2
 800542e:	6023      	str	r3, [r4, #0]
 8005430:	782b      	ldrb	r3, [r5, #0]
 8005432:	2b2e      	cmp	r3, #46	@ 0x2e
 8005434:	d10c      	bne.n	8005450 <_svfiprintf_r+0x134>
 8005436:	786b      	ldrb	r3, [r5, #1]
 8005438:	2b2a      	cmp	r3, #42	@ 0x2a
 800543a:	d134      	bne.n	80054a6 <_svfiprintf_r+0x18a>
 800543c:	9b07      	ldr	r3, [sp, #28]
 800543e:	3502      	adds	r5, #2
 8005440:	1d1a      	adds	r2, r3, #4
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	9207      	str	r2, [sp, #28]
 8005446:	2b00      	cmp	r3, #0
 8005448:	da01      	bge.n	800544e <_svfiprintf_r+0x132>
 800544a:	2301      	movs	r3, #1
 800544c:	425b      	negs	r3, r3
 800544e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005450:	4e2d      	ldr	r6, [pc, #180]	@ (8005508 <_svfiprintf_r+0x1ec>)
 8005452:	2203      	movs	r2, #3
 8005454:	0030      	movs	r0, r6
 8005456:	7829      	ldrb	r1, [r5, #0]
 8005458:	f000 f9fe 	bl	8005858 <memchr>
 800545c:	2800      	cmp	r0, #0
 800545e:	d006      	beq.n	800546e <_svfiprintf_r+0x152>
 8005460:	2340      	movs	r3, #64	@ 0x40
 8005462:	1b80      	subs	r0, r0, r6
 8005464:	4083      	lsls	r3, r0
 8005466:	6822      	ldr	r2, [r4, #0]
 8005468:	3501      	adds	r5, #1
 800546a:	4313      	orrs	r3, r2
 800546c:	6023      	str	r3, [r4, #0]
 800546e:	7829      	ldrb	r1, [r5, #0]
 8005470:	2206      	movs	r2, #6
 8005472:	4826      	ldr	r0, [pc, #152]	@ (800550c <_svfiprintf_r+0x1f0>)
 8005474:	1c6e      	adds	r6, r5, #1
 8005476:	7621      	strb	r1, [r4, #24]
 8005478:	f000 f9ee 	bl	8005858 <memchr>
 800547c:	2800      	cmp	r0, #0
 800547e:	d038      	beq.n	80054f2 <_svfiprintf_r+0x1d6>
 8005480:	4b23      	ldr	r3, [pc, #140]	@ (8005510 <_svfiprintf_r+0x1f4>)
 8005482:	2b00      	cmp	r3, #0
 8005484:	d122      	bne.n	80054cc <_svfiprintf_r+0x1b0>
 8005486:	2207      	movs	r2, #7
 8005488:	9b07      	ldr	r3, [sp, #28]
 800548a:	3307      	adds	r3, #7
 800548c:	4393      	bics	r3, r2
 800548e:	3308      	adds	r3, #8
 8005490:	9307      	str	r3, [sp, #28]
 8005492:	6963      	ldr	r3, [r4, #20]
 8005494:	9a04      	ldr	r2, [sp, #16]
 8005496:	189b      	adds	r3, r3, r2
 8005498:	6163      	str	r3, [r4, #20]
 800549a:	e762      	b.n	8005362 <_svfiprintf_r+0x46>
 800549c:	4343      	muls	r3, r0
 800549e:	0035      	movs	r5, r6
 80054a0:	2101      	movs	r1, #1
 80054a2:	189b      	adds	r3, r3, r2
 80054a4:	e7a4      	b.n	80053f0 <_svfiprintf_r+0xd4>
 80054a6:	2300      	movs	r3, #0
 80054a8:	200a      	movs	r0, #10
 80054aa:	0019      	movs	r1, r3
 80054ac:	3501      	adds	r5, #1
 80054ae:	6063      	str	r3, [r4, #4]
 80054b0:	782a      	ldrb	r2, [r5, #0]
 80054b2:	1c6e      	adds	r6, r5, #1
 80054b4:	3a30      	subs	r2, #48	@ 0x30
 80054b6:	2a09      	cmp	r2, #9
 80054b8:	d903      	bls.n	80054c2 <_svfiprintf_r+0x1a6>
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d0c8      	beq.n	8005450 <_svfiprintf_r+0x134>
 80054be:	9109      	str	r1, [sp, #36]	@ 0x24
 80054c0:	e7c6      	b.n	8005450 <_svfiprintf_r+0x134>
 80054c2:	4341      	muls	r1, r0
 80054c4:	0035      	movs	r5, r6
 80054c6:	2301      	movs	r3, #1
 80054c8:	1889      	adds	r1, r1, r2
 80054ca:	e7f1      	b.n	80054b0 <_svfiprintf_r+0x194>
 80054cc:	aa07      	add	r2, sp, #28
 80054ce:	9200      	str	r2, [sp, #0]
 80054d0:	0021      	movs	r1, r4
 80054d2:	003a      	movs	r2, r7
 80054d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005514 <_svfiprintf_r+0x1f8>)
 80054d6:	9803      	ldr	r0, [sp, #12]
 80054d8:	e000      	b.n	80054dc <_svfiprintf_r+0x1c0>
 80054da:	bf00      	nop
 80054dc:	9004      	str	r0, [sp, #16]
 80054de:	9b04      	ldr	r3, [sp, #16]
 80054e0:	3301      	adds	r3, #1
 80054e2:	d1d6      	bne.n	8005492 <_svfiprintf_r+0x176>
 80054e4:	89bb      	ldrh	r3, [r7, #12]
 80054e6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80054e8:	065b      	lsls	r3, r3, #25
 80054ea:	d500      	bpl.n	80054ee <_svfiprintf_r+0x1d2>
 80054ec:	e72c      	b.n	8005348 <_svfiprintf_r+0x2c>
 80054ee:	b021      	add	sp, #132	@ 0x84
 80054f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054f2:	aa07      	add	r2, sp, #28
 80054f4:	9200      	str	r2, [sp, #0]
 80054f6:	0021      	movs	r1, r4
 80054f8:	003a      	movs	r2, r7
 80054fa:	4b06      	ldr	r3, [pc, #24]	@ (8005514 <_svfiprintf_r+0x1f8>)
 80054fc:	9803      	ldr	r0, [sp, #12]
 80054fe:	f000 f87b 	bl	80055f8 <_printf_i>
 8005502:	e7eb      	b.n	80054dc <_svfiprintf_r+0x1c0>
 8005504:	08005990 	.word	0x08005990
 8005508:	08005996 	.word	0x08005996
 800550c:	0800599a 	.word	0x0800599a
 8005510:	00000000 	.word	0x00000000
 8005514:	0800525d 	.word	0x0800525d

08005518 <_printf_common>:
 8005518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800551a:	0016      	movs	r6, r2
 800551c:	9301      	str	r3, [sp, #4]
 800551e:	688a      	ldr	r2, [r1, #8]
 8005520:	690b      	ldr	r3, [r1, #16]
 8005522:	000c      	movs	r4, r1
 8005524:	9000      	str	r0, [sp, #0]
 8005526:	4293      	cmp	r3, r2
 8005528:	da00      	bge.n	800552c <_printf_common+0x14>
 800552a:	0013      	movs	r3, r2
 800552c:	0022      	movs	r2, r4
 800552e:	6033      	str	r3, [r6, #0]
 8005530:	3243      	adds	r2, #67	@ 0x43
 8005532:	7812      	ldrb	r2, [r2, #0]
 8005534:	2a00      	cmp	r2, #0
 8005536:	d001      	beq.n	800553c <_printf_common+0x24>
 8005538:	3301      	adds	r3, #1
 800553a:	6033      	str	r3, [r6, #0]
 800553c:	6823      	ldr	r3, [r4, #0]
 800553e:	069b      	lsls	r3, r3, #26
 8005540:	d502      	bpl.n	8005548 <_printf_common+0x30>
 8005542:	6833      	ldr	r3, [r6, #0]
 8005544:	3302      	adds	r3, #2
 8005546:	6033      	str	r3, [r6, #0]
 8005548:	6822      	ldr	r2, [r4, #0]
 800554a:	2306      	movs	r3, #6
 800554c:	0015      	movs	r5, r2
 800554e:	401d      	ands	r5, r3
 8005550:	421a      	tst	r2, r3
 8005552:	d027      	beq.n	80055a4 <_printf_common+0x8c>
 8005554:	0023      	movs	r3, r4
 8005556:	3343      	adds	r3, #67	@ 0x43
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	1e5a      	subs	r2, r3, #1
 800555c:	4193      	sbcs	r3, r2
 800555e:	6822      	ldr	r2, [r4, #0]
 8005560:	0692      	lsls	r2, r2, #26
 8005562:	d430      	bmi.n	80055c6 <_printf_common+0xae>
 8005564:	0022      	movs	r2, r4
 8005566:	9901      	ldr	r1, [sp, #4]
 8005568:	9800      	ldr	r0, [sp, #0]
 800556a:	9d08      	ldr	r5, [sp, #32]
 800556c:	3243      	adds	r2, #67	@ 0x43
 800556e:	47a8      	blx	r5
 8005570:	3001      	adds	r0, #1
 8005572:	d025      	beq.n	80055c0 <_printf_common+0xa8>
 8005574:	2206      	movs	r2, #6
 8005576:	6823      	ldr	r3, [r4, #0]
 8005578:	2500      	movs	r5, #0
 800557a:	4013      	ands	r3, r2
 800557c:	2b04      	cmp	r3, #4
 800557e:	d105      	bne.n	800558c <_printf_common+0x74>
 8005580:	6833      	ldr	r3, [r6, #0]
 8005582:	68e5      	ldr	r5, [r4, #12]
 8005584:	1aed      	subs	r5, r5, r3
 8005586:	43eb      	mvns	r3, r5
 8005588:	17db      	asrs	r3, r3, #31
 800558a:	401d      	ands	r5, r3
 800558c:	68a3      	ldr	r3, [r4, #8]
 800558e:	6922      	ldr	r2, [r4, #16]
 8005590:	4293      	cmp	r3, r2
 8005592:	dd01      	ble.n	8005598 <_printf_common+0x80>
 8005594:	1a9b      	subs	r3, r3, r2
 8005596:	18ed      	adds	r5, r5, r3
 8005598:	2600      	movs	r6, #0
 800559a:	42b5      	cmp	r5, r6
 800559c:	d120      	bne.n	80055e0 <_printf_common+0xc8>
 800559e:	2000      	movs	r0, #0
 80055a0:	e010      	b.n	80055c4 <_printf_common+0xac>
 80055a2:	3501      	adds	r5, #1
 80055a4:	68e3      	ldr	r3, [r4, #12]
 80055a6:	6832      	ldr	r2, [r6, #0]
 80055a8:	1a9b      	subs	r3, r3, r2
 80055aa:	42ab      	cmp	r3, r5
 80055ac:	ddd2      	ble.n	8005554 <_printf_common+0x3c>
 80055ae:	0022      	movs	r2, r4
 80055b0:	2301      	movs	r3, #1
 80055b2:	9901      	ldr	r1, [sp, #4]
 80055b4:	9800      	ldr	r0, [sp, #0]
 80055b6:	9f08      	ldr	r7, [sp, #32]
 80055b8:	3219      	adds	r2, #25
 80055ba:	47b8      	blx	r7
 80055bc:	3001      	adds	r0, #1
 80055be:	d1f0      	bne.n	80055a2 <_printf_common+0x8a>
 80055c0:	2001      	movs	r0, #1
 80055c2:	4240      	negs	r0, r0
 80055c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055c6:	2030      	movs	r0, #48	@ 0x30
 80055c8:	18e1      	adds	r1, r4, r3
 80055ca:	3143      	adds	r1, #67	@ 0x43
 80055cc:	7008      	strb	r0, [r1, #0]
 80055ce:	0021      	movs	r1, r4
 80055d0:	1c5a      	adds	r2, r3, #1
 80055d2:	3145      	adds	r1, #69	@ 0x45
 80055d4:	7809      	ldrb	r1, [r1, #0]
 80055d6:	18a2      	adds	r2, r4, r2
 80055d8:	3243      	adds	r2, #67	@ 0x43
 80055da:	3302      	adds	r3, #2
 80055dc:	7011      	strb	r1, [r2, #0]
 80055de:	e7c1      	b.n	8005564 <_printf_common+0x4c>
 80055e0:	0022      	movs	r2, r4
 80055e2:	2301      	movs	r3, #1
 80055e4:	9901      	ldr	r1, [sp, #4]
 80055e6:	9800      	ldr	r0, [sp, #0]
 80055e8:	9f08      	ldr	r7, [sp, #32]
 80055ea:	321a      	adds	r2, #26
 80055ec:	47b8      	blx	r7
 80055ee:	3001      	adds	r0, #1
 80055f0:	d0e6      	beq.n	80055c0 <_printf_common+0xa8>
 80055f2:	3601      	adds	r6, #1
 80055f4:	e7d1      	b.n	800559a <_printf_common+0x82>
	...

080055f8 <_printf_i>:
 80055f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055fa:	b08b      	sub	sp, #44	@ 0x2c
 80055fc:	9206      	str	r2, [sp, #24]
 80055fe:	000a      	movs	r2, r1
 8005600:	3243      	adds	r2, #67	@ 0x43
 8005602:	9307      	str	r3, [sp, #28]
 8005604:	9005      	str	r0, [sp, #20]
 8005606:	9203      	str	r2, [sp, #12]
 8005608:	7e0a      	ldrb	r2, [r1, #24]
 800560a:	000c      	movs	r4, r1
 800560c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800560e:	2a78      	cmp	r2, #120	@ 0x78
 8005610:	d809      	bhi.n	8005626 <_printf_i+0x2e>
 8005612:	2a62      	cmp	r2, #98	@ 0x62
 8005614:	d80b      	bhi.n	800562e <_printf_i+0x36>
 8005616:	2a00      	cmp	r2, #0
 8005618:	d100      	bne.n	800561c <_printf_i+0x24>
 800561a:	e0ba      	b.n	8005792 <_printf_i+0x19a>
 800561c:	497a      	ldr	r1, [pc, #488]	@ (8005808 <_printf_i+0x210>)
 800561e:	9104      	str	r1, [sp, #16]
 8005620:	2a58      	cmp	r2, #88	@ 0x58
 8005622:	d100      	bne.n	8005626 <_printf_i+0x2e>
 8005624:	e08e      	b.n	8005744 <_printf_i+0x14c>
 8005626:	0025      	movs	r5, r4
 8005628:	3542      	adds	r5, #66	@ 0x42
 800562a:	702a      	strb	r2, [r5, #0]
 800562c:	e022      	b.n	8005674 <_printf_i+0x7c>
 800562e:	0010      	movs	r0, r2
 8005630:	3863      	subs	r0, #99	@ 0x63
 8005632:	2815      	cmp	r0, #21
 8005634:	d8f7      	bhi.n	8005626 <_printf_i+0x2e>
 8005636:	f7fa fd6f 	bl	8000118 <__gnu_thumb1_case_shi>
 800563a:	0016      	.short	0x0016
 800563c:	fff6001f 	.word	0xfff6001f
 8005640:	fff6fff6 	.word	0xfff6fff6
 8005644:	001ffff6 	.word	0x001ffff6
 8005648:	fff6fff6 	.word	0xfff6fff6
 800564c:	fff6fff6 	.word	0xfff6fff6
 8005650:	0036009f 	.word	0x0036009f
 8005654:	fff6007e 	.word	0xfff6007e
 8005658:	00b0fff6 	.word	0x00b0fff6
 800565c:	0036fff6 	.word	0x0036fff6
 8005660:	fff6fff6 	.word	0xfff6fff6
 8005664:	0082      	.short	0x0082
 8005666:	0025      	movs	r5, r4
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	3542      	adds	r5, #66	@ 0x42
 800566c:	1d11      	adds	r1, r2, #4
 800566e:	6019      	str	r1, [r3, #0]
 8005670:	6813      	ldr	r3, [r2, #0]
 8005672:	702b      	strb	r3, [r5, #0]
 8005674:	2301      	movs	r3, #1
 8005676:	e09e      	b.n	80057b6 <_printf_i+0x1be>
 8005678:	6818      	ldr	r0, [r3, #0]
 800567a:	6809      	ldr	r1, [r1, #0]
 800567c:	1d02      	adds	r2, r0, #4
 800567e:	060d      	lsls	r5, r1, #24
 8005680:	d50b      	bpl.n	800569a <_printf_i+0xa2>
 8005682:	6806      	ldr	r6, [r0, #0]
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	2e00      	cmp	r6, #0
 8005688:	da03      	bge.n	8005692 <_printf_i+0x9a>
 800568a:	232d      	movs	r3, #45	@ 0x2d
 800568c:	9a03      	ldr	r2, [sp, #12]
 800568e:	4276      	negs	r6, r6
 8005690:	7013      	strb	r3, [r2, #0]
 8005692:	4b5d      	ldr	r3, [pc, #372]	@ (8005808 <_printf_i+0x210>)
 8005694:	270a      	movs	r7, #10
 8005696:	9304      	str	r3, [sp, #16]
 8005698:	e018      	b.n	80056cc <_printf_i+0xd4>
 800569a:	6806      	ldr	r6, [r0, #0]
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	0649      	lsls	r1, r1, #25
 80056a0:	d5f1      	bpl.n	8005686 <_printf_i+0x8e>
 80056a2:	b236      	sxth	r6, r6
 80056a4:	e7ef      	b.n	8005686 <_printf_i+0x8e>
 80056a6:	6808      	ldr	r0, [r1, #0]
 80056a8:	6819      	ldr	r1, [r3, #0]
 80056aa:	c940      	ldmia	r1!, {r6}
 80056ac:	0605      	lsls	r5, r0, #24
 80056ae:	d402      	bmi.n	80056b6 <_printf_i+0xbe>
 80056b0:	0640      	lsls	r0, r0, #25
 80056b2:	d500      	bpl.n	80056b6 <_printf_i+0xbe>
 80056b4:	b2b6      	uxth	r6, r6
 80056b6:	6019      	str	r1, [r3, #0]
 80056b8:	4b53      	ldr	r3, [pc, #332]	@ (8005808 <_printf_i+0x210>)
 80056ba:	270a      	movs	r7, #10
 80056bc:	9304      	str	r3, [sp, #16]
 80056be:	2a6f      	cmp	r2, #111	@ 0x6f
 80056c0:	d100      	bne.n	80056c4 <_printf_i+0xcc>
 80056c2:	3f02      	subs	r7, #2
 80056c4:	0023      	movs	r3, r4
 80056c6:	2200      	movs	r2, #0
 80056c8:	3343      	adds	r3, #67	@ 0x43
 80056ca:	701a      	strb	r2, [r3, #0]
 80056cc:	6863      	ldr	r3, [r4, #4]
 80056ce:	60a3      	str	r3, [r4, #8]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	db06      	blt.n	80056e2 <_printf_i+0xea>
 80056d4:	2104      	movs	r1, #4
 80056d6:	6822      	ldr	r2, [r4, #0]
 80056d8:	9d03      	ldr	r5, [sp, #12]
 80056da:	438a      	bics	r2, r1
 80056dc:	6022      	str	r2, [r4, #0]
 80056de:	4333      	orrs	r3, r6
 80056e0:	d00c      	beq.n	80056fc <_printf_i+0x104>
 80056e2:	9d03      	ldr	r5, [sp, #12]
 80056e4:	0030      	movs	r0, r6
 80056e6:	0039      	movs	r1, r7
 80056e8:	f7fa fda6 	bl	8000238 <__aeabi_uidivmod>
 80056ec:	9b04      	ldr	r3, [sp, #16]
 80056ee:	3d01      	subs	r5, #1
 80056f0:	5c5b      	ldrb	r3, [r3, r1]
 80056f2:	702b      	strb	r3, [r5, #0]
 80056f4:	0033      	movs	r3, r6
 80056f6:	0006      	movs	r6, r0
 80056f8:	429f      	cmp	r7, r3
 80056fa:	d9f3      	bls.n	80056e4 <_printf_i+0xec>
 80056fc:	2f08      	cmp	r7, #8
 80056fe:	d109      	bne.n	8005714 <_printf_i+0x11c>
 8005700:	6823      	ldr	r3, [r4, #0]
 8005702:	07db      	lsls	r3, r3, #31
 8005704:	d506      	bpl.n	8005714 <_printf_i+0x11c>
 8005706:	6862      	ldr	r2, [r4, #4]
 8005708:	6923      	ldr	r3, [r4, #16]
 800570a:	429a      	cmp	r2, r3
 800570c:	dc02      	bgt.n	8005714 <_printf_i+0x11c>
 800570e:	2330      	movs	r3, #48	@ 0x30
 8005710:	3d01      	subs	r5, #1
 8005712:	702b      	strb	r3, [r5, #0]
 8005714:	9b03      	ldr	r3, [sp, #12]
 8005716:	1b5b      	subs	r3, r3, r5
 8005718:	6123      	str	r3, [r4, #16]
 800571a:	9b07      	ldr	r3, [sp, #28]
 800571c:	0021      	movs	r1, r4
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	9805      	ldr	r0, [sp, #20]
 8005722:	9b06      	ldr	r3, [sp, #24]
 8005724:	aa09      	add	r2, sp, #36	@ 0x24
 8005726:	f7ff fef7 	bl	8005518 <_printf_common>
 800572a:	3001      	adds	r0, #1
 800572c:	d148      	bne.n	80057c0 <_printf_i+0x1c8>
 800572e:	2001      	movs	r0, #1
 8005730:	4240      	negs	r0, r0
 8005732:	b00b      	add	sp, #44	@ 0x2c
 8005734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005736:	2220      	movs	r2, #32
 8005738:	6809      	ldr	r1, [r1, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	6022      	str	r2, [r4, #0]
 800573e:	2278      	movs	r2, #120	@ 0x78
 8005740:	4932      	ldr	r1, [pc, #200]	@ (800580c <_printf_i+0x214>)
 8005742:	9104      	str	r1, [sp, #16]
 8005744:	0021      	movs	r1, r4
 8005746:	3145      	adds	r1, #69	@ 0x45
 8005748:	700a      	strb	r2, [r1, #0]
 800574a:	6819      	ldr	r1, [r3, #0]
 800574c:	6822      	ldr	r2, [r4, #0]
 800574e:	c940      	ldmia	r1!, {r6}
 8005750:	0610      	lsls	r0, r2, #24
 8005752:	d402      	bmi.n	800575a <_printf_i+0x162>
 8005754:	0650      	lsls	r0, r2, #25
 8005756:	d500      	bpl.n	800575a <_printf_i+0x162>
 8005758:	b2b6      	uxth	r6, r6
 800575a:	6019      	str	r1, [r3, #0]
 800575c:	07d3      	lsls	r3, r2, #31
 800575e:	d502      	bpl.n	8005766 <_printf_i+0x16e>
 8005760:	2320      	movs	r3, #32
 8005762:	4313      	orrs	r3, r2
 8005764:	6023      	str	r3, [r4, #0]
 8005766:	2e00      	cmp	r6, #0
 8005768:	d001      	beq.n	800576e <_printf_i+0x176>
 800576a:	2710      	movs	r7, #16
 800576c:	e7aa      	b.n	80056c4 <_printf_i+0xcc>
 800576e:	2220      	movs	r2, #32
 8005770:	6823      	ldr	r3, [r4, #0]
 8005772:	4393      	bics	r3, r2
 8005774:	6023      	str	r3, [r4, #0]
 8005776:	e7f8      	b.n	800576a <_printf_i+0x172>
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	680d      	ldr	r5, [r1, #0]
 800577c:	1d10      	adds	r0, r2, #4
 800577e:	6949      	ldr	r1, [r1, #20]
 8005780:	6018      	str	r0, [r3, #0]
 8005782:	6813      	ldr	r3, [r2, #0]
 8005784:	062e      	lsls	r6, r5, #24
 8005786:	d501      	bpl.n	800578c <_printf_i+0x194>
 8005788:	6019      	str	r1, [r3, #0]
 800578a:	e002      	b.n	8005792 <_printf_i+0x19a>
 800578c:	066d      	lsls	r5, r5, #25
 800578e:	d5fb      	bpl.n	8005788 <_printf_i+0x190>
 8005790:	8019      	strh	r1, [r3, #0]
 8005792:	2300      	movs	r3, #0
 8005794:	9d03      	ldr	r5, [sp, #12]
 8005796:	6123      	str	r3, [r4, #16]
 8005798:	e7bf      	b.n	800571a <_printf_i+0x122>
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	1d11      	adds	r1, r2, #4
 800579e:	6019      	str	r1, [r3, #0]
 80057a0:	6815      	ldr	r5, [r2, #0]
 80057a2:	2100      	movs	r1, #0
 80057a4:	0028      	movs	r0, r5
 80057a6:	6862      	ldr	r2, [r4, #4]
 80057a8:	f000 f856 	bl	8005858 <memchr>
 80057ac:	2800      	cmp	r0, #0
 80057ae:	d001      	beq.n	80057b4 <_printf_i+0x1bc>
 80057b0:	1b40      	subs	r0, r0, r5
 80057b2:	6060      	str	r0, [r4, #4]
 80057b4:	6863      	ldr	r3, [r4, #4]
 80057b6:	6123      	str	r3, [r4, #16]
 80057b8:	2300      	movs	r3, #0
 80057ba:	9a03      	ldr	r2, [sp, #12]
 80057bc:	7013      	strb	r3, [r2, #0]
 80057be:	e7ac      	b.n	800571a <_printf_i+0x122>
 80057c0:	002a      	movs	r2, r5
 80057c2:	6923      	ldr	r3, [r4, #16]
 80057c4:	9906      	ldr	r1, [sp, #24]
 80057c6:	9805      	ldr	r0, [sp, #20]
 80057c8:	9d07      	ldr	r5, [sp, #28]
 80057ca:	47a8      	blx	r5
 80057cc:	3001      	adds	r0, #1
 80057ce:	d0ae      	beq.n	800572e <_printf_i+0x136>
 80057d0:	6823      	ldr	r3, [r4, #0]
 80057d2:	079b      	lsls	r3, r3, #30
 80057d4:	d415      	bmi.n	8005802 <_printf_i+0x20a>
 80057d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057d8:	68e0      	ldr	r0, [r4, #12]
 80057da:	4298      	cmp	r0, r3
 80057dc:	daa9      	bge.n	8005732 <_printf_i+0x13a>
 80057de:	0018      	movs	r0, r3
 80057e0:	e7a7      	b.n	8005732 <_printf_i+0x13a>
 80057e2:	0022      	movs	r2, r4
 80057e4:	2301      	movs	r3, #1
 80057e6:	9906      	ldr	r1, [sp, #24]
 80057e8:	9805      	ldr	r0, [sp, #20]
 80057ea:	9e07      	ldr	r6, [sp, #28]
 80057ec:	3219      	adds	r2, #25
 80057ee:	47b0      	blx	r6
 80057f0:	3001      	adds	r0, #1
 80057f2:	d09c      	beq.n	800572e <_printf_i+0x136>
 80057f4:	3501      	adds	r5, #1
 80057f6:	68e3      	ldr	r3, [r4, #12]
 80057f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057fa:	1a9b      	subs	r3, r3, r2
 80057fc:	42ab      	cmp	r3, r5
 80057fe:	dcf0      	bgt.n	80057e2 <_printf_i+0x1ea>
 8005800:	e7e9      	b.n	80057d6 <_printf_i+0x1de>
 8005802:	2500      	movs	r5, #0
 8005804:	e7f7      	b.n	80057f6 <_printf_i+0x1fe>
 8005806:	46c0      	nop			@ (mov r8, r8)
 8005808:	080059a1 	.word	0x080059a1
 800580c:	080059b2 	.word	0x080059b2

08005810 <memmove>:
 8005810:	b510      	push	{r4, lr}
 8005812:	4288      	cmp	r0, r1
 8005814:	d902      	bls.n	800581c <memmove+0xc>
 8005816:	188b      	adds	r3, r1, r2
 8005818:	4298      	cmp	r0, r3
 800581a:	d308      	bcc.n	800582e <memmove+0x1e>
 800581c:	2300      	movs	r3, #0
 800581e:	429a      	cmp	r2, r3
 8005820:	d007      	beq.n	8005832 <memmove+0x22>
 8005822:	5ccc      	ldrb	r4, [r1, r3]
 8005824:	54c4      	strb	r4, [r0, r3]
 8005826:	3301      	adds	r3, #1
 8005828:	e7f9      	b.n	800581e <memmove+0xe>
 800582a:	5c8b      	ldrb	r3, [r1, r2]
 800582c:	5483      	strb	r3, [r0, r2]
 800582e:	3a01      	subs	r2, #1
 8005830:	d2fb      	bcs.n	800582a <memmove+0x1a>
 8005832:	bd10      	pop	{r4, pc}

08005834 <_sbrk_r>:
 8005834:	2300      	movs	r3, #0
 8005836:	b570      	push	{r4, r5, r6, lr}
 8005838:	4d06      	ldr	r5, [pc, #24]	@ (8005854 <_sbrk_r+0x20>)
 800583a:	0004      	movs	r4, r0
 800583c:	0008      	movs	r0, r1
 800583e:	602b      	str	r3, [r5, #0]
 8005840:	f7fc fe6c 	bl	800251c <_sbrk>
 8005844:	1c43      	adds	r3, r0, #1
 8005846:	d103      	bne.n	8005850 <_sbrk_r+0x1c>
 8005848:	682b      	ldr	r3, [r5, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d000      	beq.n	8005850 <_sbrk_r+0x1c>
 800584e:	6023      	str	r3, [r4, #0]
 8005850:	bd70      	pop	{r4, r5, r6, pc}
 8005852:	46c0      	nop			@ (mov r8, r8)
 8005854:	200002f4 	.word	0x200002f4

08005858 <memchr>:
 8005858:	b2c9      	uxtb	r1, r1
 800585a:	1882      	adds	r2, r0, r2
 800585c:	4290      	cmp	r0, r2
 800585e:	d101      	bne.n	8005864 <memchr+0xc>
 8005860:	2000      	movs	r0, #0
 8005862:	4770      	bx	lr
 8005864:	7803      	ldrb	r3, [r0, #0]
 8005866:	428b      	cmp	r3, r1
 8005868:	d0fb      	beq.n	8005862 <memchr+0xa>
 800586a:	3001      	adds	r0, #1
 800586c:	e7f6      	b.n	800585c <memchr+0x4>

0800586e <memcpy>:
 800586e:	2300      	movs	r3, #0
 8005870:	b510      	push	{r4, lr}
 8005872:	429a      	cmp	r2, r3
 8005874:	d100      	bne.n	8005878 <memcpy+0xa>
 8005876:	bd10      	pop	{r4, pc}
 8005878:	5ccc      	ldrb	r4, [r1, r3]
 800587a:	54c4      	strb	r4, [r0, r3]
 800587c:	3301      	adds	r3, #1
 800587e:	e7f8      	b.n	8005872 <memcpy+0x4>

08005880 <_realloc_r>:
 8005880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005882:	0006      	movs	r6, r0
 8005884:	000c      	movs	r4, r1
 8005886:	0015      	movs	r5, r2
 8005888:	2900      	cmp	r1, #0
 800588a:	d105      	bne.n	8005898 <_realloc_r+0x18>
 800588c:	0011      	movs	r1, r2
 800588e:	f7ff fc55 	bl	800513c <_malloc_r>
 8005892:	0004      	movs	r4, r0
 8005894:	0020      	movs	r0, r4
 8005896:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005898:	2a00      	cmp	r2, #0
 800589a:	d103      	bne.n	80058a4 <_realloc_r+0x24>
 800589c:	f7ff fbe2 	bl	8005064 <_free_r>
 80058a0:	002c      	movs	r4, r5
 80058a2:	e7f7      	b.n	8005894 <_realloc_r+0x14>
 80058a4:	f000 f81c 	bl	80058e0 <_malloc_usable_size_r>
 80058a8:	0007      	movs	r7, r0
 80058aa:	4285      	cmp	r5, r0
 80058ac:	d802      	bhi.n	80058b4 <_realloc_r+0x34>
 80058ae:	0843      	lsrs	r3, r0, #1
 80058b0:	42ab      	cmp	r3, r5
 80058b2:	d3ef      	bcc.n	8005894 <_realloc_r+0x14>
 80058b4:	0029      	movs	r1, r5
 80058b6:	0030      	movs	r0, r6
 80058b8:	f7ff fc40 	bl	800513c <_malloc_r>
 80058bc:	9001      	str	r0, [sp, #4]
 80058be:	2800      	cmp	r0, #0
 80058c0:	d101      	bne.n	80058c6 <_realloc_r+0x46>
 80058c2:	9c01      	ldr	r4, [sp, #4]
 80058c4:	e7e6      	b.n	8005894 <_realloc_r+0x14>
 80058c6:	002a      	movs	r2, r5
 80058c8:	42bd      	cmp	r5, r7
 80058ca:	d900      	bls.n	80058ce <_realloc_r+0x4e>
 80058cc:	003a      	movs	r2, r7
 80058ce:	0021      	movs	r1, r4
 80058d0:	9801      	ldr	r0, [sp, #4]
 80058d2:	f7ff ffcc 	bl	800586e <memcpy>
 80058d6:	0021      	movs	r1, r4
 80058d8:	0030      	movs	r0, r6
 80058da:	f7ff fbc3 	bl	8005064 <_free_r>
 80058de:	e7f0      	b.n	80058c2 <_realloc_r+0x42>

080058e0 <_malloc_usable_size_r>:
 80058e0:	1f0b      	subs	r3, r1, #4
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	1f18      	subs	r0, r3, #4
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	da01      	bge.n	80058ee <_malloc_usable_size_r+0xe>
 80058ea:	580b      	ldr	r3, [r1, r0]
 80058ec:	18c0      	adds	r0, r0, r3
 80058ee:	4770      	bx	lr

080058f0 <_init>:
 80058f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058f2:	46c0      	nop			@ (mov r8, r8)
 80058f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058f6:	bc08      	pop	{r3}
 80058f8:	469e      	mov	lr, r3
 80058fa:	4770      	bx	lr

080058fc <_fini>:
 80058fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058fe:	46c0      	nop			@ (mov r8, r8)
 8005900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005902:	bc08      	pop	{r3}
 8005904:	469e      	mov	lr, r3
 8005906:	4770      	bx	lr
