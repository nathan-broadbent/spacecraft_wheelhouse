
Wheelhouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004410  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080044d0  080044d0  000054d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800458c  0800458c  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800458c  0800458c  0000558c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004594  08004594  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004594  08004594  00005594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004598  08004598  00005598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800459c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  2000005c  080045f8  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  080045f8  00006368  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c5db  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001be8  00000000  00000000  0001265f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b80  00000000  00000000  00014248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008f8  00000000  00000000  00014dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012427  00000000  00000000  000156c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de10  00000000  00000000  00027ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00071783  00000000  00000000  000358f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a707a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e08  00000000  00000000  000a70c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000a9ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080044b8 	.word	0x080044b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	080044b8 	.word	0x080044b8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	@ (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__udivmoddi4>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	4657      	mov	r7, sl
 8000288:	464e      	mov	r6, r9
 800028a:	4645      	mov	r5, r8
 800028c:	46de      	mov	lr, fp
 800028e:	b5e0      	push	{r5, r6, r7, lr}
 8000290:	0004      	movs	r4, r0
 8000292:	000d      	movs	r5, r1
 8000294:	4692      	mov	sl, r2
 8000296:	4699      	mov	r9, r3
 8000298:	b083      	sub	sp, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d830      	bhi.n	8000300 <__udivmoddi4+0x7c>
 800029e:	d02d      	beq.n	80002fc <__udivmoddi4+0x78>
 80002a0:	4649      	mov	r1, r9
 80002a2:	4650      	mov	r0, sl
 80002a4:	f000 f8ba 	bl	800041c <__clzdi2>
 80002a8:	0029      	movs	r1, r5
 80002aa:	0006      	movs	r6, r0
 80002ac:	0020      	movs	r0, r4
 80002ae:	f000 f8b5 	bl	800041c <__clzdi2>
 80002b2:	1a33      	subs	r3, r6, r0
 80002b4:	4698      	mov	r8, r3
 80002b6:	3b20      	subs	r3, #32
 80002b8:	d434      	bmi.n	8000324 <__udivmoddi4+0xa0>
 80002ba:	469b      	mov	fp, r3
 80002bc:	4653      	mov	r3, sl
 80002be:	465a      	mov	r2, fp
 80002c0:	4093      	lsls	r3, r2
 80002c2:	4642      	mov	r2, r8
 80002c4:	001f      	movs	r7, r3
 80002c6:	4653      	mov	r3, sl
 80002c8:	4093      	lsls	r3, r2
 80002ca:	001e      	movs	r6, r3
 80002cc:	42af      	cmp	r7, r5
 80002ce:	d83b      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80002d0:	42af      	cmp	r7, r5
 80002d2:	d100      	bne.n	80002d6 <__udivmoddi4+0x52>
 80002d4:	e079      	b.n	80003ca <__udivmoddi4+0x146>
 80002d6:	465b      	mov	r3, fp
 80002d8:	1ba4      	subs	r4, r4, r6
 80002da:	41bd      	sbcs	r5, r7
 80002dc:	2b00      	cmp	r3, #0
 80002de:	da00      	bge.n	80002e2 <__udivmoddi4+0x5e>
 80002e0:	e076      	b.n	80003d0 <__udivmoddi4+0x14c>
 80002e2:	2200      	movs	r2, #0
 80002e4:	2300      	movs	r3, #0
 80002e6:	9200      	str	r2, [sp, #0]
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	2301      	movs	r3, #1
 80002ec:	465a      	mov	r2, fp
 80002ee:	4093      	lsls	r3, r2
 80002f0:	9301      	str	r3, [sp, #4]
 80002f2:	2301      	movs	r3, #1
 80002f4:	4642      	mov	r2, r8
 80002f6:	4093      	lsls	r3, r2
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	e029      	b.n	8000350 <__udivmoddi4+0xcc>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	d9cf      	bls.n	80002a0 <__udivmoddi4+0x1c>
 8000300:	2200      	movs	r2, #0
 8000302:	2300      	movs	r3, #0
 8000304:	9200      	str	r2, [sp, #0]
 8000306:	9301      	str	r3, [sp, #4]
 8000308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <__udivmoddi4+0x8e>
 800030e:	601c      	str	r4, [r3, #0]
 8000310:	605d      	str	r5, [r3, #4]
 8000312:	9800      	ldr	r0, [sp, #0]
 8000314:	9901      	ldr	r1, [sp, #4]
 8000316:	b003      	add	sp, #12
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	46bb      	mov	fp, r7
 800031c:	46b2      	mov	sl, r6
 800031e:	46a9      	mov	r9, r5
 8000320:	46a0      	mov	r8, r4
 8000322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000324:	4642      	mov	r2, r8
 8000326:	469b      	mov	fp, r3
 8000328:	2320      	movs	r3, #32
 800032a:	1a9b      	subs	r3, r3, r2
 800032c:	4652      	mov	r2, sl
 800032e:	40da      	lsrs	r2, r3
 8000330:	4641      	mov	r1, r8
 8000332:	0013      	movs	r3, r2
 8000334:	464a      	mov	r2, r9
 8000336:	408a      	lsls	r2, r1
 8000338:	0017      	movs	r7, r2
 800033a:	4642      	mov	r2, r8
 800033c:	431f      	orrs	r7, r3
 800033e:	4653      	mov	r3, sl
 8000340:	4093      	lsls	r3, r2
 8000342:	001e      	movs	r6, r3
 8000344:	42af      	cmp	r7, r5
 8000346:	d9c3      	bls.n	80002d0 <__udivmoddi4+0x4c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	4643      	mov	r3, r8
 8000352:	2b00      	cmp	r3, #0
 8000354:	d0d8      	beq.n	8000308 <__udivmoddi4+0x84>
 8000356:	07fb      	lsls	r3, r7, #31
 8000358:	0872      	lsrs	r2, r6, #1
 800035a:	431a      	orrs	r2, r3
 800035c:	4646      	mov	r6, r8
 800035e:	087b      	lsrs	r3, r7, #1
 8000360:	e00e      	b.n	8000380 <__udivmoddi4+0xfc>
 8000362:	42ab      	cmp	r3, r5
 8000364:	d101      	bne.n	800036a <__udivmoddi4+0xe6>
 8000366:	42a2      	cmp	r2, r4
 8000368:	d80c      	bhi.n	8000384 <__udivmoddi4+0x100>
 800036a:	1aa4      	subs	r4, r4, r2
 800036c:	419d      	sbcs	r5, r3
 800036e:	2001      	movs	r0, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2100      	movs	r1, #0
 8000376:	3e01      	subs	r6, #1
 8000378:	1824      	adds	r4, r4, r0
 800037a:	414d      	adcs	r5, r1
 800037c:	2e00      	cmp	r6, #0
 800037e:	d006      	beq.n	800038e <__udivmoddi4+0x10a>
 8000380:	42ab      	cmp	r3, r5
 8000382:	d9ee      	bls.n	8000362 <__udivmoddi4+0xde>
 8000384:	3e01      	subs	r6, #1
 8000386:	1924      	adds	r4, r4, r4
 8000388:	416d      	adcs	r5, r5
 800038a:	2e00      	cmp	r6, #0
 800038c:	d1f8      	bne.n	8000380 <__udivmoddi4+0xfc>
 800038e:	9800      	ldr	r0, [sp, #0]
 8000390:	9901      	ldr	r1, [sp, #4]
 8000392:	465b      	mov	r3, fp
 8000394:	1900      	adds	r0, r0, r4
 8000396:	4169      	adcs	r1, r5
 8000398:	2b00      	cmp	r3, #0
 800039a:	db24      	blt.n	80003e6 <__udivmoddi4+0x162>
 800039c:	002b      	movs	r3, r5
 800039e:	465a      	mov	r2, fp
 80003a0:	4644      	mov	r4, r8
 80003a2:	40d3      	lsrs	r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	40e2      	lsrs	r2, r4
 80003a8:	001c      	movs	r4, r3
 80003aa:	465b      	mov	r3, fp
 80003ac:	0015      	movs	r5, r2
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	db2a      	blt.n	8000408 <__udivmoddi4+0x184>
 80003b2:	0026      	movs	r6, r4
 80003b4:	409e      	lsls	r6, r3
 80003b6:	0033      	movs	r3, r6
 80003b8:	0026      	movs	r6, r4
 80003ba:	4647      	mov	r7, r8
 80003bc:	40be      	lsls	r6, r7
 80003be:	0032      	movs	r2, r6
 80003c0:	1a80      	subs	r0, r0, r2
 80003c2:	4199      	sbcs	r1, r3
 80003c4:	9000      	str	r0, [sp, #0]
 80003c6:	9101      	str	r1, [sp, #4]
 80003c8:	e79e      	b.n	8000308 <__udivmoddi4+0x84>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d8bc      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80003ce:	e782      	b.n	80002d6 <__udivmoddi4+0x52>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	2100      	movs	r1, #0
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	2200      	movs	r2, #0
 80003da:	9100      	str	r1, [sp, #0]
 80003dc:	9201      	str	r2, [sp, #4]
 80003de:	2201      	movs	r2, #1
 80003e0:	40da      	lsrs	r2, r3
 80003e2:	9201      	str	r2, [sp, #4]
 80003e4:	e785      	b.n	80002f2 <__udivmoddi4+0x6e>
 80003e6:	4642      	mov	r2, r8
 80003e8:	2320      	movs	r3, #32
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	4646      	mov	r6, r8
 80003f0:	409a      	lsls	r2, r3
 80003f2:	0023      	movs	r3, r4
 80003f4:	40f3      	lsrs	r3, r6
 80003f6:	4644      	mov	r4, r8
 80003f8:	4313      	orrs	r3, r2
 80003fa:	002a      	movs	r2, r5
 80003fc:	40e2      	lsrs	r2, r4
 80003fe:	001c      	movs	r4, r3
 8000400:	465b      	mov	r3, fp
 8000402:	0015      	movs	r5, r2
 8000404:	2b00      	cmp	r3, #0
 8000406:	dad4      	bge.n	80003b2 <__udivmoddi4+0x12e>
 8000408:	4642      	mov	r2, r8
 800040a:	002f      	movs	r7, r5
 800040c:	2320      	movs	r3, #32
 800040e:	0026      	movs	r6, r4
 8000410:	4097      	lsls	r7, r2
 8000412:	1a9b      	subs	r3, r3, r2
 8000414:	40de      	lsrs	r6, r3
 8000416:	003b      	movs	r3, r7
 8000418:	4333      	orrs	r3, r6
 800041a:	e7cd      	b.n	80003b8 <__udivmoddi4+0x134>

0800041c <__clzdi2>:
 800041c:	b510      	push	{r4, lr}
 800041e:	2900      	cmp	r1, #0
 8000420:	d103      	bne.n	800042a <__clzdi2+0xe>
 8000422:	f000 f807 	bl	8000434 <__clzsi2>
 8000426:	3020      	adds	r0, #32
 8000428:	e002      	b.n	8000430 <__clzdi2+0x14>
 800042a:	0008      	movs	r0, r1
 800042c:	f000 f802 	bl	8000434 <__clzsi2>
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__clzsi2>:
 8000434:	211c      	movs	r1, #28
 8000436:	2301      	movs	r3, #1
 8000438:	041b      	lsls	r3, r3, #16
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0xe>
 800043e:	0c00      	lsrs	r0, r0, #16
 8000440:	3910      	subs	r1, #16
 8000442:	0a1b      	lsrs	r3, r3, #8
 8000444:	4298      	cmp	r0, r3
 8000446:	d301      	bcc.n	800044c <__clzsi2+0x18>
 8000448:	0a00      	lsrs	r0, r0, #8
 800044a:	3908      	subs	r1, #8
 800044c:	091b      	lsrs	r3, r3, #4
 800044e:	4298      	cmp	r0, r3
 8000450:	d301      	bcc.n	8000456 <__clzsi2+0x22>
 8000452:	0900      	lsrs	r0, r0, #4
 8000454:	3904      	subs	r1, #4
 8000456:	a202      	add	r2, pc, #8	@ (adr r2, 8000460 <__clzsi2+0x2c>)
 8000458:	5c10      	ldrb	r0, [r2, r0]
 800045a:	1840      	adds	r0, r0, r1
 800045c:	4770      	bx	lr
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	02020304 	.word	0x02020304
 8000464:	01010101 	.word	0x01010101
	...

08000470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000474:	f000 fd32 	bl	8000edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000478:	f000 f860 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800047c:	f000 faa4 	bl	80009c8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000480:	f000 f982 	bl	8000788 <MX_TIM2_Init>
  MX_TIM22_Init();
 8000484:	f000 fa08 	bl	8000898 <MX_TIM22_Init>
  MX_LPUART1_UART_Init();
 8000488:	f000 f94e 	bl	8000728 <MX_LPUART1_UART_Init>
  MX_ADC_Init();
 800048c:	f000 f8c8 	bl	8000620 <MX_ADC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // Check the contents of the driver control register
  sprintf((char *)serial_string, "Hello From Wheelhouse!\r\n");
 8000490:	4a23      	ldr	r2, [pc, #140]	@ (8000520 <main+0xb0>)
 8000492:	4b24      	ldr	r3, [pc, #144]	@ (8000524 <main+0xb4>)
 8000494:	0011      	movs	r1, r2
 8000496:	0018      	movs	r0, r3
 8000498:	f003 fb72 	bl	8003b80 <siprintf>
  HAL_UART_Transmit(&hlpuart1, serial_string, strlen(serial_string), 10); // Write the buffer to the serial interface using UART protocol
 800049c:	4b21      	ldr	r3, [pc, #132]	@ (8000524 <main+0xb4>)
 800049e:	0018      	movs	r0, r3
 80004a0:	f7ff fe32 	bl	8000108 <strlen>
 80004a4:	0003      	movs	r3, r0
 80004a6:	b29a      	uxth	r2, r3
 80004a8:	491e      	ldr	r1, [pc, #120]	@ (8000524 <main+0xb4>)
 80004aa:	481f      	ldr	r0, [pc, #124]	@ (8000528 <main+0xb8>)
 80004ac:	230a      	movs	r3, #10
 80004ae:	f002 fe4d 	bl	800314c <HAL_UART_Transmit>
  // Turn driver off
//  HAL_GPIO_WritePin(DRVOFF_GPIO_Port, DRVOFF_Pin, GPIO_PIN_SET);

  // TOOD: Uncomment for running motor
  // Set Low inputs to high. This disables high-Z mode
  HAL_GPIO_WritePin(PWM_INLC_GPIO_Port, PWM_INLC_Pin, GPIO_PIN_RESET);
 80004b2:	4b1e      	ldr	r3, [pc, #120]	@ (800052c <main+0xbc>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	2140      	movs	r1, #64	@ 0x40
 80004b8:	0018      	movs	r0, r3
 80004ba:	f001 f9df 	bl	800187c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PWM_INLB_GPIO_Port, PWM_INLB_Pin, GPIO_PIN_RESET);
 80004be:	2380      	movs	r3, #128	@ 0x80
 80004c0:	0099      	lsls	r1, r3, #2
 80004c2:	23a0      	movs	r3, #160	@ 0xa0
 80004c4:	05db      	lsls	r3, r3, #23
 80004c6:	2200      	movs	r2, #0
 80004c8:	0018      	movs	r0, r3
 80004ca:	f001 f9d7 	bl	800187c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PWM_INLA_GPIO_Port, PWM_INLA_Pin, GPIO_PIN_RESET);
 80004ce:	23a0      	movs	r3, #160	@ 0xa0
 80004d0:	05db      	lsls	r3, r3, #23
 80004d2:	2200      	movs	r2, #0
 80004d4:	2101      	movs	r1, #1
 80004d6:	0018      	movs	r0, r3
 80004d8:	f001 f9d0 	bl	800187c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PWM_INHC_GPIO_Port, PWM_INHC_Pin, GPIO_PIN_RESET);
 80004dc:	4b13      	ldr	r3, [pc, #76]	@ (800052c <main+0xbc>)
 80004de:	2200      	movs	r2, #0
 80004e0:	2120      	movs	r1, #32
 80004e2:	0018      	movs	r0, r3
 80004e4:	f001 f9ca 	bl	800187c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PWM_INHB_GPIO_Port, PWM_INHB_Pin, GPIO_PIN_RESET);
 80004e8:	2380      	movs	r3, #128	@ 0x80
 80004ea:	0059      	lsls	r1, r3, #1
 80004ec:	23a0      	movs	r3, #160	@ 0xa0
 80004ee:	05db      	lsls	r3, r3, #23
 80004f0:	2200      	movs	r2, #0
 80004f2:	0018      	movs	r0, r3
 80004f4:	f001 f9c2 	bl	800187c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PWM_INHA_GPIO_Port, PWM_INHA_Pin, GPIO_PIN_RESET);
 80004f8:	23a0      	movs	r3, #160	@ 0xa0
 80004fa:	05db      	lsls	r3, r3, #23
 80004fc:	2200      	movs	r2, #0
 80004fe:	2102      	movs	r1, #2
 8000500:	0018      	movs	r0, r3
 8000502:	f001 f9bb 	bl	800187c <HAL_GPIO_WritePin>
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);  // Phase A
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);  // Phase B
//
//  // Start TIM22 PWM channel (slave)
//  HAL_TIM_PWM_Start(&htim22, TIM_CHANNEL_2); // Phase C
  theta = 0.0f;
 8000506:	4b0a      	ldr	r3, [pc, #40]	@ (8000530 <main+0xc0>)
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
  period = __HAL_TIM_GET_AUTORELOAD(&htim2);
 800050c:	4b09      	ldr	r3, [pc, #36]	@ (8000534 <main+0xc4>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000512:	4b09      	ldr	r3, [pc, #36]	@ (8000538 <main+0xc8>)
 8000514:	601a      	str	r2, [r3, #0]

//    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, compareB); // PWM_INHB
//    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, compareA); // PWM_INHA
//    __HAL_TIM_SET_COMPARE(&htim22, TIM_CHANNEL_2, compareC); // PWM_INHC

    HAL_Delay(1);
 8000516:	2001      	movs	r0, #1
 8000518:	f000 fd50 	bl	8000fbc <HAL_Delay>
 800051c:	e7fb      	b.n	8000516 <main+0xa6>
 800051e:	46c0      	nop			@ (mov r8, r8)
 8000520:	080044d0 	.word	0x080044d0
 8000524:	20000078 	.word	0x20000078
 8000528:	20000110 	.word	0x20000110
 800052c:	50000400 	.word	0x50000400
 8000530:	200000ac 	.word	0x200000ac
 8000534:	20000198 	.word	0x20000198
 8000538:	200000b0 	.word	0x200000b0

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b590      	push	{r4, r7, lr}
 800053e:	b099      	sub	sp, #100	@ 0x64
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	242c      	movs	r4, #44	@ 0x2c
 8000544:	193b      	adds	r3, r7, r4
 8000546:	0018      	movs	r0, r3
 8000548:	2334      	movs	r3, #52	@ 0x34
 800054a:	001a      	movs	r2, r3
 800054c:	2100      	movs	r1, #0
 800054e:	f003 fb39 	bl	8003bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000552:	2318      	movs	r3, #24
 8000554:	18fb      	adds	r3, r7, r3
 8000556:	0018      	movs	r0, r3
 8000558:	2314      	movs	r3, #20
 800055a:	001a      	movs	r2, r3
 800055c:	2100      	movs	r1, #0
 800055e:	f003 fb31 	bl	8003bc4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000562:	003b      	movs	r3, r7
 8000564:	0018      	movs	r0, r3
 8000566:	2318      	movs	r3, #24
 8000568:	001a      	movs	r2, r3
 800056a:	2100      	movs	r1, #0
 800056c:	f003 fb2a 	bl	8003bc4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000570:	4b29      	ldr	r3, [pc, #164]	@ (8000618 <SystemClock_Config+0xdc>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a29      	ldr	r2, [pc, #164]	@ (800061c <SystemClock_Config+0xe0>)
 8000576:	401a      	ands	r2, r3
 8000578:	4b27      	ldr	r3, [pc, #156]	@ (8000618 <SystemClock_Config+0xdc>)
 800057a:	2180      	movs	r1, #128	@ 0x80
 800057c:	0109      	lsls	r1, r1, #4
 800057e:	430a      	orrs	r2, r1
 8000580:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000582:	0021      	movs	r1, r4
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2202      	movs	r2, #2
 8000588:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2201      	movs	r2, #1
 800058e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2210      	movs	r2, #16
 8000594:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2202      	movs	r2, #2
 800059a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2200      	movs	r2, #0
 80005a0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	2280      	movs	r2, #128	@ 0x80
 80005a6:	02d2      	lsls	r2, r2, #11
 80005a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2280      	movs	r2, #128	@ 0x80
 80005ae:	03d2      	lsls	r2, r2, #15
 80005b0:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	0018      	movs	r0, r3
 80005b6:	f001 f97f 	bl	80018b8 <HAL_RCC_OscConfig>
 80005ba:	1e03      	subs	r3, r0, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80005be:	f000 fab3 	bl	8000b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c2:	2118      	movs	r1, #24
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	220f      	movs	r2, #15
 80005c8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	2203      	movs	r2, #3
 80005ce:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2290      	movs	r2, #144	@ 0x90
 80005d4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2200      	movs	r2, #0
 80005da:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2100      	movs	r1, #0
 80005e6:	0018      	movs	r0, r3
 80005e8:	f001 fce2 	bl	8001fb0 <HAL_RCC_ClockConfig>
 80005ec:	1e03      	subs	r3, r0, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80005f0:	f000 fa9a 	bl	8000b28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80005f4:	003b      	movs	r3, r7
 80005f6:	2204      	movs	r2, #4
 80005f8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80005fa:	003b      	movs	r3, r7
 80005fc:	2200      	movs	r2, #0
 80005fe:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000600:	003b      	movs	r3, r7
 8000602:	0018      	movs	r0, r3
 8000604:	f001 fed8 	bl	80023b8 <HAL_RCCEx_PeriphCLKConfig>
 8000608:	1e03      	subs	r3, r0, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800060c:	f000 fa8c 	bl	8000b28 <Error_Handler>
  }
}
 8000610:	46c0      	nop			@ (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	b019      	add	sp, #100	@ 0x64
 8000616:	bd90      	pop	{r4, r7, pc}
 8000618:	40007000 	.word	0x40007000
 800061c:	ffffe7ff 	.word	0xffffe7ff

08000620 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000626:	003b      	movs	r3, r7
 8000628:	0018      	movs	r0, r3
 800062a:	2308      	movs	r3, #8
 800062c:	001a      	movs	r2, r3
 800062e:	2100      	movs	r1, #0
 8000630:	f003 fac8 	bl	8003bc4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000634:	4b37      	ldr	r3, [pc, #220]	@ (8000714 <MX_ADC_Init+0xf4>)
 8000636:	4a38      	ldr	r2, [pc, #224]	@ (8000718 <MX_ADC_Init+0xf8>)
 8000638:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800063a:	4b36      	ldr	r3, [pc, #216]	@ (8000714 <MX_ADC_Init+0xf4>)
 800063c:	2200      	movs	r2, #0
 800063e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000640:	4b34      	ldr	r3, [pc, #208]	@ (8000714 <MX_ADC_Init+0xf4>)
 8000642:	2280      	movs	r2, #128	@ 0x80
 8000644:	05d2      	lsls	r2, r2, #23
 8000646:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000648:	4b32      	ldr	r3, [pc, #200]	@ (8000714 <MX_ADC_Init+0xf4>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800064e:	4b31      	ldr	r3, [pc, #196]	@ (8000714 <MX_ADC_Init+0xf4>)
 8000650:	2200      	movs	r2, #0
 8000652:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000654:	4b2f      	ldr	r3, [pc, #188]	@ (8000714 <MX_ADC_Init+0xf4>)
 8000656:	2201      	movs	r2, #1
 8000658:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800065a:	4b2e      	ldr	r3, [pc, #184]	@ (8000714 <MX_ADC_Init+0xf4>)
 800065c:	2200      	movs	r2, #0
 800065e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000660:	4b2c      	ldr	r3, [pc, #176]	@ (8000714 <MX_ADC_Init+0xf4>)
 8000662:	2220      	movs	r2, #32
 8000664:	2100      	movs	r1, #0
 8000666:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000668:	4b2a      	ldr	r3, [pc, #168]	@ (8000714 <MX_ADC_Init+0xf4>)
 800066a:	2221      	movs	r2, #33	@ 0x21
 800066c:	2100      	movs	r1, #0
 800066e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000670:	4b28      	ldr	r3, [pc, #160]	@ (8000714 <MX_ADC_Init+0xf4>)
 8000672:	2200      	movs	r2, #0
 8000674:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000676:	4b27      	ldr	r3, [pc, #156]	@ (8000714 <MX_ADC_Init+0xf4>)
 8000678:	22c2      	movs	r2, #194	@ 0xc2
 800067a:	32ff      	adds	r2, #255	@ 0xff
 800067c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800067e:	4b25      	ldr	r3, [pc, #148]	@ (8000714 <MX_ADC_Init+0xf4>)
 8000680:	222c      	movs	r2, #44	@ 0x2c
 8000682:	2100      	movs	r1, #0
 8000684:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000686:	4b23      	ldr	r3, [pc, #140]	@ (8000714 <MX_ADC_Init+0xf4>)
 8000688:	2204      	movs	r2, #4
 800068a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800068c:	4b21      	ldr	r3, [pc, #132]	@ (8000714 <MX_ADC_Init+0xf4>)
 800068e:	2200      	movs	r2, #0
 8000690:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000692:	4b20      	ldr	r3, [pc, #128]	@ (8000714 <MX_ADC_Init+0xf4>)
 8000694:	2200      	movs	r2, #0
 8000696:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000698:	4b1e      	ldr	r3, [pc, #120]	@ (8000714 <MX_ADC_Init+0xf4>)
 800069a:	2200      	movs	r2, #0
 800069c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800069e:	4b1d      	ldr	r3, [pc, #116]	@ (8000714 <MX_ADC_Init+0xf4>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80006a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000714 <MX_ADC_Init+0xf4>)
 80006a6:	0018      	movs	r0, r3
 80006a8:	f000 fcac 	bl	8001004 <HAL_ADC_Init>
 80006ac:	1e03      	subs	r3, r0, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80006b0:	f000 fa3a 	bl	8000b28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006b4:	003b      	movs	r3, r7
 80006b6:	4a19      	ldr	r2, [pc, #100]	@ (800071c <MX_ADC_Init+0xfc>)
 80006b8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80006ba:	003b      	movs	r3, r7
 80006bc:	2280      	movs	r2, #128	@ 0x80
 80006be:	0152      	lsls	r2, r2, #5
 80006c0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006c2:	003a      	movs	r2, r7
 80006c4:	4b13      	ldr	r3, [pc, #76]	@ (8000714 <MX_ADC_Init+0xf4>)
 80006c6:	0011      	movs	r1, r2
 80006c8:	0018      	movs	r0, r3
 80006ca:	f000 fe0f 	bl	80012ec <HAL_ADC_ConfigChannel>
 80006ce:	1e03      	subs	r3, r0, #0
 80006d0:	d001      	beq.n	80006d6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80006d2:	f000 fa29 	bl	8000b28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006d6:	003b      	movs	r3, r7
 80006d8:	4a11      	ldr	r2, [pc, #68]	@ (8000720 <MX_ADC_Init+0x100>)
 80006da:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006dc:	003a      	movs	r2, r7
 80006de:	4b0d      	ldr	r3, [pc, #52]	@ (8000714 <MX_ADC_Init+0xf4>)
 80006e0:	0011      	movs	r1, r2
 80006e2:	0018      	movs	r0, r3
 80006e4:	f000 fe02 	bl	80012ec <HAL_ADC_ConfigChannel>
 80006e8:	1e03      	subs	r3, r0, #0
 80006ea:	d001      	beq.n	80006f0 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 80006ec:	f000 fa1c 	bl	8000b28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80006f0:	003b      	movs	r3, r7
 80006f2:	4a0c      	ldr	r2, [pc, #48]	@ (8000724 <MX_ADC_Init+0x104>)
 80006f4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006f6:	003a      	movs	r2, r7
 80006f8:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <MX_ADC_Init+0xf4>)
 80006fa:	0011      	movs	r1, r2
 80006fc:	0018      	movs	r0, r3
 80006fe:	f000 fdf5 	bl	80012ec <HAL_ADC_ConfigChannel>
 8000702:	1e03      	subs	r3, r0, #0
 8000704:	d001      	beq.n	800070a <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8000706:	f000 fa0f 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800070a:	46c0      	nop			@ (mov r8, r8)
 800070c:	46bd      	mov	sp, r7
 800070e:	b002      	add	sp, #8
 8000710:	bd80      	pop	{r7, pc}
 8000712:	46c0      	nop			@ (mov r8, r8)
 8000714:	200000b4 	.word	0x200000b4
 8000718:	40012400 	.word	0x40012400
 800071c:	10000010 	.word	0x10000010
 8000720:	14000020 	.word	0x14000020
 8000724:	24000200 	.word	0x24000200

08000728 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800072c:	4b13      	ldr	r3, [pc, #76]	@ (800077c <MX_LPUART1_UART_Init+0x54>)
 800072e:	4a14      	ldr	r2, [pc, #80]	@ (8000780 <MX_LPUART1_UART_Init+0x58>)
 8000730:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000732:	4b12      	ldr	r3, [pc, #72]	@ (800077c <MX_LPUART1_UART_Init+0x54>)
 8000734:	4a13      	ldr	r2, [pc, #76]	@ (8000784 <MX_LPUART1_UART_Init+0x5c>)
 8000736:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000738:	4b10      	ldr	r3, [pc, #64]	@ (800077c <MX_LPUART1_UART_Init+0x54>)
 800073a:	2280      	movs	r2, #128	@ 0x80
 800073c:	0552      	lsls	r2, r2, #21
 800073e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <MX_LPUART1_UART_Init+0x54>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0d      	ldr	r3, [pc, #52]	@ (800077c <MX_LPUART1_UART_Init+0x54>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b0b      	ldr	r3, [pc, #44]	@ (800077c <MX_LPUART1_UART_Init+0x54>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <MX_LPUART1_UART_Init+0x54>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000758:	4b08      	ldr	r3, [pc, #32]	@ (800077c <MX_LPUART1_UART_Init+0x54>)
 800075a:	2200      	movs	r2, #0
 800075c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800075e:	4b07      	ldr	r3, [pc, #28]	@ (800077c <MX_LPUART1_UART_Init+0x54>)
 8000760:	2200      	movs	r2, #0
 8000762:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000764:	4b05      	ldr	r3, [pc, #20]	@ (800077c <MX_LPUART1_UART_Init+0x54>)
 8000766:	0018      	movs	r0, r3
 8000768:	f002 fc9c 	bl	80030a4 <HAL_UART_Init>
 800076c:	1e03      	subs	r3, r0, #0
 800076e:	d001      	beq.n	8000774 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000770:	f000 f9da 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000774:	46c0      	nop			@ (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			@ (mov r8, r8)
 800077c:	20000110 	.word	0x20000110
 8000780:	40004800 	.word	0x40004800
 8000784:	00033324 	.word	0x00033324

08000788 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	@ 0x28
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078e:	2318      	movs	r3, #24
 8000790:	18fb      	adds	r3, r7, r3
 8000792:	0018      	movs	r0, r3
 8000794:	2310      	movs	r3, #16
 8000796:	001a      	movs	r2, r3
 8000798:	2100      	movs	r1, #0
 800079a:	f003 fa13 	bl	8003bc4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079e:	2310      	movs	r3, #16
 80007a0:	18fb      	adds	r3, r7, r3
 80007a2:	0018      	movs	r0, r3
 80007a4:	2308      	movs	r3, #8
 80007a6:	001a      	movs	r2, r3
 80007a8:	2100      	movs	r1, #0
 80007aa:	f003 fa0b 	bl	8003bc4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ae:	003b      	movs	r3, r7
 80007b0:	0018      	movs	r0, r3
 80007b2:	2310      	movs	r3, #16
 80007b4:	001a      	movs	r2, r3
 80007b6:	2100      	movs	r1, #0
 80007b8:	f003 fa04 	bl	8003bc4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007bc:	4b35      	ldr	r3, [pc, #212]	@ (8000894 <MX_TIM2_Init+0x10c>)
 80007be:	2280      	movs	r2, #128	@ 0x80
 80007c0:	05d2      	lsls	r2, r2, #23
 80007c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007c4:	4b33      	ldr	r3, [pc, #204]	@ (8000894 <MX_TIM2_Init+0x10c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ca:	4b32      	ldr	r3, [pc, #200]	@ (8000894 <MX_TIM2_Init+0x10c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 80007d0:	4b30      	ldr	r3, [pc, #192]	@ (8000894 <MX_TIM2_Init+0x10c>)
 80007d2:	2290      	movs	r2, #144	@ 0x90
 80007d4:	32ff      	adds	r2, #255	@ 0xff
 80007d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d8:	4b2e      	ldr	r3, [pc, #184]	@ (8000894 <MX_TIM2_Init+0x10c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007de:	4b2d      	ldr	r3, [pc, #180]	@ (8000894 <MX_TIM2_Init+0x10c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007e4:	4b2b      	ldr	r3, [pc, #172]	@ (8000894 <MX_TIM2_Init+0x10c>)
 80007e6:	0018      	movs	r0, r3
 80007e8:	f001 ff12 	bl	8002610 <HAL_TIM_Base_Init>
 80007ec:	1e03      	subs	r3, r0, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80007f0:	f000 f99a 	bl	8000b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f4:	2118      	movs	r1, #24
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2280      	movs	r2, #128	@ 0x80
 80007fa:	0152      	lsls	r2, r2, #5
 80007fc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007fe:	187a      	adds	r2, r7, r1
 8000800:	4b24      	ldr	r3, [pc, #144]	@ (8000894 <MX_TIM2_Init+0x10c>)
 8000802:	0011      	movs	r1, r2
 8000804:	0018      	movs	r0, r3
 8000806:	f002 f851 	bl	80028ac <HAL_TIM_ConfigClockSource>
 800080a:	1e03      	subs	r3, r0, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800080e:	f000 f98b 	bl	8000b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000812:	4b20      	ldr	r3, [pc, #128]	@ (8000894 <MX_TIM2_Init+0x10c>)
 8000814:	0018      	movs	r0, r3
 8000816:	f001 ff3b 	bl	8002690 <HAL_TIM_PWM_Init>
 800081a:	1e03      	subs	r3, r0, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800081e:	f000 f983 	bl	8000b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000822:	2110      	movs	r1, #16
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2220      	movs	r2, #32
 8000828:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800082a:	187b      	adds	r3, r7, r1
 800082c:	2280      	movs	r2, #128	@ 0x80
 800082e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000830:	187a      	adds	r2, r7, r1
 8000832:	4b18      	ldr	r3, [pc, #96]	@ (8000894 <MX_TIM2_Init+0x10c>)
 8000834:	0011      	movs	r1, r2
 8000836:	0018      	movs	r0, r3
 8000838:	f002 fbdc 	bl	8002ff4 <HAL_TIMEx_MasterConfigSynchronization>
 800083c:	1e03      	subs	r3, r0, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000840:	f000 f972 	bl	8000b28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000844:	003b      	movs	r3, r7
 8000846:	2260      	movs	r2, #96	@ 0x60
 8000848:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800084a:	003b      	movs	r3, r7
 800084c:	2200      	movs	r2, #0
 800084e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000850:	003b      	movs	r3, r7
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000856:	003b      	movs	r3, r7
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800085c:	0039      	movs	r1, r7
 800085e:	4b0d      	ldr	r3, [pc, #52]	@ (8000894 <MX_TIM2_Init+0x10c>)
 8000860:	2200      	movs	r2, #0
 8000862:	0018      	movs	r0, r3
 8000864:	f001 ff5c 	bl	8002720 <HAL_TIM_PWM_ConfigChannel>
 8000868:	1e03      	subs	r3, r0, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 800086c:	f000 f95c 	bl	8000b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000870:	0039      	movs	r1, r7
 8000872:	4b08      	ldr	r3, [pc, #32]	@ (8000894 <MX_TIM2_Init+0x10c>)
 8000874:	2204      	movs	r2, #4
 8000876:	0018      	movs	r0, r3
 8000878:	f001 ff52 	bl	8002720 <HAL_TIM_PWM_ConfigChannel>
 800087c:	1e03      	subs	r3, r0, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 8000880:	f000 f952 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000884:	4b03      	ldr	r3, [pc, #12]	@ (8000894 <MX_TIM2_Init+0x10c>)
 8000886:	0018      	movs	r0, r3
 8000888:	f000 fa2a 	bl	8000ce0 <HAL_TIM_MspPostInit>

}
 800088c:	46c0      	nop			@ (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	b00a      	add	sp, #40	@ 0x28
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000198 	.word	0x20000198

08000898 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b090      	sub	sp, #64	@ 0x40
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089e:	2330      	movs	r3, #48	@ 0x30
 80008a0:	18fb      	adds	r3, r7, r3
 80008a2:	0018      	movs	r0, r3
 80008a4:	2310      	movs	r3, #16
 80008a6:	001a      	movs	r2, r3
 80008a8:	2100      	movs	r1, #0
 80008aa:	f003 f98b 	bl	8003bc4 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80008ae:	231c      	movs	r3, #28
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	0018      	movs	r0, r3
 80008b4:	2314      	movs	r3, #20
 80008b6:	001a      	movs	r2, r3
 80008b8:	2100      	movs	r1, #0
 80008ba:	f003 f983 	bl	8003bc4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008be:	2314      	movs	r3, #20
 80008c0:	18fb      	adds	r3, r7, r3
 80008c2:	0018      	movs	r0, r3
 80008c4:	2308      	movs	r3, #8
 80008c6:	001a      	movs	r2, r3
 80008c8:	2100      	movs	r1, #0
 80008ca:	f003 f97b 	bl	8003bc4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	0018      	movs	r0, r3
 80008d2:	2310      	movs	r3, #16
 80008d4:	001a      	movs	r2, r3
 80008d6:	2100      	movs	r1, #0
 80008d8:	f003 f974 	bl	8003bc4 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 80008dc:	4b38      	ldr	r3, [pc, #224]	@ (80009c0 <MX_TIM22_Init+0x128>)
 80008de:	4a39      	ldr	r2, [pc, #228]	@ (80009c4 <MX_TIM22_Init+0x12c>)
 80008e0:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0;
 80008e2:	4b37      	ldr	r3, [pc, #220]	@ (80009c0 <MX_TIM22_Init+0x128>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e8:	4b35      	ldr	r3, [pc, #212]	@ (80009c0 <MX_TIM22_Init+0x128>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 399;
 80008ee:	4b34      	ldr	r3, [pc, #208]	@ (80009c0 <MX_TIM22_Init+0x128>)
 80008f0:	2290      	movs	r2, #144	@ 0x90
 80008f2:	32ff      	adds	r2, #255	@ 0xff
 80008f4:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f6:	4b32      	ldr	r3, [pc, #200]	@ (80009c0 <MX_TIM22_Init+0x128>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fc:	4b30      	ldr	r3, [pc, #192]	@ (80009c0 <MX_TIM22_Init+0x128>)
 80008fe:	2200      	movs	r2, #0
 8000900:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8000902:	4b2f      	ldr	r3, [pc, #188]	@ (80009c0 <MX_TIM22_Init+0x128>)
 8000904:	0018      	movs	r0, r3
 8000906:	f001 fe83 	bl	8002610 <HAL_TIM_Base_Init>
 800090a:	1e03      	subs	r3, r0, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM22_Init+0x7a>
  {
    Error_Handler();
 800090e:	f000 f90b 	bl	8000b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000912:	2130      	movs	r1, #48	@ 0x30
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2280      	movs	r2, #128	@ 0x80
 8000918:	0152      	lsls	r2, r2, #5
 800091a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 800091c:	187a      	adds	r2, r7, r1
 800091e:	4b28      	ldr	r3, [pc, #160]	@ (80009c0 <MX_TIM22_Init+0x128>)
 8000920:	0011      	movs	r1, r2
 8000922:	0018      	movs	r0, r3
 8000924:	f001 ffc2 	bl	80028ac <HAL_TIM_ConfigClockSource>
 8000928:	1e03      	subs	r3, r0, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM22_Init+0x98>
  {
    Error_Handler();
 800092c:	f000 f8fc 	bl	8000b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim22) != HAL_OK)
 8000930:	4b23      	ldr	r3, [pc, #140]	@ (80009c0 <MX_TIM22_Init+0x128>)
 8000932:	0018      	movs	r0, r3
 8000934:	f001 feac 	bl	8002690 <HAL_TIM_PWM_Init>
 8000938:	1e03      	subs	r3, r0, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM22_Init+0xa8>
  {
    Error_Handler();
 800093c:	f000 f8f4 	bl	8000b28 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000940:	211c      	movs	r1, #28
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2206      	movs	r2, #6
 8000946:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000948:	187b      	adds	r3, r7, r1
 800094a:	2210      	movs	r2, #16
 800094c:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim22, &sSlaveConfig) != HAL_OK)
 800094e:	187a      	adds	r2, r7, r1
 8000950:	4b1b      	ldr	r3, [pc, #108]	@ (80009c0 <MX_TIM22_Init+0x128>)
 8000952:	0011      	movs	r1, r2
 8000954:	0018      	movs	r0, r3
 8000956:	f002 f87d 	bl	8002a54 <HAL_TIM_SlaveConfigSynchro>
 800095a:	1e03      	subs	r3, r0, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM22_Init+0xca>
  {
    Error_Handler();
 800095e:	f000 f8e3 	bl	8000b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000962:	2114      	movs	r1, #20
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096a:	187b      	adds	r3, r7, r1
 800096c:	2200      	movs	r2, #0
 800096e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8000970:	187a      	adds	r2, r7, r1
 8000972:	4b13      	ldr	r3, [pc, #76]	@ (80009c0 <MX_TIM22_Init+0x128>)
 8000974:	0011      	movs	r1, r2
 8000976:	0018      	movs	r0, r3
 8000978:	f002 fb3c 	bl	8002ff4 <HAL_TIMEx_MasterConfigSynchronization>
 800097c:	1e03      	subs	r3, r0, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM22_Init+0xec>
  {
    Error_Handler();
 8000980:	f000 f8d2 	bl	8000b28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	2260      	movs	r2, #96	@ 0x60
 8000988:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2200      	movs	r2, #0
 800098e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2200      	movs	r2, #0
 800099a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800099c:	1d39      	adds	r1, r7, #4
 800099e:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <MX_TIM22_Init+0x128>)
 80009a0:	2204      	movs	r2, #4
 80009a2:	0018      	movs	r0, r3
 80009a4:	f001 febc 	bl	8002720 <HAL_TIM_PWM_ConfigChannel>
 80009a8:	1e03      	subs	r3, r0, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM22_Init+0x118>
  {
    Error_Handler();
 80009ac:	f000 f8bc 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */
  HAL_TIM_MspPostInit(&htim22);
 80009b0:	4b03      	ldr	r3, [pc, #12]	@ (80009c0 <MX_TIM22_Init+0x128>)
 80009b2:	0018      	movs	r0, r3
 80009b4:	f000 f994 	bl	8000ce0 <HAL_TIM_MspPostInit>

}
 80009b8:	46c0      	nop			@ (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b010      	add	sp, #64	@ 0x40
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	200001d8 	.word	0x200001d8
 80009c4:	40011400 	.word	0x40011400

080009c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b089      	sub	sp, #36	@ 0x24
 80009cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	240c      	movs	r4, #12
 80009d0:	193b      	adds	r3, r7, r4
 80009d2:	0018      	movs	r0, r3
 80009d4:	2314      	movs	r3, #20
 80009d6:	001a      	movs	r2, r3
 80009d8:	2100      	movs	r1, #0
 80009da:	f003 f8f3 	bl	8003bc4 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	4b4e      	ldr	r3, [pc, #312]	@ (8000b18 <MX_GPIO_Init+0x150>)
 80009e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009e2:	4b4d      	ldr	r3, [pc, #308]	@ (8000b18 <MX_GPIO_Init+0x150>)
 80009e4:	2104      	movs	r1, #4
 80009e6:	430a      	orrs	r2, r1
 80009e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009ea:	4b4b      	ldr	r3, [pc, #300]	@ (8000b18 <MX_GPIO_Init+0x150>)
 80009ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ee:	2204      	movs	r2, #4
 80009f0:	4013      	ands	r3, r2
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	4b48      	ldr	r3, [pc, #288]	@ (8000b18 <MX_GPIO_Init+0x150>)
 80009f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009fa:	4b47      	ldr	r3, [pc, #284]	@ (8000b18 <MX_GPIO_Init+0x150>)
 80009fc:	2101      	movs	r1, #1
 80009fe:	430a      	orrs	r2, r1
 8000a00:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a02:	4b45      	ldr	r3, [pc, #276]	@ (8000b18 <MX_GPIO_Init+0x150>)
 8000a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a06:	2201      	movs	r2, #1
 8000a08:	4013      	ands	r3, r2
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0e:	4b42      	ldr	r3, [pc, #264]	@ (8000b18 <MX_GPIO_Init+0x150>)
 8000a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a12:	4b41      	ldr	r3, [pc, #260]	@ (8000b18 <MX_GPIO_Init+0x150>)
 8000a14:	2102      	movs	r1, #2
 8000a16:	430a      	orrs	r2, r1
 8000a18:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a1a:	4b3f      	ldr	r3, [pc, #252]	@ (8000b18 <MX_GPIO_Init+0x150>)
 8000a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a1e:	2202      	movs	r2, #2
 8000a20:	4013      	ands	r3, r2
 8000a22:	603b      	str	r3, [r7, #0]
 8000a24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRVOFF_GPIO_Port, DRVOFF_Pin, GPIO_PIN_RESET);
 8000a26:	2380      	movs	r3, #128	@ 0x80
 8000a28:	01db      	lsls	r3, r3, #7
 8000a2a:	483c      	ldr	r0, [pc, #240]	@ (8000b1c <MX_GPIO_Init+0x154>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	0019      	movs	r1, r3
 8000a30:	f000 ff24 	bl	800187c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PWM_INLA_Pin|PWM_INLB_Pin|NSLEEP_Pin, GPIO_PIN_RESET);
 8000a34:	493a      	ldr	r1, [pc, #232]	@ (8000b20 <MX_GPIO_Init+0x158>)
 8000a36:	23a0      	movs	r3, #160	@ 0xa0
 8000a38:	05db      	lsls	r3, r3, #23
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f000 ff1d 	bl	800187c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWM_INLC_GPIO_Port, PWM_INLC_Pin, GPIO_PIN_RESET);
 8000a42:	4b38      	ldr	r3, [pc, #224]	@ (8000b24 <MX_GPIO_Init+0x15c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	2140      	movs	r1, #64	@ 0x40
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f000 ff17 	bl	800187c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DRVOFF_Pin */
  GPIO_InitStruct.Pin = DRVOFF_Pin;
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	2280      	movs	r2, #128	@ 0x80
 8000a52:	01d2      	lsls	r2, r2, #7
 8000a54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a56:	193b      	adds	r3, r7, r4
 8000a58:	2201      	movs	r2, #1
 8000a5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	193b      	adds	r3, r7, r4
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	2200      	movs	r2, #0
 8000a66:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DRVOFF_GPIO_Port, &GPIO_InitStruct);
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	4a2c      	ldr	r2, [pc, #176]	@ (8000b1c <MX_GPIO_Init+0x154>)
 8000a6c:	0019      	movs	r1, r3
 8000a6e:	0010      	movs	r0, r2
 8000a70:	f000 fd96 	bl	80015a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NFAULT_Pin */
  GPIO_InitStruct.Pin = NFAULT_Pin;
 8000a74:	0021      	movs	r1, r4
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2280      	movs	r2, #128	@ 0x80
 8000a7a:	0212      	lsls	r2, r2, #8
 8000a7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7e:	000c      	movs	r4, r1
 8000a80:	193b      	adds	r3, r7, r4
 8000a82:	2200      	movs	r2, #0
 8000a84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	193b      	adds	r3, r7, r4
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NFAULT_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	193b      	adds	r3, r7, r4
 8000a8e:	4a23      	ldr	r2, [pc, #140]	@ (8000b1c <MX_GPIO_Init+0x154>)
 8000a90:	0019      	movs	r1, r3
 8000a92:	0010      	movs	r0, r2
 8000a94:	f000 fd84 	bl	80015a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWM_INLA_Pin PWM_INLB_Pin NSLEEP_Pin */
  GPIO_InitStruct.Pin = PWM_INLA_Pin|PWM_INLB_Pin|NSLEEP_Pin;
 8000a98:	193b      	adds	r3, r7, r4
 8000a9a:	4a21      	ldr	r2, [pc, #132]	@ (8000b20 <MX_GPIO_Init+0x158>)
 8000a9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	193b      	adds	r3, r7, r4
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	193b      	adds	r3, r7, r4
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aaa:	193b      	adds	r3, r7, r4
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	193a      	adds	r2, r7, r4
 8000ab2:	23a0      	movs	r3, #160	@ 0xa0
 8000ab4:	05db      	lsls	r3, r3, #23
 8000ab6:	0011      	movs	r1, r2
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f000 fd71 	bl	80015a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : POCI_Pin PICO_Pin */
  GPIO_InitStruct.Pin = POCI_Pin|PICO_Pin;
 8000abe:	193b      	adds	r3, r7, r4
 8000ac0:	22c0      	movs	r2, #192	@ 0xc0
 8000ac2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	193b      	adds	r3, r7, r4
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	193b      	adds	r3, r7, r4
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad0:	193b      	adds	r3, r7, r4
 8000ad2:	2203      	movs	r2, #3
 8000ad4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000ad6:	193b      	adds	r3, r7, r4
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000adc:	193a      	adds	r2, r7, r4
 8000ade:	23a0      	movs	r3, #160	@ 0xa0
 8000ae0:	05db      	lsls	r3, r3, #23
 8000ae2:	0011      	movs	r1, r2
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f000 fd5b 	bl	80015a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWM_INLC_Pin */
  GPIO_InitStruct.Pin = PWM_INLC_Pin;
 8000aea:	0021      	movs	r1, r4
 8000aec:	187b      	adds	r3, r7, r1
 8000aee:	2240      	movs	r2, #64	@ 0x40
 8000af0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	2201      	movs	r2, #1
 8000af6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	2200      	movs	r2, #0
 8000b02:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(PWM_INLC_GPIO_Port, &GPIO_InitStruct);
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	4a07      	ldr	r2, [pc, #28]	@ (8000b24 <MX_GPIO_Init+0x15c>)
 8000b08:	0019      	movs	r1, r3
 8000b0a:	0010      	movs	r0, r2
 8000b0c:	f000 fd48 	bl	80015a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b10:	46c0      	nop			@ (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	b009      	add	sp, #36	@ 0x24
 8000b16:	bd90      	pop	{r4, r7, pc}
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	50000800 	.word	0x50000800
 8000b20:	00001201 	.word	0x00001201
 8000b24:	50000400 	.word	0x50000400

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b30:	46c0      	nop			@ (mov r8, r8)
 8000b32:	e7fd      	b.n	8000b30 <Error_Handler+0x8>

08000b34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b38:	4b07      	ldr	r3, [pc, #28]	@ (8000b58 <HAL_MspInit+0x24>)
 8000b3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b3c:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <HAL_MspInit+0x24>)
 8000b3e:	2101      	movs	r1, #1
 8000b40:	430a      	orrs	r2, r1
 8000b42:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b44:	4b04      	ldr	r3, [pc, #16]	@ (8000b58 <HAL_MspInit+0x24>)
 8000b46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b48:	4b03      	ldr	r3, [pc, #12]	@ (8000b58 <HAL_MspInit+0x24>)
 8000b4a:	2180      	movs	r1, #128	@ 0x80
 8000b4c:	0549      	lsls	r1, r1, #21
 8000b4e:	430a      	orrs	r2, r1
 8000b50:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b52:	46c0      	nop			@ (mov r8, r8)
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40021000 	.word	0x40021000

08000b5c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b5c:	b590      	push	{r4, r7, lr}
 8000b5e:	b08b      	sub	sp, #44	@ 0x2c
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	2414      	movs	r4, #20
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	0018      	movs	r0, r3
 8000b6a:	2314      	movs	r3, #20
 8000b6c:	001a      	movs	r2, r3
 8000b6e:	2100      	movs	r1, #0
 8000b70:	f003 f828 	bl	8003bc4 <memset>
  if(hadc->Instance==ADC1)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a22      	ldr	r2, [pc, #136]	@ (8000c04 <HAL_ADC_MspInit+0xa8>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d13d      	bne.n	8000bfa <HAL_ADC_MspInit+0x9e>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b7e:	4b22      	ldr	r3, [pc, #136]	@ (8000c08 <HAL_ADC_MspInit+0xac>)
 8000b80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b82:	4b21      	ldr	r3, [pc, #132]	@ (8000c08 <HAL_ADC_MspInit+0xac>)
 8000b84:	2180      	movs	r1, #128	@ 0x80
 8000b86:	0089      	lsls	r1, r1, #2
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c08 <HAL_ADC_MspInit+0xac>)
 8000b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b90:	4b1d      	ldr	r3, [pc, #116]	@ (8000c08 <HAL_ADC_MspInit+0xac>)
 8000b92:	2101      	movs	r1, #1
 8000b94:	430a      	orrs	r2, r1
 8000b96:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b98:	4b1b      	ldr	r3, [pc, #108]	@ (8000c08 <HAL_ADC_MspInit+0xac>)
 8000b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba4:	4b18      	ldr	r3, [pc, #96]	@ (8000c08 <HAL_ADC_MspInit+0xac>)
 8000ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ba8:	4b17      	ldr	r3, [pc, #92]	@ (8000c08 <HAL_ADC_MspInit+0xac>)
 8000baa:	2102      	movs	r1, #2
 8000bac:	430a      	orrs	r2, r1
 8000bae:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000bb0:	4b15      	ldr	r3, [pc, #84]	@ (8000c08 <HAL_ADC_MspInit+0xac>)
 8000bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = SOA_Pin|SOB_Pin;
 8000bbc:	193b      	adds	r3, r7, r4
 8000bbe:	2230      	movs	r2, #48	@ 0x30
 8000bc0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bc2:	193b      	adds	r3, r7, r4
 8000bc4:	2203      	movs	r2, #3
 8000bc6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	193b      	adds	r3, r7, r4
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bce:	193a      	adds	r2, r7, r4
 8000bd0:	23a0      	movs	r3, #160	@ 0xa0
 8000bd2:	05db      	lsls	r3, r3, #23
 8000bd4:	0011      	movs	r1, r2
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f000 fce2 	bl	80015a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SOC_Pin;
 8000bdc:	193b      	adds	r3, r7, r4
 8000bde:	2202      	movs	r2, #2
 8000be0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000be2:	193b      	adds	r3, r7, r4
 8000be4:	2203      	movs	r2, #3
 8000be6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	193b      	adds	r3, r7, r4
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(SOC_GPIO_Port, &GPIO_InitStruct);
 8000bee:	193b      	adds	r3, r7, r4
 8000bf0:	4a06      	ldr	r2, [pc, #24]	@ (8000c0c <HAL_ADC_MspInit+0xb0>)
 8000bf2:	0019      	movs	r1, r3
 8000bf4:	0010      	movs	r0, r2
 8000bf6:	f000 fcd3 	bl	80015a0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	b00b      	add	sp, #44	@ 0x2c
 8000c00:	bd90      	pop	{r4, r7, pc}
 8000c02:	46c0      	nop			@ (mov r8, r8)
 8000c04:	40012400 	.word	0x40012400
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	50000400 	.word	0x50000400

08000c10 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b089      	sub	sp, #36	@ 0x24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	240c      	movs	r4, #12
 8000c1a:	193b      	adds	r3, r7, r4
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	2314      	movs	r3, #20
 8000c20:	001a      	movs	r2, r3
 8000c22:	2100      	movs	r1, #0
 8000c24:	f002 ffce 	bl	8003bc4 <memset>
  if(huart->Instance==LPUART1)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a18      	ldr	r2, [pc, #96]	@ (8000c90 <HAL_UART_MspInit+0x80>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d129      	bne.n	8000c86 <HAL_UART_MspInit+0x76>
  {
    /* USER CODE BEGIN LPUART1_MspInit 0 */

    /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c32:	4b18      	ldr	r3, [pc, #96]	@ (8000c94 <HAL_UART_MspInit+0x84>)
 8000c34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c36:	4b17      	ldr	r3, [pc, #92]	@ (8000c94 <HAL_UART_MspInit+0x84>)
 8000c38:	2180      	movs	r1, #128	@ 0x80
 8000c3a:	02c9      	lsls	r1, r1, #11
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c40:	4b14      	ldr	r3, [pc, #80]	@ (8000c94 <HAL_UART_MspInit+0x84>)
 8000c42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c44:	4b13      	ldr	r3, [pc, #76]	@ (8000c94 <HAL_UART_MspInit+0x84>)
 8000c46:	2101      	movs	r1, #1
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c4c:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <HAL_UART_MspInit+0x84>)
 8000c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c50:	2201      	movs	r2, #1
 8000c52:	4013      	ands	r3, r2
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c58:	0021      	movs	r1, r4
 8000c5a:	187b      	adds	r3, r7, r1
 8000c5c:	220c      	movs	r2, #12
 8000c5e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	2202      	movs	r2, #2
 8000c64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6c:	187b      	adds	r3, r7, r1
 8000c6e:	2203      	movs	r2, #3
 8000c70:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000c72:	187b      	adds	r3, r7, r1
 8000c74:	2206      	movs	r2, #6
 8000c76:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c78:	187a      	adds	r2, r7, r1
 8000c7a:	23a0      	movs	r3, #160	@ 0xa0
 8000c7c:	05db      	lsls	r3, r3, #23
 8000c7e:	0011      	movs	r1, r2
 8000c80:	0018      	movs	r0, r3
 8000c82:	f000 fc8d 	bl	80015a0 <HAL_GPIO_Init>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000c86:	46c0      	nop			@ (mov r8, r8)
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	b009      	add	sp, #36	@ 0x24
 8000c8c:	bd90      	pop	{r4, r7, pc}
 8000c8e:	46c0      	nop			@ (mov r8, r8)
 8000c90:	40004800 	.word	0x40004800
 8000c94:	40021000 	.word	0x40021000

08000c98 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	2380      	movs	r3, #128	@ 0x80
 8000ca6:	05db      	lsls	r3, r3, #23
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d106      	bne.n	8000cba <HAL_TIM_Base_MspInit+0x22>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cac:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <HAL_TIM_Base_MspInit+0x40>)
 8000cae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000cb0:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <HAL_TIM_Base_MspInit+0x40>)
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	639a      	str	r2, [r3, #56]	@ 0x38
    /* USER CODE BEGIN TIM22_MspInit 1 */

    /* USER CODE END TIM22_MspInit 1 */
  }

}
 8000cb8:	e00a      	b.n	8000cd0 <HAL_TIM_Base_MspInit+0x38>
  else if(htim_base->Instance==TIM22)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a07      	ldr	r2, [pc, #28]	@ (8000cdc <HAL_TIM_Base_MspInit+0x44>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d105      	bne.n	8000cd0 <HAL_TIM_Base_MspInit+0x38>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8000cc4:	4b04      	ldr	r3, [pc, #16]	@ (8000cd8 <HAL_TIM_Base_MspInit+0x40>)
 8000cc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cc8:	4b03      	ldr	r3, [pc, #12]	@ (8000cd8 <HAL_TIM_Base_MspInit+0x40>)
 8000cca:	2120      	movs	r1, #32
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000cd0:	46c0      	nop			@ (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b002      	add	sp, #8
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40011400 	.word	0x40011400

08000ce0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b08b      	sub	sp, #44	@ 0x2c
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	2414      	movs	r4, #20
 8000cea:	193b      	adds	r3, r7, r4
 8000cec:	0018      	movs	r0, r3
 8000cee:	2314      	movs	r3, #20
 8000cf0:	001a      	movs	r2, r3
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	f002 ff66 	bl	8003bc4 <memset>
  if(htim->Instance==TIM2)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	2380      	movs	r3, #128	@ 0x80
 8000cfe:	05db      	lsls	r3, r3, #23
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d13a      	bne.n	8000d7a <HAL_TIM_MspPostInit+0x9a>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d04:	4b32      	ldr	r3, [pc, #200]	@ (8000dd0 <HAL_TIM_MspPostInit+0xf0>)
 8000d06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d08:	4b31      	ldr	r3, [pc, #196]	@ (8000dd0 <HAL_TIM_MspPostInit+0xf0>)
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d10:	4b2f      	ldr	r3, [pc, #188]	@ (8000dd0 <HAL_TIM_MspPostInit+0xf0>)
 8000d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d14:	2201      	movs	r2, #1
 8000d16:	4013      	ands	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA8     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM_INHA_Pin;
 8000d1c:	193b      	adds	r3, r7, r4
 8000d1e:	2202      	movs	r2, #2
 8000d20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	193b      	adds	r3, r7, r4
 8000d24:	2202      	movs	r2, #2
 8000d26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	193b      	adds	r3, r7, r4
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	193b      	adds	r3, r7, r4
 8000d30:	2200      	movs	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000d34:	193b      	adds	r3, r7, r4
 8000d36:	2202      	movs	r2, #2
 8000d38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_INHA_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	193a      	adds	r2, r7, r4
 8000d3c:	23a0      	movs	r3, #160	@ 0xa0
 8000d3e:	05db      	lsls	r3, r3, #23
 8000d40:	0011      	movs	r1, r2
 8000d42:	0018      	movs	r0, r3
 8000d44:	f000 fc2c 	bl	80015a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_INHB_Pin;
 8000d48:	0021      	movs	r1, r4
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	0052      	lsls	r2, r2, #1
 8000d50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	187b      	adds	r3, r7, r1
 8000d54:	2202      	movs	r2, #2
 8000d56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	187b      	adds	r3, r7, r1
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	187b      	adds	r3, r7, r1
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8000d64:	187b      	adds	r3, r7, r1
 8000d66:	2205      	movs	r2, #5
 8000d68:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_INHB_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	187a      	adds	r2, r7, r1
 8000d6c:	23a0      	movs	r3, #160	@ 0xa0
 8000d6e:	05db      	lsls	r3, r3, #23
 8000d70:	0011      	movs	r1, r2
 8000d72:	0018      	movs	r0, r3
 8000d74:	f000 fc14 	bl	80015a0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM22_MspPostInit 1 */

    /* USER CODE END TIM22_MspPostInit 1 */
  }

}
 8000d78:	e026      	b.n	8000dc8 <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM22)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a15      	ldr	r2, [pc, #84]	@ (8000dd4 <HAL_TIM_MspPostInit+0xf4>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d121      	bne.n	8000dc8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d84:	4b12      	ldr	r3, [pc, #72]	@ (8000dd0 <HAL_TIM_MspPostInit+0xf0>)
 8000d86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d88:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <HAL_TIM_MspPostInit+0xf0>)
 8000d8a:	2102      	movs	r1, #2
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d90:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd0 <HAL_TIM_MspPostInit+0xf0>)
 8000d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d94:	2202      	movs	r2, #2
 8000d96:	4013      	ands	r3, r2
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_INHC_Pin;
 8000d9c:	2114      	movs	r1, #20
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	2220      	movs	r2, #32
 8000da2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	2202      	movs	r2, #2
 8000da8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM22;
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	2204      	movs	r2, #4
 8000dba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_INHC_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	4a06      	ldr	r2, [pc, #24]	@ (8000dd8 <HAL_TIM_MspPostInit+0xf8>)
 8000dc0:	0019      	movs	r1, r3
 8000dc2:	0010      	movs	r0, r2
 8000dc4:	f000 fbec 	bl	80015a0 <HAL_GPIO_Init>
}
 8000dc8:	46c0      	nop			@ (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b00b      	add	sp, #44	@ 0x2c
 8000dce:	bd90      	pop	{r4, r7, pc}
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40011400 	.word	0x40011400
 8000dd8:	50000400 	.word	0x50000400

08000ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000de0:	46c0      	nop			@ (mov r8, r8)
 8000de2:	e7fd      	b.n	8000de0 <NMI_Handler+0x4>

08000de4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de8:	46c0      	nop			@ (mov r8, r8)
 8000dea:	e7fd      	b.n	8000de8 <HardFault_Handler+0x4>

08000dec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000df0:	46c0      	nop			@ (mov r8, r8)
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfa:	46c0      	nop			@ (mov r8, r8)
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e04:	f000 f8be 	bl	8000f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e08:	46c0      	nop			@ (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e18:	4a14      	ldr	r2, [pc, #80]	@ (8000e6c <_sbrk+0x5c>)
 8000e1a:	4b15      	ldr	r3, [pc, #84]	@ (8000e70 <_sbrk+0x60>)
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e24:	4b13      	ldr	r3, [pc, #76]	@ (8000e74 <_sbrk+0x64>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d102      	bne.n	8000e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	@ (8000e74 <_sbrk+0x64>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	@ (8000e78 <_sbrk+0x68>)
 8000e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e32:	4b10      	ldr	r3, [pc, #64]	@ (8000e74 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	18d3      	adds	r3, r2, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d207      	bcs.n	8000e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e40:	f002 fec8 	bl	8003bd4 <__errno>
 8000e44:	0003      	movs	r3, r0
 8000e46:	220c      	movs	r2, #12
 8000e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	425b      	negs	r3, r3
 8000e4e:	e009      	b.n	8000e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e50:	4b08      	ldr	r3, [pc, #32]	@ (8000e74 <_sbrk+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e56:	4b07      	ldr	r3, [pc, #28]	@ (8000e74 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	18d2      	adds	r2, r2, r3
 8000e5e:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <_sbrk+0x64>)
 8000e60:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000e62:	68fb      	ldr	r3, [r7, #12]
}
 8000e64:	0018      	movs	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	b006      	add	sp, #24
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20002000 	.word	0x20002000
 8000e70:	00000400 	.word	0x00000400
 8000e74:	20000218 	.word	0x20000218
 8000e78:	20000368 	.word	0x20000368

08000e7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e80:	46c0      	nop			@ (mov r8, r8)
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000e88:	480d      	ldr	r0, [pc, #52]	@ (8000ec0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000e8a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e8c:	f7ff fff6 	bl	8000e7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e90:	480c      	ldr	r0, [pc, #48]	@ (8000ec4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e92:	490d      	ldr	r1, [pc, #52]	@ (8000ec8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e94:	4a0d      	ldr	r2, [pc, #52]	@ (8000ecc <LoopForever+0xe>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e98:	e002      	b.n	8000ea0 <LoopCopyDataInit>

08000e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9e:	3304      	adds	r3, #4

08000ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea4:	d3f9      	bcc.n	8000e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ea8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ed4 <LoopForever+0x16>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eac:	e001      	b.n	8000eb2 <LoopFillZerobss>

08000eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb0:	3204      	adds	r2, #4

08000eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb4:	d3fb      	bcc.n	8000eae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eb6:	f002 fe93 	bl	8003be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eba:	f7ff fad9 	bl	8000470 <main>

08000ebe <LoopForever>:

LoopForever:
    b LoopForever
 8000ebe:	e7fe      	b.n	8000ebe <LoopForever>
   ldr   r0, =_estack
 8000ec0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ecc:	0800459c 	.word	0x0800459c
  ldr r2, =_sbss
 8000ed0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ed4:	20000368 	.word	0x20000368

08000ed8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ed8:	e7fe      	b.n	8000ed8 <ADC1_COMP_IRQHandler>
	...

08000edc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee2:	1dfb      	adds	r3, r7, #7
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8000f18 <HAL_Init+0x3c>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b0a      	ldr	r3, [pc, #40]	@ (8000f18 <HAL_Init+0x3c>)
 8000eee:	2140      	movs	r1, #64	@ 0x40
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	f000 f811 	bl	8000f1c <HAL_InitTick>
 8000efa:	1e03      	subs	r3, r0, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	2201      	movs	r2, #1
 8000f02:	701a      	strb	r2, [r3, #0]
 8000f04:	e001      	b.n	8000f0a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f06:	f7ff fe15 	bl	8000b34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f0a:	1dfb      	adds	r3, r7, #7
 8000f0c:	781b      	ldrb	r3, [r3, #0]
}
 8000f0e:	0018      	movs	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	b002      	add	sp, #8
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	46c0      	nop			@ (mov r8, r8)
 8000f18:	40022000 	.word	0x40022000

08000f1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f1c:	b590      	push	{r4, r7, lr}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f24:	4b14      	ldr	r3, [pc, #80]	@ (8000f78 <HAL_InitTick+0x5c>)
 8000f26:	681c      	ldr	r4, [r3, #0]
 8000f28:	4b14      	ldr	r3, [pc, #80]	@ (8000f7c <HAL_InitTick+0x60>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	0019      	movs	r1, r3
 8000f2e:	23fa      	movs	r3, #250	@ 0xfa
 8000f30:	0098      	lsls	r0, r3, #2
 8000f32:	f7ff f8fb 	bl	800012c <__udivsi3>
 8000f36:	0003      	movs	r3, r0
 8000f38:	0019      	movs	r1, r3
 8000f3a:	0020      	movs	r0, r4
 8000f3c:	f7ff f8f6 	bl	800012c <__udivsi3>
 8000f40:	0003      	movs	r3, r0
 8000f42:	0018      	movs	r0, r3
 8000f44:	f000 fb1f 	bl	8001586 <HAL_SYSTICK_Config>
 8000f48:	1e03      	subs	r3, r0, #0
 8000f4a:	d001      	beq.n	8000f50 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e00f      	b.n	8000f70 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	d80b      	bhi.n	8000f6e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f56:	6879      	ldr	r1, [r7, #4]
 8000f58:	2301      	movs	r3, #1
 8000f5a:	425b      	negs	r3, r3
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f000 fafc 	bl	800155c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <HAL_InitTick+0x64>)
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e000      	b.n	8000f70 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	0018      	movs	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b003      	add	sp, #12
 8000f76:	bd90      	pop	{r4, r7, pc}
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	20000008 	.word	0x20000008
 8000f80:	20000004 	.word	0x20000004

08000f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f88:	4b05      	ldr	r3, [pc, #20]	@ (8000fa0 <HAL_IncTick+0x1c>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	001a      	movs	r2, r3
 8000f8e:	4b05      	ldr	r3, [pc, #20]	@ (8000fa4 <HAL_IncTick+0x20>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	18d2      	adds	r2, r2, r3
 8000f94:	4b03      	ldr	r3, [pc, #12]	@ (8000fa4 <HAL_IncTick+0x20>)
 8000f96:	601a      	str	r2, [r3, #0]
}
 8000f98:	46c0      	nop			@ (mov r8, r8)
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	46c0      	nop			@ (mov r8, r8)
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	2000021c 	.word	0x2000021c

08000fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  return uwTick;
 8000fac:	4b02      	ldr	r3, [pc, #8]	@ (8000fb8 <HAL_GetTick+0x10>)
 8000fae:	681b      	ldr	r3, [r3, #0]
}
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	46c0      	nop			@ (mov r8, r8)
 8000fb8:	2000021c 	.word	0x2000021c

08000fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fc4:	f7ff fff0 	bl	8000fa8 <HAL_GetTick>
 8000fc8:	0003      	movs	r3, r0
 8000fca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	d005      	beq.n	8000fe2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001000 <HAL_Delay+0x44>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	001a      	movs	r2, r3
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	189b      	adds	r3, r3, r2
 8000fe0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fe2:	46c0      	nop			@ (mov r8, r8)
 8000fe4:	f7ff ffe0 	bl	8000fa8 <HAL_GetTick>
 8000fe8:	0002      	movs	r2, r0
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d8f7      	bhi.n	8000fe4 <HAL_Delay+0x28>
  {
  }
}
 8000ff4:	46c0      	nop			@ (mov r8, r8)
 8000ff6:	46c0      	nop			@ (mov r8, r8)
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	b004      	add	sp, #16
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	46c0      	nop			@ (mov r8, r8)
 8001000:	20000008 	.word	0x20000008

08001004 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e159      	b.n	80012ca <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800101a:	2b00      	cmp	r3, #0
 800101c:	d10a      	bne.n	8001034 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2250      	movs	r2, #80	@ 0x50
 8001028:	2100      	movs	r1, #0
 800102a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	0018      	movs	r0, r3
 8001030:	f7ff fd94 	bl	8000b5c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001038:	2210      	movs	r2, #16
 800103a:	4013      	ands	r3, r2
 800103c:	2b10      	cmp	r3, #16
 800103e:	d005      	beq.n	800104c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	2204      	movs	r2, #4
 8001048:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800104a:	d00b      	beq.n	8001064 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001050:	2210      	movs	r2, #16
 8001052:	431a      	orrs	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2250      	movs	r2, #80	@ 0x50
 800105c:	2100      	movs	r1, #0
 800105e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e132      	b.n	80012ca <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001068:	4a9a      	ldr	r2, [pc, #616]	@ (80012d4 <HAL_ADC_Init+0x2d0>)
 800106a:	4013      	ands	r3, r2
 800106c:	2202      	movs	r2, #2
 800106e:	431a      	orrs	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	2203      	movs	r2, #3
 800107c:	4013      	ands	r3, r2
 800107e:	2b01      	cmp	r3, #1
 8001080:	d108      	bne.n	8001094 <HAL_ADC_Init+0x90>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2201      	movs	r2, #1
 800108a:	4013      	ands	r3, r2
 800108c:	2b01      	cmp	r3, #1
 800108e:	d101      	bne.n	8001094 <HAL_ADC_Init+0x90>
 8001090:	2301      	movs	r3, #1
 8001092:	e000      	b.n	8001096 <HAL_ADC_Init+0x92>
 8001094:	2300      	movs	r3, #0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d149      	bne.n	800112e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	23c0      	movs	r3, #192	@ 0xc0
 80010a0:	061b      	lsls	r3, r3, #24
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d00b      	beq.n	80010be <HAL_ADC_Init+0xba>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	2380      	movs	r3, #128	@ 0x80
 80010ac:	05db      	lsls	r3, r3, #23
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d005      	beq.n	80010be <HAL_ADC_Init+0xba>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	2380      	movs	r3, #128	@ 0x80
 80010b8:	061b      	lsls	r3, r3, #24
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d111      	bne.n	80010e2 <HAL_ADC_Init+0xde>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	691a      	ldr	r2, [r3, #16]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	0092      	lsls	r2, r2, #2
 80010ca:	0892      	lsrs	r2, r2, #2
 80010cc:	611a      	str	r2, [r3, #16]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6919      	ldr	r1, [r3, #16]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	430a      	orrs	r2, r1
 80010de:	611a      	str	r2, [r3, #16]
 80010e0:	e014      	b.n	800110c <HAL_ADC_Init+0x108>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	691a      	ldr	r2, [r3, #16]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	0092      	lsls	r2, r2, #2
 80010ee:	0892      	lsrs	r2, r2, #2
 80010f0:	611a      	str	r2, [r3, #16]
 80010f2:	4b79      	ldr	r3, [pc, #484]	@ (80012d8 <HAL_ADC_Init+0x2d4>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	4b78      	ldr	r3, [pc, #480]	@ (80012d8 <HAL_ADC_Init+0x2d4>)
 80010f8:	4978      	ldr	r1, [pc, #480]	@ (80012dc <HAL_ADC_Init+0x2d8>)
 80010fa:	400a      	ands	r2, r1
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	4b76      	ldr	r3, [pc, #472]	@ (80012d8 <HAL_ADC_Init+0x2d4>)
 8001100:	6819      	ldr	r1, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	4b74      	ldr	r3, [pc, #464]	@ (80012d8 <HAL_ADC_Init+0x2d4>)
 8001108:	430a      	orrs	r2, r1
 800110a:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	68da      	ldr	r2, [r3, #12]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2118      	movs	r1, #24
 8001118:	438a      	bics	r2, r1
 800111a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	68d9      	ldr	r1, [r3, #12]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689a      	ldr	r2, [r3, #8]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	430a      	orrs	r2, r1
 800112c:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800112e:	4b6a      	ldr	r3, [pc, #424]	@ (80012d8 <HAL_ADC_Init+0x2d4>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	4b69      	ldr	r3, [pc, #420]	@ (80012d8 <HAL_ADC_Init+0x2d4>)
 8001134:	496a      	ldr	r1, [pc, #424]	@ (80012e0 <HAL_ADC_Init+0x2dc>)
 8001136:	400a      	ands	r2, r1
 8001138:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800113a:	4b67      	ldr	r3, [pc, #412]	@ (80012d8 <HAL_ADC_Init+0x2d4>)
 800113c:	6819      	ldr	r1, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001142:	065a      	lsls	r2, r3, #25
 8001144:	4b64      	ldr	r3, [pc, #400]	@ (80012d8 <HAL_ADC_Init+0x2d4>)
 8001146:	430a      	orrs	r2, r1
 8001148:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689a      	ldr	r2, [r3, #8]
 8001150:	2380      	movs	r3, #128	@ 0x80
 8001152:	055b      	lsls	r3, r3, #21
 8001154:	4013      	ands	r3, r2
 8001156:	d108      	bne.n	800116a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	689a      	ldr	r2, [r3, #8]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2180      	movs	r1, #128	@ 0x80
 8001164:	0549      	lsls	r1, r1, #21
 8001166:	430a      	orrs	r2, r1
 8001168:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	68da      	ldr	r2, [r3, #12]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	495b      	ldr	r1, [pc, #364]	@ (80012e4 <HAL_ADC_Init+0x2e0>)
 8001176:	400a      	ands	r2, r1
 8001178:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	68d9      	ldr	r1, [r3, #12]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	691b      	ldr	r3, [r3, #16]
 8001188:	2b02      	cmp	r3, #2
 800118a:	d101      	bne.n	8001190 <HAL_ADC_Init+0x18c>
 800118c:	2304      	movs	r3, #4
 800118e:	e000      	b.n	8001192 <HAL_ADC_Init+0x18e>
 8001190:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001192:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2020      	movs	r0, #32
 8001198:	5c1b      	ldrb	r3, [r3, r0]
 800119a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800119c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	202c      	movs	r0, #44	@ 0x2c
 80011a2:	5c1b      	ldrb	r3, [r3, r0]
 80011a4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80011a6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80011ac:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80011b4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80011bc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	430a      	orrs	r2, r1
 80011c4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011ca:	23c2      	movs	r3, #194	@ 0xc2
 80011cc:	33ff      	adds	r3, #255	@ 0xff
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d00b      	beq.n	80011ea <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	68d9      	ldr	r1, [r3, #12]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80011e0:	431a      	orrs	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	430a      	orrs	r2, r1
 80011e8:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2221      	movs	r2, #33	@ 0x21
 80011ee:	5c9b      	ldrb	r3, [r3, r2]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d11a      	bne.n	800122a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2220      	movs	r2, #32
 80011f8:	5c9b      	ldrb	r3, [r3, r2]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d109      	bne.n	8001212 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	68da      	ldr	r2, [r3, #12]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2180      	movs	r1, #128	@ 0x80
 800120a:	0249      	lsls	r1, r1, #9
 800120c:	430a      	orrs	r2, r1
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	e00b      	b.n	800122a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001216:	2220      	movs	r2, #32
 8001218:	431a      	orrs	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001222:	2201      	movs	r2, #1
 8001224:	431a      	orrs	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800122e:	2b01      	cmp	r3, #1
 8001230:	d11f      	bne.n	8001272 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	691a      	ldr	r2, [r3, #16]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	492a      	ldr	r1, [pc, #168]	@ (80012e8 <HAL_ADC_Init+0x2e4>)
 800123e:	400a      	ands	r2, r1
 8001240:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6919      	ldr	r1, [r3, #16]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001250:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8001256:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	430a      	orrs	r2, r1
 800125e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	691a      	ldr	r2, [r3, #16]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2101      	movs	r1, #1
 800126c:	430a      	orrs	r2, r1
 800126e:	611a      	str	r2, [r3, #16]
 8001270:	e00e      	b.n	8001290 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	2201      	movs	r2, #1
 800127a:	4013      	ands	r3, r2
 800127c:	2b01      	cmp	r3, #1
 800127e:	d107      	bne.n	8001290 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	691a      	ldr	r2, [r3, #16]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2101      	movs	r1, #1
 800128c:	438a      	bics	r2, r1
 800128e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	695a      	ldr	r2, [r3, #20]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2107      	movs	r1, #7
 800129c:	438a      	bics	r2, r1
 800129e:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6959      	ldr	r1, [r3, #20]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	430a      	orrs	r2, r1
 80012b0:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012bc:	2203      	movs	r2, #3
 80012be:	4393      	bics	r3, r2
 80012c0:	2201      	movs	r2, #1
 80012c2:	431a      	orrs	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	0018      	movs	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	b002      	add	sp, #8
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	46c0      	nop			@ (mov r8, r8)
 80012d4:	fffffefd 	.word	0xfffffefd
 80012d8:	40012708 	.word	0x40012708
 80012dc:	ffc3ffff 	.word	0xffc3ffff
 80012e0:	fdffffff 	.word	0xfdffffff
 80012e4:	fffe0219 	.word	0xfffe0219
 80012e8:	fffffc03 	.word	0xfffffc03

080012ec <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2250      	movs	r2, #80	@ 0x50
 80012fa:	5c9b      	ldrb	r3, [r3, r2]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d101      	bne.n	8001304 <HAL_ADC_ConfigChannel+0x18>
 8001300:	2302      	movs	r3, #2
 8001302:	e06c      	b.n	80013de <HAL_ADC_ConfigChannel+0xf2>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2250      	movs	r2, #80	@ 0x50
 8001308:	2101      	movs	r1, #1
 800130a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	2204      	movs	r2, #4
 8001314:	4013      	ands	r3, r2
 8001316:	d00b      	beq.n	8001330 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800131c:	2220      	movs	r2, #32
 800131e:	431a      	orrs	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2250      	movs	r2, #80	@ 0x50
 8001328:	2100      	movs	r1, #0
 800132a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e056      	b.n	80013de <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	4a2c      	ldr	r2, [pc, #176]	@ (80013e8 <HAL_ADC_ConfigChannel+0xfc>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d028      	beq.n	800138c <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	035b      	lsls	r3, r3, #13
 8001346:	0b5a      	lsrs	r2, r3, #13
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	430a      	orrs	r2, r1
 800134e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	2380      	movs	r3, #128	@ 0x80
 8001356:	02db      	lsls	r3, r3, #11
 8001358:	4013      	ands	r3, r2
 800135a:	d009      	beq.n	8001370 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800135c:	4b23      	ldr	r3, [pc, #140]	@ (80013ec <HAL_ADC_ConfigChannel+0x100>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b22      	ldr	r3, [pc, #136]	@ (80013ec <HAL_ADC_ConfigChannel+0x100>)
 8001362:	2180      	movs	r1, #128	@ 0x80
 8001364:	0409      	lsls	r1, r1, #16
 8001366:	430a      	orrs	r2, r1
 8001368:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800136a:	200a      	movs	r0, #10
 800136c:	f000 f844 	bl	80013f8 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	2380      	movs	r3, #128	@ 0x80
 8001376:	029b      	lsls	r3, r3, #10
 8001378:	4013      	ands	r3, r2
 800137a:	d02b      	beq.n	80013d4 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800137c:	4b1b      	ldr	r3, [pc, #108]	@ (80013ec <HAL_ADC_ConfigChannel+0x100>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b1a      	ldr	r3, [pc, #104]	@ (80013ec <HAL_ADC_ConfigChannel+0x100>)
 8001382:	2180      	movs	r1, #128	@ 0x80
 8001384:	03c9      	lsls	r1, r1, #15
 8001386:	430a      	orrs	r2, r1
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	e023      	b.n	80013d4 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	035b      	lsls	r3, r3, #13
 8001398:	0b5b      	lsrs	r3, r3, #13
 800139a:	43d9      	mvns	r1, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	400a      	ands	r2, r1
 80013a2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	2380      	movs	r3, #128	@ 0x80
 80013aa:	02db      	lsls	r3, r3, #11
 80013ac:	4013      	ands	r3, r2
 80013ae:	d005      	beq.n	80013bc <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80013b0:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <HAL_ADC_ConfigChannel+0x100>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b0d      	ldr	r3, [pc, #52]	@ (80013ec <HAL_ADC_ConfigChannel+0x100>)
 80013b6:	490e      	ldr	r1, [pc, #56]	@ (80013f0 <HAL_ADC_ConfigChannel+0x104>)
 80013b8:	400a      	ands	r2, r1
 80013ba:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	2380      	movs	r3, #128	@ 0x80
 80013c2:	029b      	lsls	r3, r3, #10
 80013c4:	4013      	ands	r3, r2
 80013c6:	d005      	beq.n	80013d4 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80013c8:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <HAL_ADC_ConfigChannel+0x100>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b07      	ldr	r3, [pc, #28]	@ (80013ec <HAL_ADC_ConfigChannel+0x100>)
 80013ce:	4909      	ldr	r1, [pc, #36]	@ (80013f4 <HAL_ADC_ConfigChannel+0x108>)
 80013d0:	400a      	ands	r2, r1
 80013d2:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2250      	movs	r2, #80	@ 0x50
 80013d8:	2100      	movs	r1, #0
 80013da:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	0018      	movs	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b002      	add	sp, #8
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	46c0      	nop			@ (mov r8, r8)
 80013e8:	00001001 	.word	0x00001001
 80013ec:	40012708 	.word	0x40012708
 80013f0:	ff7fffff 	.word	0xff7fffff
 80013f4:	ffbfffff 	.word	0xffbfffff

080013f8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001400:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <ADC_DelayMicroSecond+0x38>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	490b      	ldr	r1, [pc, #44]	@ (8001434 <ADC_DelayMicroSecond+0x3c>)
 8001406:	0018      	movs	r0, r3
 8001408:	f7fe fe90 	bl	800012c <__udivsi3>
 800140c:	0003      	movs	r3, r0
 800140e:	001a      	movs	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4353      	muls	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8001416:	e002      	b.n	800141e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	3b01      	subs	r3, #1
 800141c:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1f9      	bne.n	8001418 <ADC_DelayMicroSecond+0x20>
  }
}
 8001424:	46c0      	nop			@ (mov r8, r8)
 8001426:	46c0      	nop			@ (mov r8, r8)
 8001428:	46bd      	mov	sp, r7
 800142a:	b004      	add	sp, #16
 800142c:	bd80      	pop	{r7, pc}
 800142e:	46c0      	nop			@ (mov r8, r8)
 8001430:	20000000 	.word	0x20000000
 8001434:	000f4240 	.word	0x000f4240

08001438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001438:	b590      	push	{r4, r7, lr}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	0002      	movs	r2, r0
 8001440:	6039      	str	r1, [r7, #0]
 8001442:	1dfb      	adds	r3, r7, #7
 8001444:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001446:	1dfb      	adds	r3, r7, #7
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b7f      	cmp	r3, #127	@ 0x7f
 800144c:	d828      	bhi.n	80014a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800144e:	4a2f      	ldr	r2, [pc, #188]	@ (800150c <__NVIC_SetPriority+0xd4>)
 8001450:	1dfb      	adds	r3, r7, #7
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	b25b      	sxtb	r3, r3
 8001456:	089b      	lsrs	r3, r3, #2
 8001458:	33c0      	adds	r3, #192	@ 0xc0
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	589b      	ldr	r3, [r3, r2]
 800145e:	1dfa      	adds	r2, r7, #7
 8001460:	7812      	ldrb	r2, [r2, #0]
 8001462:	0011      	movs	r1, r2
 8001464:	2203      	movs	r2, #3
 8001466:	400a      	ands	r2, r1
 8001468:	00d2      	lsls	r2, r2, #3
 800146a:	21ff      	movs	r1, #255	@ 0xff
 800146c:	4091      	lsls	r1, r2
 800146e:	000a      	movs	r2, r1
 8001470:	43d2      	mvns	r2, r2
 8001472:	401a      	ands	r2, r3
 8001474:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	019b      	lsls	r3, r3, #6
 800147a:	22ff      	movs	r2, #255	@ 0xff
 800147c:	401a      	ands	r2, r3
 800147e:	1dfb      	adds	r3, r7, #7
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	0018      	movs	r0, r3
 8001484:	2303      	movs	r3, #3
 8001486:	4003      	ands	r3, r0
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800148c:	481f      	ldr	r0, [pc, #124]	@ (800150c <__NVIC_SetPriority+0xd4>)
 800148e:	1dfb      	adds	r3, r7, #7
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	b25b      	sxtb	r3, r3
 8001494:	089b      	lsrs	r3, r3, #2
 8001496:	430a      	orrs	r2, r1
 8001498:	33c0      	adds	r3, #192	@ 0xc0
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800149e:	e031      	b.n	8001504 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001510 <__NVIC_SetPriority+0xd8>)
 80014a2:	1dfb      	adds	r3, r7, #7
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	0019      	movs	r1, r3
 80014a8:	230f      	movs	r3, #15
 80014aa:	400b      	ands	r3, r1
 80014ac:	3b08      	subs	r3, #8
 80014ae:	089b      	lsrs	r3, r3, #2
 80014b0:	3306      	adds	r3, #6
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	18d3      	adds	r3, r2, r3
 80014b6:	3304      	adds	r3, #4
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	1dfa      	adds	r2, r7, #7
 80014bc:	7812      	ldrb	r2, [r2, #0]
 80014be:	0011      	movs	r1, r2
 80014c0:	2203      	movs	r2, #3
 80014c2:	400a      	ands	r2, r1
 80014c4:	00d2      	lsls	r2, r2, #3
 80014c6:	21ff      	movs	r1, #255	@ 0xff
 80014c8:	4091      	lsls	r1, r2
 80014ca:	000a      	movs	r2, r1
 80014cc:	43d2      	mvns	r2, r2
 80014ce:	401a      	ands	r2, r3
 80014d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	019b      	lsls	r3, r3, #6
 80014d6:	22ff      	movs	r2, #255	@ 0xff
 80014d8:	401a      	ands	r2, r3
 80014da:	1dfb      	adds	r3, r7, #7
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	0018      	movs	r0, r3
 80014e0:	2303      	movs	r3, #3
 80014e2:	4003      	ands	r3, r0
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014e8:	4809      	ldr	r0, [pc, #36]	@ (8001510 <__NVIC_SetPriority+0xd8>)
 80014ea:	1dfb      	adds	r3, r7, #7
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	001c      	movs	r4, r3
 80014f0:	230f      	movs	r3, #15
 80014f2:	4023      	ands	r3, r4
 80014f4:	3b08      	subs	r3, #8
 80014f6:	089b      	lsrs	r3, r3, #2
 80014f8:	430a      	orrs	r2, r1
 80014fa:	3306      	adds	r3, #6
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	18c3      	adds	r3, r0, r3
 8001500:	3304      	adds	r3, #4
 8001502:	601a      	str	r2, [r3, #0]
}
 8001504:	46c0      	nop			@ (mov r8, r8)
 8001506:	46bd      	mov	sp, r7
 8001508:	b003      	add	sp, #12
 800150a:	bd90      	pop	{r4, r7, pc}
 800150c:	e000e100 	.word	0xe000e100
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	1e5a      	subs	r2, r3, #1
 8001520:	2380      	movs	r3, #128	@ 0x80
 8001522:	045b      	lsls	r3, r3, #17
 8001524:	429a      	cmp	r2, r3
 8001526:	d301      	bcc.n	800152c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001528:	2301      	movs	r3, #1
 800152a:	e010      	b.n	800154e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800152c:	4b0a      	ldr	r3, [pc, #40]	@ (8001558 <SysTick_Config+0x44>)
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	3a01      	subs	r2, #1
 8001532:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001534:	2301      	movs	r3, #1
 8001536:	425b      	negs	r3, r3
 8001538:	2103      	movs	r1, #3
 800153a:	0018      	movs	r0, r3
 800153c:	f7ff ff7c 	bl	8001438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001540:	4b05      	ldr	r3, [pc, #20]	@ (8001558 <SysTick_Config+0x44>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001546:	4b04      	ldr	r3, [pc, #16]	@ (8001558 <SysTick_Config+0x44>)
 8001548:	2207      	movs	r2, #7
 800154a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800154c:	2300      	movs	r3, #0
}
 800154e:	0018      	movs	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	b002      	add	sp, #8
 8001554:	bd80      	pop	{r7, pc}
 8001556:	46c0      	nop			@ (mov r8, r8)
 8001558:	e000e010 	.word	0xe000e010

0800155c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
 8001566:	210f      	movs	r1, #15
 8001568:	187b      	adds	r3, r7, r1
 800156a:	1c02      	adds	r2, r0, #0
 800156c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	187b      	adds	r3, r7, r1
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	b25b      	sxtb	r3, r3
 8001576:	0011      	movs	r1, r2
 8001578:	0018      	movs	r0, r3
 800157a:	f7ff ff5d 	bl	8001438 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 800157e:	46c0      	nop			@ (mov r8, r8)
 8001580:	46bd      	mov	sp, r7
 8001582:	b004      	add	sp, #16
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	0018      	movs	r0, r3
 8001592:	f7ff ffbf 	bl	8001514 <SysTick_Config>
 8001596:	0003      	movs	r3, r0
}
 8001598:	0018      	movs	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	b002      	add	sp, #8
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80015b6:	e149      	b.n	800184c <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2101      	movs	r1, #1
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	4091      	lsls	r1, r2
 80015c2:	000a      	movs	r2, r1
 80015c4:	4013      	ands	r3, r2
 80015c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d100      	bne.n	80015d0 <HAL_GPIO_Init+0x30>
 80015ce:	e13a      	b.n	8001846 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2203      	movs	r2, #3
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d005      	beq.n	80015e8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2203      	movs	r2, #3
 80015e2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d130      	bne.n	800164a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	2203      	movs	r2, #3
 80015f4:	409a      	lsls	r2, r3
 80015f6:	0013      	movs	r3, r2
 80015f8:	43da      	mvns	r2, r3
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	68da      	ldr	r2, [r3, #12]
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	409a      	lsls	r2, r3
 800160a:	0013      	movs	r3, r2
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4313      	orrs	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800161e:	2201      	movs	r2, #1
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	409a      	lsls	r2, r3
 8001624:	0013      	movs	r3, r2
 8001626:	43da      	mvns	r2, r3
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	4013      	ands	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	091b      	lsrs	r3, r3, #4
 8001634:	2201      	movs	r2, #1
 8001636:	401a      	ands	r2, r3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	409a      	lsls	r2, r3
 800163c:	0013      	movs	r3, r2
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	4313      	orrs	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2203      	movs	r2, #3
 8001650:	4013      	ands	r3, r2
 8001652:	2b03      	cmp	r3, #3
 8001654:	d017      	beq.n	8001686 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	2203      	movs	r2, #3
 8001662:	409a      	lsls	r2, r3
 8001664:	0013      	movs	r3, r2
 8001666:	43da      	mvns	r2, r3
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	4013      	ands	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	409a      	lsls	r2, r3
 8001678:	0013      	movs	r3, r2
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2203      	movs	r2, #3
 800168c:	4013      	ands	r3, r2
 800168e:	2b02      	cmp	r3, #2
 8001690:	d123      	bne.n	80016da <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	08da      	lsrs	r2, r3, #3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3208      	adds	r2, #8
 800169a:	0092      	lsls	r2, r2, #2
 800169c:	58d3      	ldr	r3, [r2, r3]
 800169e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	2207      	movs	r2, #7
 80016a4:	4013      	ands	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	220f      	movs	r2, #15
 80016aa:	409a      	lsls	r2, r3
 80016ac:	0013      	movs	r3, r2
 80016ae:	43da      	mvns	r2, r3
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	691a      	ldr	r2, [r3, #16]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	2107      	movs	r1, #7
 80016be:	400b      	ands	r3, r1
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	409a      	lsls	r2, r3
 80016c4:	0013      	movs	r3, r2
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	08da      	lsrs	r2, r3, #3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3208      	adds	r2, #8
 80016d4:	0092      	lsls	r2, r2, #2
 80016d6:	6939      	ldr	r1, [r7, #16]
 80016d8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	2203      	movs	r2, #3
 80016e6:	409a      	lsls	r2, r3
 80016e8:	0013      	movs	r3, r2
 80016ea:	43da      	mvns	r2, r3
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2203      	movs	r2, #3
 80016f8:	401a      	ands	r2, r3
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	409a      	lsls	r2, r3
 8001700:	0013      	movs	r3, r2
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	23c0      	movs	r3, #192	@ 0xc0
 8001714:	029b      	lsls	r3, r3, #10
 8001716:	4013      	ands	r3, r2
 8001718:	d100      	bne.n	800171c <HAL_GPIO_Init+0x17c>
 800171a:	e094      	b.n	8001846 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171c:	4b51      	ldr	r3, [pc, #324]	@ (8001864 <HAL_GPIO_Init+0x2c4>)
 800171e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001720:	4b50      	ldr	r3, [pc, #320]	@ (8001864 <HAL_GPIO_Init+0x2c4>)
 8001722:	2101      	movs	r1, #1
 8001724:	430a      	orrs	r2, r1
 8001726:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001728:	4a4f      	ldr	r2, [pc, #316]	@ (8001868 <HAL_GPIO_Init+0x2c8>)
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	089b      	lsrs	r3, r3, #2
 800172e:	3302      	adds	r3, #2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	589b      	ldr	r3, [r3, r2]
 8001734:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	2203      	movs	r2, #3
 800173a:	4013      	ands	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	220f      	movs	r2, #15
 8001740:	409a      	lsls	r2, r3
 8001742:	0013      	movs	r3, r2
 8001744:	43da      	mvns	r2, r3
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	4013      	ands	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	23a0      	movs	r3, #160	@ 0xa0
 8001750:	05db      	lsls	r3, r3, #23
 8001752:	429a      	cmp	r2, r3
 8001754:	d013      	beq.n	800177e <HAL_GPIO_Init+0x1de>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a44      	ldr	r2, [pc, #272]	@ (800186c <HAL_GPIO_Init+0x2cc>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d00d      	beq.n	800177a <HAL_GPIO_Init+0x1da>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a43      	ldr	r2, [pc, #268]	@ (8001870 <HAL_GPIO_Init+0x2d0>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d007      	beq.n	8001776 <HAL_GPIO_Init+0x1d6>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a42      	ldr	r2, [pc, #264]	@ (8001874 <HAL_GPIO_Init+0x2d4>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d101      	bne.n	8001772 <HAL_GPIO_Init+0x1d2>
 800176e:	2305      	movs	r3, #5
 8001770:	e006      	b.n	8001780 <HAL_GPIO_Init+0x1e0>
 8001772:	2306      	movs	r3, #6
 8001774:	e004      	b.n	8001780 <HAL_GPIO_Init+0x1e0>
 8001776:	2302      	movs	r3, #2
 8001778:	e002      	b.n	8001780 <HAL_GPIO_Init+0x1e0>
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <HAL_GPIO_Init+0x1e0>
 800177e:	2300      	movs	r3, #0
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	2103      	movs	r1, #3
 8001784:	400a      	ands	r2, r1
 8001786:	0092      	lsls	r2, r2, #2
 8001788:	4093      	lsls	r3, r2
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001790:	4935      	ldr	r1, [pc, #212]	@ (8001868 <HAL_GPIO_Init+0x2c8>)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	089b      	lsrs	r3, r3, #2
 8001796:	3302      	adds	r3, #2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800179e:	4b36      	ldr	r3, [pc, #216]	@ (8001878 <HAL_GPIO_Init+0x2d8>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	43da      	mvns	r2, r3
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	4013      	ands	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	2380      	movs	r3, #128	@ 0x80
 80017b4:	035b      	lsls	r3, r3, #13
 80017b6:	4013      	ands	r3, r2
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4313      	orrs	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001878 <HAL_GPIO_Init+0x2d8>)
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80017c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001878 <HAL_GPIO_Init+0x2d8>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	43da      	mvns	r2, r3
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685a      	ldr	r2, [r3, #4]
 80017dc:	2380      	movs	r3, #128	@ 0x80
 80017de:	039b      	lsls	r3, r3, #14
 80017e0:	4013      	ands	r3, r2
 80017e2:	d003      	beq.n	80017ec <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80017ec:	4b22      	ldr	r3, [pc, #136]	@ (8001878 <HAL_GPIO_Init+0x2d8>)
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80017f2:	4b21      	ldr	r3, [pc, #132]	@ (8001878 <HAL_GPIO_Init+0x2d8>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	43da      	mvns	r2, r3
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	2380      	movs	r3, #128	@ 0x80
 8001808:	029b      	lsls	r3, r3, #10
 800180a:	4013      	ands	r3, r2
 800180c:	d003      	beq.n	8001816 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4313      	orrs	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001816:	4b18      	ldr	r3, [pc, #96]	@ (8001878 <HAL_GPIO_Init+0x2d8>)
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800181c:	4b16      	ldr	r3, [pc, #88]	@ (8001878 <HAL_GPIO_Init+0x2d8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	43da      	mvns	r2, r3
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	2380      	movs	r3, #128	@ 0x80
 8001832:	025b      	lsls	r3, r3, #9
 8001834:	4013      	ands	r3, r2
 8001836:	d003      	beq.n	8001840 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001840:	4b0d      	ldr	r3, [pc, #52]	@ (8001878 <HAL_GPIO_Init+0x2d8>)
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	3301      	adds	r3, #1
 800184a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	40da      	lsrs	r2, r3
 8001854:	1e13      	subs	r3, r2, #0
 8001856:	d000      	beq.n	800185a <HAL_GPIO_Init+0x2ba>
 8001858:	e6ae      	b.n	80015b8 <HAL_GPIO_Init+0x18>
  }
}
 800185a:	46c0      	nop			@ (mov r8, r8)
 800185c:	46c0      	nop			@ (mov r8, r8)
 800185e:	46bd      	mov	sp, r7
 8001860:	b006      	add	sp, #24
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40021000 	.word	0x40021000
 8001868:	40010000 	.word	0x40010000
 800186c:	50000400 	.word	0x50000400
 8001870:	50000800 	.word	0x50000800
 8001874:	50001c00 	.word	0x50001c00
 8001878:	40010400 	.word	0x40010400

0800187c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	0008      	movs	r0, r1
 8001886:	0011      	movs	r1, r2
 8001888:	1cbb      	adds	r3, r7, #2
 800188a:	1c02      	adds	r2, r0, #0
 800188c:	801a      	strh	r2, [r3, #0]
 800188e:	1c7b      	adds	r3, r7, #1
 8001890:	1c0a      	adds	r2, r1, #0
 8001892:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001894:	1c7b      	adds	r3, r7, #1
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d004      	beq.n	80018a6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800189c:	1cbb      	adds	r3, r7, #2
 800189e:	881a      	ldrh	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80018a4:	e003      	b.n	80018ae <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80018a6:	1cbb      	adds	r3, r7, #2
 80018a8:	881a      	ldrh	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018ae:	46c0      	nop			@ (mov r8, r8)
 80018b0:	46bd      	mov	sp, r7
 80018b2:	b002      	add	sp, #8
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b8:	b5b0      	push	{r4, r5, r7, lr}
 80018ba:	b08a      	sub	sp, #40	@ 0x28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d102      	bne.n	80018cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	f000 fb6c 	bl	8001fa4 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018cc:	4bc8      	ldr	r3, [pc, #800]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	220c      	movs	r2, #12
 80018d2:	4013      	ands	r3, r2
 80018d4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018d6:	4bc6      	ldr	r3, [pc, #792]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 80018d8:	68da      	ldr	r2, [r3, #12]
 80018da:	2380      	movs	r3, #128	@ 0x80
 80018dc:	025b      	lsls	r3, r3, #9
 80018de:	4013      	ands	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2201      	movs	r2, #1
 80018e8:	4013      	ands	r3, r2
 80018ea:	d100      	bne.n	80018ee <HAL_RCC_OscConfig+0x36>
 80018ec:	e07d      	b.n	80019ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	d007      	beq.n	8001904 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	2b0c      	cmp	r3, #12
 80018f8:	d112      	bne.n	8001920 <HAL_RCC_OscConfig+0x68>
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	2380      	movs	r3, #128	@ 0x80
 80018fe:	025b      	lsls	r3, r3, #9
 8001900:	429a      	cmp	r2, r3
 8001902:	d10d      	bne.n	8001920 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001904:	4bba      	ldr	r3, [pc, #744]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	2380      	movs	r3, #128	@ 0x80
 800190a:	029b      	lsls	r3, r3, #10
 800190c:	4013      	ands	r3, r2
 800190e:	d100      	bne.n	8001912 <HAL_RCC_OscConfig+0x5a>
 8001910:	e06a      	b.n	80019e8 <HAL_RCC_OscConfig+0x130>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d166      	bne.n	80019e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	f000 fb42 	bl	8001fa4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	2380      	movs	r3, #128	@ 0x80
 8001926:	025b      	lsls	r3, r3, #9
 8001928:	429a      	cmp	r2, r3
 800192a:	d107      	bne.n	800193c <HAL_RCC_OscConfig+0x84>
 800192c:	4bb0      	ldr	r3, [pc, #704]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4baf      	ldr	r3, [pc, #700]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 8001932:	2180      	movs	r1, #128	@ 0x80
 8001934:	0249      	lsls	r1, r1, #9
 8001936:	430a      	orrs	r2, r1
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	e027      	b.n	800198c <HAL_RCC_OscConfig+0xd4>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	23a0      	movs	r3, #160	@ 0xa0
 8001942:	02db      	lsls	r3, r3, #11
 8001944:	429a      	cmp	r2, r3
 8001946:	d10e      	bne.n	8001966 <HAL_RCC_OscConfig+0xae>
 8001948:	4ba9      	ldr	r3, [pc, #676]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4ba8      	ldr	r3, [pc, #672]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 800194e:	2180      	movs	r1, #128	@ 0x80
 8001950:	02c9      	lsls	r1, r1, #11
 8001952:	430a      	orrs	r2, r1
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	4ba6      	ldr	r3, [pc, #664]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	4ba5      	ldr	r3, [pc, #660]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 800195c:	2180      	movs	r1, #128	@ 0x80
 800195e:	0249      	lsls	r1, r1, #9
 8001960:	430a      	orrs	r2, r1
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	e012      	b.n	800198c <HAL_RCC_OscConfig+0xd4>
 8001966:	4ba2      	ldr	r3, [pc, #648]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	4ba1      	ldr	r3, [pc, #644]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 800196c:	49a1      	ldr	r1, [pc, #644]	@ (8001bf4 <HAL_RCC_OscConfig+0x33c>)
 800196e:	400a      	ands	r2, r1
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	4b9f      	ldr	r3, [pc, #636]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	2380      	movs	r3, #128	@ 0x80
 8001978:	025b      	lsls	r3, r3, #9
 800197a:	4013      	ands	r3, r2
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4b9b      	ldr	r3, [pc, #620]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4b9a      	ldr	r3, [pc, #616]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 8001986:	499c      	ldr	r1, [pc, #624]	@ (8001bf8 <HAL_RCC_OscConfig+0x340>)
 8001988:	400a      	ands	r2, r1
 800198a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d014      	beq.n	80019be <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001994:	f7ff fb08 	bl	8000fa8 <HAL_GetTick>
 8001998:	0003      	movs	r3, r0
 800199a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800199e:	f7ff fb03 	bl	8000fa8 <HAL_GetTick>
 80019a2:	0002      	movs	r2, r0
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b64      	cmp	r3, #100	@ 0x64
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e2f9      	b.n	8001fa4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019b0:	4b8f      	ldr	r3, [pc, #572]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	2380      	movs	r3, #128	@ 0x80
 80019b6:	029b      	lsls	r3, r3, #10
 80019b8:	4013      	ands	r3, r2
 80019ba:	d0f0      	beq.n	800199e <HAL_RCC_OscConfig+0xe6>
 80019bc:	e015      	b.n	80019ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019be:	f7ff faf3 	bl	8000fa8 <HAL_GetTick>
 80019c2:	0003      	movs	r3, r0
 80019c4:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019c8:	f7ff faee 	bl	8000fa8 <HAL_GetTick>
 80019cc:	0002      	movs	r2, r0
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b64      	cmp	r3, #100	@ 0x64
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e2e4      	b.n	8001fa4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019da:	4b85      	ldr	r3, [pc, #532]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	2380      	movs	r3, #128	@ 0x80
 80019e0:	029b      	lsls	r3, r3, #10
 80019e2:	4013      	ands	r3, r2
 80019e4:	d1f0      	bne.n	80019c8 <HAL_RCC_OscConfig+0x110>
 80019e6:	e000      	b.n	80019ea <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2202      	movs	r2, #2
 80019f0:	4013      	ands	r3, r2
 80019f2:	d100      	bne.n	80019f6 <HAL_RCC_OscConfig+0x13e>
 80019f4:	e099      	b.n	8001b2a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80019fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fe:	2220      	movs	r2, #32
 8001a00:	4013      	ands	r3, r2
 8001a02:	d009      	beq.n	8001a18 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001a04:	4b7a      	ldr	r3, [pc, #488]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b79      	ldr	r3, [pc, #484]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 8001a0a:	2120      	movs	r1, #32
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a12:	2220      	movs	r2, #32
 8001a14:	4393      	bics	r3, r2
 8001a16:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	d005      	beq.n	8001a2a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	2b0c      	cmp	r3, #12
 8001a22:	d13e      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x1ea>
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d13b      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001a2a:	4b71      	ldr	r3, [pc, #452]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2204      	movs	r2, #4
 8001a30:	4013      	ands	r3, r2
 8001a32:	d004      	beq.n	8001a3e <HAL_RCC_OscConfig+0x186>
 8001a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e2b2      	b.n	8001fa4 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3e:	4b6c      	ldr	r3, [pc, #432]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	4a6e      	ldr	r2, [pc, #440]	@ (8001bfc <HAL_RCC_OscConfig+0x344>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	0019      	movs	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	021a      	lsls	r2, r3, #8
 8001a4e:	4b68      	ldr	r3, [pc, #416]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 8001a50:	430a      	orrs	r2, r1
 8001a52:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001a54:	4b66      	ldr	r3, [pc, #408]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2209      	movs	r2, #9
 8001a5a:	4393      	bics	r3, r2
 8001a5c:	0019      	movs	r1, r3
 8001a5e:	4b64      	ldr	r3, [pc, #400]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 8001a60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a62:	430a      	orrs	r2, r1
 8001a64:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a66:	f000 fbeb 	bl	8002240 <HAL_RCC_GetSysClockFreq>
 8001a6a:	0001      	movs	r1, r0
 8001a6c:	4b60      	ldr	r3, [pc, #384]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	091b      	lsrs	r3, r3, #4
 8001a72:	220f      	movs	r2, #15
 8001a74:	4013      	ands	r3, r2
 8001a76:	4a62      	ldr	r2, [pc, #392]	@ (8001c00 <HAL_RCC_OscConfig+0x348>)
 8001a78:	5cd3      	ldrb	r3, [r2, r3]
 8001a7a:	000a      	movs	r2, r1
 8001a7c:	40da      	lsrs	r2, r3
 8001a7e:	4b61      	ldr	r3, [pc, #388]	@ (8001c04 <HAL_RCC_OscConfig+0x34c>)
 8001a80:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001a82:	4b61      	ldr	r3, [pc, #388]	@ (8001c08 <HAL_RCC_OscConfig+0x350>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2513      	movs	r5, #19
 8001a88:	197c      	adds	r4, r7, r5
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f7ff fa46 	bl	8000f1c <HAL_InitTick>
 8001a90:	0003      	movs	r3, r0
 8001a92:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001a94:	197b      	adds	r3, r7, r5
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d046      	beq.n	8001b2a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001a9c:	197b      	adds	r3, r7, r5
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	e280      	b.n	8001fa4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d027      	beq.n	8001af8 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001aa8:	4b51      	ldr	r3, [pc, #324]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2209      	movs	r2, #9
 8001aae:	4393      	bics	r3, r2
 8001ab0:	0019      	movs	r1, r3
 8001ab2:	4b4f      	ldr	r3, [pc, #316]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 8001ab4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aba:	f7ff fa75 	bl	8000fa8 <HAL_GetTick>
 8001abe:	0003      	movs	r3, r0
 8001ac0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ac4:	f7ff fa70 	bl	8000fa8 <HAL_GetTick>
 8001ac8:	0002      	movs	r2, r0
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e266      	b.n	8001fa4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ad6:	4b46      	ldr	r3, [pc, #280]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2204      	movs	r2, #4
 8001adc:	4013      	ands	r3, r2
 8001ade:	d0f1      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae0:	4b43      	ldr	r3, [pc, #268]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	4a45      	ldr	r2, [pc, #276]	@ (8001bfc <HAL_RCC_OscConfig+0x344>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	0019      	movs	r1, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	021a      	lsls	r2, r3, #8
 8001af0:	4b3f      	ldr	r3, [pc, #252]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 8001af2:	430a      	orrs	r2, r1
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	e018      	b.n	8001b2a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001af8:	4b3d      	ldr	r3, [pc, #244]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b3c      	ldr	r3, [pc, #240]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 8001afe:	2101      	movs	r1, #1
 8001b00:	438a      	bics	r2, r1
 8001b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b04:	f7ff fa50 	bl	8000fa8 <HAL_GetTick>
 8001b08:	0003      	movs	r3, r0
 8001b0a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b0e:	f7ff fa4b 	bl	8000fa8 <HAL_GetTick>
 8001b12:	0002      	movs	r2, r0
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e241      	b.n	8001fa4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b20:	4b33      	ldr	r3, [pc, #204]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2204      	movs	r2, #4
 8001b26:	4013      	ands	r3, r2
 8001b28:	d1f1      	bne.n	8001b0e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2210      	movs	r2, #16
 8001b30:	4013      	ands	r3, r2
 8001b32:	d100      	bne.n	8001b36 <HAL_RCC_OscConfig+0x27e>
 8001b34:	e0a1      	b.n	8001c7a <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d140      	bne.n	8001bbe <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b3c:	4b2c      	ldr	r3, [pc, #176]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	2380      	movs	r3, #128	@ 0x80
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4013      	ands	r3, r2
 8001b46:	d005      	beq.n	8001b54 <HAL_RCC_OscConfig+0x29c>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e227      	b.n	8001fa4 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b54:	4b26      	ldr	r3, [pc, #152]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	4a2c      	ldr	r2, [pc, #176]	@ (8001c0c <HAL_RCC_OscConfig+0x354>)
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	0019      	movs	r1, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a1a      	ldr	r2, [r3, #32]
 8001b62:	4b23      	ldr	r3, [pc, #140]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 8001b64:	430a      	orrs	r2, r1
 8001b66:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b68:	4b21      	ldr	r3, [pc, #132]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	021b      	lsls	r3, r3, #8
 8001b6e:	0a19      	lsrs	r1, r3, #8
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	061a      	lsls	r2, r3, #24
 8001b76:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	0b5b      	lsrs	r3, r3, #13
 8001b82:	3301      	adds	r3, #1
 8001b84:	2280      	movs	r2, #128	@ 0x80
 8001b86:	0212      	lsls	r2, r2, #8
 8001b88:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001b8a:	4b19      	ldr	r3, [pc, #100]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	091b      	lsrs	r3, r3, #4
 8001b90:	210f      	movs	r1, #15
 8001b92:	400b      	ands	r3, r1
 8001b94:	491a      	ldr	r1, [pc, #104]	@ (8001c00 <HAL_RCC_OscConfig+0x348>)
 8001b96:	5ccb      	ldrb	r3, [r1, r3]
 8001b98:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c04 <HAL_RCC_OscConfig+0x34c>)
 8001b9c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c08 <HAL_RCC_OscConfig+0x350>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2513      	movs	r5, #19
 8001ba4:	197c      	adds	r4, r7, r5
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	f7ff f9b8 	bl	8000f1c <HAL_InitTick>
 8001bac:	0003      	movs	r3, r0
 8001bae:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001bb0:	197b      	adds	r3, r7, r5
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d060      	beq.n	8001c7a <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001bb8:	197b      	adds	r3, r7, r5
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	e1f2      	b.n	8001fa4 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d03f      	beq.n	8001c46 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4b09      	ldr	r3, [pc, #36]	@ (8001bf0 <HAL_RCC_OscConfig+0x338>)
 8001bcc:	2180      	movs	r1, #128	@ 0x80
 8001bce:	0049      	lsls	r1, r1, #1
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd4:	f7ff f9e8 	bl	8000fa8 <HAL_GetTick>
 8001bd8:	0003      	movs	r3, r0
 8001bda:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001bdc:	e018      	b.n	8001c10 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bde:	f7ff f9e3 	bl	8000fa8 <HAL_GetTick>
 8001be2:	0002      	movs	r2, r0
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d911      	bls.n	8001c10 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e1d9      	b.n	8001fa4 <HAL_RCC_OscConfig+0x6ec>
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	fffeffff 	.word	0xfffeffff
 8001bf8:	fffbffff 	.word	0xfffbffff
 8001bfc:	ffffe0ff 	.word	0xffffe0ff
 8001c00:	080044ec 	.word	0x080044ec
 8001c04:	20000000 	.word	0x20000000
 8001c08:	20000004 	.word	0x20000004
 8001c0c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c10:	4bc9      	ldr	r3, [pc, #804]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	2380      	movs	r3, #128	@ 0x80
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d0e0      	beq.n	8001bde <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c1c:	4bc6      	ldr	r3, [pc, #792]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	4ac6      	ldr	r2, [pc, #792]	@ (8001f3c <HAL_RCC_OscConfig+0x684>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	0019      	movs	r1, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a1a      	ldr	r2, [r3, #32]
 8001c2a:	4bc3      	ldr	r3, [pc, #780]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c30:	4bc1      	ldr	r3, [pc, #772]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	021b      	lsls	r3, r3, #8
 8001c36:	0a19      	lsrs	r1, r3, #8
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	061a      	lsls	r2, r3, #24
 8001c3e:	4bbe      	ldr	r3, [pc, #760]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001c40:	430a      	orrs	r2, r1
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	e019      	b.n	8001c7a <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c46:	4bbc      	ldr	r3, [pc, #752]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4bbb      	ldr	r3, [pc, #748]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001c4c:	49bc      	ldr	r1, [pc, #752]	@ (8001f40 <HAL_RCC_OscConfig+0x688>)
 8001c4e:	400a      	ands	r2, r1
 8001c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c52:	f7ff f9a9 	bl	8000fa8 <HAL_GetTick>
 8001c56:	0003      	movs	r3, r0
 8001c58:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c5c:	f7ff f9a4 	bl	8000fa8 <HAL_GetTick>
 8001c60:	0002      	movs	r2, r0
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e19a      	b.n	8001fa4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001c6e:	4bb2      	ldr	r3, [pc, #712]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	2380      	movs	r3, #128	@ 0x80
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4013      	ands	r3, r2
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2208      	movs	r2, #8
 8001c80:	4013      	ands	r3, r2
 8001c82:	d036      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d019      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c8c:	4baa      	ldr	r3, [pc, #680]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001c8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c90:	4ba9      	ldr	r3, [pc, #676]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001c92:	2101      	movs	r1, #1
 8001c94:	430a      	orrs	r2, r1
 8001c96:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c98:	f7ff f986 	bl	8000fa8 <HAL_GetTick>
 8001c9c:	0003      	movs	r3, r0
 8001c9e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ca2:	f7ff f981 	bl	8000fa8 <HAL_GetTick>
 8001ca6:	0002      	movs	r2, r0
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e177      	b.n	8001fa4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cb4:	4ba0      	ldr	r3, [pc, #640]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cb8:	2202      	movs	r2, #2
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d0f1      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x3ea>
 8001cbe:	e018      	b.n	8001cf2 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc0:	4b9d      	ldr	r3, [pc, #628]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001cc2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001cc4:	4b9c      	ldr	r3, [pc, #624]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	438a      	bics	r2, r1
 8001cca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f96c 	bl	8000fa8 <HAL_GetTick>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cd6:	f7ff f967 	bl	8000fa8 <HAL_GetTick>
 8001cda:	0002      	movs	r2, r0
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e15d      	b.n	8001fa4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ce8:	4b93      	ldr	r3, [pc, #588]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001cea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cec:	2202      	movs	r2, #2
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d1f1      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2204      	movs	r2, #4
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d100      	bne.n	8001cfe <HAL_RCC_OscConfig+0x446>
 8001cfc:	e0ae      	b.n	8001e5c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cfe:	2023      	movs	r0, #35	@ 0x23
 8001d00:	183b      	adds	r3, r7, r0
 8001d02:	2200      	movs	r2, #0
 8001d04:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d06:	4b8c      	ldr	r3, [pc, #560]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001d08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d0a:	2380      	movs	r3, #128	@ 0x80
 8001d0c:	055b      	lsls	r3, r3, #21
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d109      	bne.n	8001d26 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d12:	4b89      	ldr	r3, [pc, #548]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001d14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d16:	4b88      	ldr	r3, [pc, #544]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001d18:	2180      	movs	r1, #128	@ 0x80
 8001d1a:	0549      	lsls	r1, r1, #21
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001d20:	183b      	adds	r3, r7, r0
 8001d22:	2201      	movs	r2, #1
 8001d24:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d26:	4b87      	ldr	r3, [pc, #540]	@ (8001f44 <HAL_RCC_OscConfig+0x68c>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	2380      	movs	r3, #128	@ 0x80
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d11a      	bne.n	8001d68 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d32:	4b84      	ldr	r3, [pc, #528]	@ (8001f44 <HAL_RCC_OscConfig+0x68c>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	4b83      	ldr	r3, [pc, #524]	@ (8001f44 <HAL_RCC_OscConfig+0x68c>)
 8001d38:	2180      	movs	r1, #128	@ 0x80
 8001d3a:	0049      	lsls	r1, r1, #1
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d40:	f7ff f932 	bl	8000fa8 <HAL_GetTick>
 8001d44:	0003      	movs	r3, r0
 8001d46:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d4a:	f7ff f92d 	bl	8000fa8 <HAL_GetTick>
 8001d4e:	0002      	movs	r2, r0
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b64      	cmp	r3, #100	@ 0x64
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e123      	b.n	8001fa4 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5c:	4b79      	ldr	r3, [pc, #484]	@ (8001f44 <HAL_RCC_OscConfig+0x68c>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	2380      	movs	r3, #128	@ 0x80
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	4013      	ands	r3, r2
 8001d66:	d0f0      	beq.n	8001d4a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	2380      	movs	r3, #128	@ 0x80
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d107      	bne.n	8001d84 <HAL_RCC_OscConfig+0x4cc>
 8001d74:	4b70      	ldr	r3, [pc, #448]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001d76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d78:	4b6f      	ldr	r3, [pc, #444]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001d7a:	2180      	movs	r1, #128	@ 0x80
 8001d7c:	0049      	lsls	r1, r1, #1
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	651a      	str	r2, [r3, #80]	@ 0x50
 8001d82:	e031      	b.n	8001de8 <HAL_RCC_OscConfig+0x530>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10c      	bne.n	8001da6 <HAL_RCC_OscConfig+0x4ee>
 8001d8c:	4b6a      	ldr	r3, [pc, #424]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001d8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d90:	4b69      	ldr	r3, [pc, #420]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001d92:	496b      	ldr	r1, [pc, #428]	@ (8001f40 <HAL_RCC_OscConfig+0x688>)
 8001d94:	400a      	ands	r2, r1
 8001d96:	651a      	str	r2, [r3, #80]	@ 0x50
 8001d98:	4b67      	ldr	r3, [pc, #412]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001d9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d9c:	4b66      	ldr	r3, [pc, #408]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001d9e:	496a      	ldr	r1, [pc, #424]	@ (8001f48 <HAL_RCC_OscConfig+0x690>)
 8001da0:	400a      	ands	r2, r1
 8001da2:	651a      	str	r2, [r3, #80]	@ 0x50
 8001da4:	e020      	b.n	8001de8 <HAL_RCC_OscConfig+0x530>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	23a0      	movs	r3, #160	@ 0xa0
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d10e      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x518>
 8001db2:	4b61      	ldr	r3, [pc, #388]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001db4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001db6:	4b60      	ldr	r3, [pc, #384]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001db8:	2180      	movs	r1, #128	@ 0x80
 8001dba:	00c9      	lsls	r1, r1, #3
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	651a      	str	r2, [r3, #80]	@ 0x50
 8001dc0:	4b5d      	ldr	r3, [pc, #372]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001dc2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001dc4:	4b5c      	ldr	r3, [pc, #368]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001dc6:	2180      	movs	r1, #128	@ 0x80
 8001dc8:	0049      	lsls	r1, r1, #1
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	651a      	str	r2, [r3, #80]	@ 0x50
 8001dce:	e00b      	b.n	8001de8 <HAL_RCC_OscConfig+0x530>
 8001dd0:	4b59      	ldr	r3, [pc, #356]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001dd2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001dd4:	4b58      	ldr	r3, [pc, #352]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001dd6:	495a      	ldr	r1, [pc, #360]	@ (8001f40 <HAL_RCC_OscConfig+0x688>)
 8001dd8:	400a      	ands	r2, r1
 8001dda:	651a      	str	r2, [r3, #80]	@ 0x50
 8001ddc:	4b56      	ldr	r3, [pc, #344]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001dde:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001de0:	4b55      	ldr	r3, [pc, #340]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001de2:	4959      	ldr	r1, [pc, #356]	@ (8001f48 <HAL_RCC_OscConfig+0x690>)
 8001de4:	400a      	ands	r2, r1
 8001de6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d015      	beq.n	8001e1c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df0:	f7ff f8da 	bl	8000fa8 <HAL_GetTick>
 8001df4:	0003      	movs	r3, r0
 8001df6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001df8:	e009      	b.n	8001e0e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dfa:	f7ff f8d5 	bl	8000fa8 <HAL_GetTick>
 8001dfe:	0002      	movs	r2, r0
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	4a51      	ldr	r2, [pc, #324]	@ (8001f4c <HAL_RCC_OscConfig+0x694>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e0ca      	b.n	8001fa4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e0e:	4b4a      	ldr	r3, [pc, #296]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001e10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e12:	2380      	movs	r3, #128	@ 0x80
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4013      	ands	r3, r2
 8001e18:	d0ef      	beq.n	8001dfa <HAL_RCC_OscConfig+0x542>
 8001e1a:	e014      	b.n	8001e46 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1c:	f7ff f8c4 	bl	8000fa8 <HAL_GetTick>
 8001e20:	0003      	movs	r3, r0
 8001e22:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e24:	e009      	b.n	8001e3a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e26:	f7ff f8bf 	bl	8000fa8 <HAL_GetTick>
 8001e2a:	0002      	movs	r2, r0
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	4a46      	ldr	r2, [pc, #280]	@ (8001f4c <HAL_RCC_OscConfig+0x694>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e0b4      	b.n	8001fa4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e3a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001e3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e3e:	2380      	movs	r3, #128	@ 0x80
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	4013      	ands	r3, r2
 8001e44:	d1ef      	bne.n	8001e26 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e46:	2323      	movs	r3, #35	@ 0x23
 8001e48:	18fb      	adds	r3, r7, r3
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d105      	bne.n	8001e5c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e50:	4b39      	ldr	r3, [pc, #228]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001e52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e54:	4b38      	ldr	r3, [pc, #224]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001e56:	493e      	ldr	r1, [pc, #248]	@ (8001f50 <HAL_RCC_OscConfig+0x698>)
 8001e58:	400a      	ands	r2, r1
 8001e5a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d100      	bne.n	8001e66 <HAL_RCC_OscConfig+0x5ae>
 8001e64:	e09d      	b.n	8001fa2 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	2b0c      	cmp	r3, #12
 8001e6a:	d100      	bne.n	8001e6e <HAL_RCC_OscConfig+0x5b6>
 8001e6c:	e076      	b.n	8001f5c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d145      	bne.n	8001f02 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e76:	4b30      	ldr	r3, [pc, #192]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001e7c:	4935      	ldr	r1, [pc, #212]	@ (8001f54 <HAL_RCC_OscConfig+0x69c>)
 8001e7e:	400a      	ands	r2, r1
 8001e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e82:	f7ff f891 	bl	8000fa8 <HAL_GetTick>
 8001e86:	0003      	movs	r3, r0
 8001e88:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e8c:	f7ff f88c 	bl	8000fa8 <HAL_GetTick>
 8001e90:	0002      	movs	r2, r0
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e082      	b.n	8001fa4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e9e:	4b26      	ldr	r3, [pc, #152]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	2380      	movs	r3, #128	@ 0x80
 8001ea4:	049b      	lsls	r3, r3, #18
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eaa:	4b23      	ldr	r3, [pc, #140]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	4a2a      	ldr	r2, [pc, #168]	@ (8001f58 <HAL_RCC_OscConfig+0x6a0>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	0019      	movs	r1, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eca:	4b1b      	ldr	r3, [pc, #108]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	4b1a      	ldr	r3, [pc, #104]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001ed0:	2180      	movs	r1, #128	@ 0x80
 8001ed2:	0449      	lsls	r1, r1, #17
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7ff f866 	bl	8000fa8 <HAL_GetTick>
 8001edc:	0003      	movs	r3, r0
 8001ede:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee2:	f7ff f861 	bl	8000fa8 <HAL_GetTick>
 8001ee6:	0002      	movs	r2, r0
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e057      	b.n	8001fa4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001ef4:	4b10      	ldr	r3, [pc, #64]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	2380      	movs	r3, #128	@ 0x80
 8001efa:	049b      	lsls	r3, r3, #18
 8001efc:	4013      	ands	r3, r2
 8001efe:	d0f0      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x62a>
 8001f00:	e04f      	b.n	8001fa2 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f02:	4b0d      	ldr	r3, [pc, #52]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	4b0c      	ldr	r3, [pc, #48]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001f08:	4912      	ldr	r1, [pc, #72]	@ (8001f54 <HAL_RCC_OscConfig+0x69c>)
 8001f0a:	400a      	ands	r2, r1
 8001f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0e:	f7ff f84b 	bl	8000fa8 <HAL_GetTick>
 8001f12:	0003      	movs	r3, r0
 8001f14:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f18:	f7ff f846 	bl	8000fa8 <HAL_GetTick>
 8001f1c:	0002      	movs	r2, r0
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e03c      	b.n	8001fa4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f2a:	4b03      	ldr	r3, [pc, #12]	@ (8001f38 <HAL_RCC_OscConfig+0x680>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	2380      	movs	r3, #128	@ 0x80
 8001f30:	049b      	lsls	r3, r3, #18
 8001f32:	4013      	ands	r3, r2
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x660>
 8001f36:	e034      	b.n	8001fa2 <HAL_RCC_OscConfig+0x6ea>
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	ffff1fff 	.word	0xffff1fff
 8001f40:	fffffeff 	.word	0xfffffeff
 8001f44:	40007000 	.word	0x40007000
 8001f48:	fffffbff 	.word	0xfffffbff
 8001f4c:	00001388 	.word	0x00001388
 8001f50:	efffffff 	.word	0xefffffff
 8001f54:	feffffff 	.word	0xfeffffff
 8001f58:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d101      	bne.n	8001f68 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e01d      	b.n	8001fa4 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f68:	4b10      	ldr	r3, [pc, #64]	@ (8001fac <HAL_RCC_OscConfig+0x6f4>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	2380      	movs	r3, #128	@ 0x80
 8001f72:	025b      	lsls	r3, r3, #9
 8001f74:	401a      	ands	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d10f      	bne.n	8001f9e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	23f0      	movs	r3, #240	@ 0xf0
 8001f82:	039b      	lsls	r3, r3, #14
 8001f84:	401a      	ands	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d107      	bne.n	8001f9e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	23c0      	movs	r3, #192	@ 0xc0
 8001f92:	041b      	lsls	r3, r3, #16
 8001f94:	401a      	ands	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d001      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b00a      	add	sp, #40	@ 0x28
 8001faa:	bdb0      	pop	{r4, r5, r7, pc}
 8001fac:	40021000 	.word	0x40021000

08001fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb0:	b5b0      	push	{r4, r5, r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e128      	b.n	8002216 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc4:	4b96      	ldr	r3, [pc, #600]	@ (8002220 <HAL_RCC_ClockConfig+0x270>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	4013      	ands	r3, r2
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d91e      	bls.n	8002010 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd2:	4b93      	ldr	r3, [pc, #588]	@ (8002220 <HAL_RCC_ClockConfig+0x270>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	4393      	bics	r3, r2
 8001fda:	0019      	movs	r1, r3
 8001fdc:	4b90      	ldr	r3, [pc, #576]	@ (8002220 <HAL_RCC_ClockConfig+0x270>)
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fe4:	f7fe ffe0 	bl	8000fa8 <HAL_GetTick>
 8001fe8:	0003      	movs	r3, r0
 8001fea:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fec:	e009      	b.n	8002002 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fee:	f7fe ffdb 	bl	8000fa8 <HAL_GetTick>
 8001ff2:	0002      	movs	r2, r0
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	4a8a      	ldr	r2, [pc, #552]	@ (8002224 <HAL_RCC_ClockConfig+0x274>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e109      	b.n	8002216 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002002:	4b87      	ldr	r3, [pc, #540]	@ (8002220 <HAL_RCC_ClockConfig+0x270>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2201      	movs	r2, #1
 8002008:	4013      	ands	r3, r2
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	d1ee      	bne.n	8001fee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2202      	movs	r2, #2
 8002016:	4013      	ands	r3, r2
 8002018:	d009      	beq.n	800202e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800201a:	4b83      	ldr	r3, [pc, #524]	@ (8002228 <HAL_RCC_ClockConfig+0x278>)
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	22f0      	movs	r2, #240	@ 0xf0
 8002020:	4393      	bics	r3, r2
 8002022:	0019      	movs	r1, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	4b7f      	ldr	r3, [pc, #508]	@ (8002228 <HAL_RCC_ClockConfig+0x278>)
 800202a:	430a      	orrs	r2, r1
 800202c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2201      	movs	r2, #1
 8002034:	4013      	ands	r3, r2
 8002036:	d100      	bne.n	800203a <HAL_RCC_ClockConfig+0x8a>
 8002038:	e089      	b.n	800214e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b02      	cmp	r3, #2
 8002040:	d107      	bne.n	8002052 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002042:	4b79      	ldr	r3, [pc, #484]	@ (8002228 <HAL_RCC_ClockConfig+0x278>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	2380      	movs	r3, #128	@ 0x80
 8002048:	029b      	lsls	r3, r3, #10
 800204a:	4013      	ands	r3, r2
 800204c:	d120      	bne.n	8002090 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e0e1      	b.n	8002216 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b03      	cmp	r3, #3
 8002058:	d107      	bne.n	800206a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800205a:	4b73      	ldr	r3, [pc, #460]	@ (8002228 <HAL_RCC_ClockConfig+0x278>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	2380      	movs	r3, #128	@ 0x80
 8002060:	049b      	lsls	r3, r3, #18
 8002062:	4013      	ands	r3, r2
 8002064:	d114      	bne.n	8002090 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e0d5      	b.n	8002216 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d106      	bne.n	8002080 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002072:	4b6d      	ldr	r3, [pc, #436]	@ (8002228 <HAL_RCC_ClockConfig+0x278>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2204      	movs	r2, #4
 8002078:	4013      	ands	r3, r2
 800207a:	d109      	bne.n	8002090 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0ca      	b.n	8002216 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002080:	4b69      	ldr	r3, [pc, #420]	@ (8002228 <HAL_RCC_ClockConfig+0x278>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	2380      	movs	r3, #128	@ 0x80
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4013      	ands	r3, r2
 800208a:	d101      	bne.n	8002090 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0c2      	b.n	8002216 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002090:	4b65      	ldr	r3, [pc, #404]	@ (8002228 <HAL_RCC_ClockConfig+0x278>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	2203      	movs	r2, #3
 8002096:	4393      	bics	r3, r2
 8002098:	0019      	movs	r1, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	4b62      	ldr	r3, [pc, #392]	@ (8002228 <HAL_RCC_ClockConfig+0x278>)
 80020a0:	430a      	orrs	r2, r1
 80020a2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020a4:	f7fe ff80 	bl	8000fa8 <HAL_GetTick>
 80020a8:	0003      	movs	r3, r0
 80020aa:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d111      	bne.n	80020d8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020b4:	e009      	b.n	80020ca <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b6:	f7fe ff77 	bl	8000fa8 <HAL_GetTick>
 80020ba:	0002      	movs	r2, r0
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	4a58      	ldr	r2, [pc, #352]	@ (8002224 <HAL_RCC_ClockConfig+0x274>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e0a5      	b.n	8002216 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020ca:	4b57      	ldr	r3, [pc, #348]	@ (8002228 <HAL_RCC_ClockConfig+0x278>)
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	220c      	movs	r2, #12
 80020d0:	4013      	ands	r3, r2
 80020d2:	2b08      	cmp	r3, #8
 80020d4:	d1ef      	bne.n	80020b6 <HAL_RCC_ClockConfig+0x106>
 80020d6:	e03a      	b.n	800214e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d111      	bne.n	8002104 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020e0:	e009      	b.n	80020f6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e2:	f7fe ff61 	bl	8000fa8 <HAL_GetTick>
 80020e6:	0002      	movs	r2, r0
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	4a4d      	ldr	r2, [pc, #308]	@ (8002224 <HAL_RCC_ClockConfig+0x274>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e08f      	b.n	8002216 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020f6:	4b4c      	ldr	r3, [pc, #304]	@ (8002228 <HAL_RCC_ClockConfig+0x278>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	220c      	movs	r2, #12
 80020fc:	4013      	ands	r3, r2
 80020fe:	2b0c      	cmp	r3, #12
 8002100:	d1ef      	bne.n	80020e2 <HAL_RCC_ClockConfig+0x132>
 8002102:	e024      	b.n	800214e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d11b      	bne.n	8002144 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800210c:	e009      	b.n	8002122 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800210e:	f7fe ff4b 	bl	8000fa8 <HAL_GetTick>
 8002112:	0002      	movs	r2, r0
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	4a42      	ldr	r2, [pc, #264]	@ (8002224 <HAL_RCC_ClockConfig+0x274>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e079      	b.n	8002216 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002122:	4b41      	ldr	r3, [pc, #260]	@ (8002228 <HAL_RCC_ClockConfig+0x278>)
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	220c      	movs	r2, #12
 8002128:	4013      	ands	r3, r2
 800212a:	2b04      	cmp	r3, #4
 800212c:	d1ef      	bne.n	800210e <HAL_RCC_ClockConfig+0x15e>
 800212e:	e00e      	b.n	800214e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002130:	f7fe ff3a 	bl	8000fa8 <HAL_GetTick>
 8002134:	0002      	movs	r2, r0
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	4a3a      	ldr	r2, [pc, #232]	@ (8002224 <HAL_RCC_ClockConfig+0x274>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e068      	b.n	8002216 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002144:	4b38      	ldr	r3, [pc, #224]	@ (8002228 <HAL_RCC_ClockConfig+0x278>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	220c      	movs	r2, #12
 800214a:	4013      	ands	r3, r2
 800214c:	d1f0      	bne.n	8002130 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800214e:	4b34      	ldr	r3, [pc, #208]	@ (8002220 <HAL_RCC_ClockConfig+0x270>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2201      	movs	r2, #1
 8002154:	4013      	ands	r3, r2
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	429a      	cmp	r2, r3
 800215a:	d21e      	bcs.n	800219a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215c:	4b30      	ldr	r3, [pc, #192]	@ (8002220 <HAL_RCC_ClockConfig+0x270>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2201      	movs	r2, #1
 8002162:	4393      	bics	r3, r2
 8002164:	0019      	movs	r1, r3
 8002166:	4b2e      	ldr	r3, [pc, #184]	@ (8002220 <HAL_RCC_ClockConfig+0x270>)
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800216e:	f7fe ff1b 	bl	8000fa8 <HAL_GetTick>
 8002172:	0003      	movs	r3, r0
 8002174:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002176:	e009      	b.n	800218c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002178:	f7fe ff16 	bl	8000fa8 <HAL_GetTick>
 800217c:	0002      	movs	r2, r0
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	4a28      	ldr	r2, [pc, #160]	@ (8002224 <HAL_RCC_ClockConfig+0x274>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d901      	bls.n	800218c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e044      	b.n	8002216 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800218c:	4b24      	ldr	r3, [pc, #144]	@ (8002220 <HAL_RCC_ClockConfig+0x270>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2201      	movs	r2, #1
 8002192:	4013      	ands	r3, r2
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d1ee      	bne.n	8002178 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2204      	movs	r2, #4
 80021a0:	4013      	ands	r3, r2
 80021a2:	d009      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021a4:	4b20      	ldr	r3, [pc, #128]	@ (8002228 <HAL_RCC_ClockConfig+0x278>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4a20      	ldr	r2, [pc, #128]	@ (800222c <HAL_RCC_ClockConfig+0x27c>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	0019      	movs	r1, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002228 <HAL_RCC_ClockConfig+0x278>)
 80021b4:	430a      	orrs	r2, r1
 80021b6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2208      	movs	r2, #8
 80021be:	4013      	ands	r3, r2
 80021c0:	d00a      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021c2:	4b19      	ldr	r3, [pc, #100]	@ (8002228 <HAL_RCC_ClockConfig+0x278>)
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002230 <HAL_RCC_ClockConfig+0x280>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	0019      	movs	r1, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	00da      	lsls	r2, r3, #3
 80021d2:	4b15      	ldr	r3, [pc, #84]	@ (8002228 <HAL_RCC_ClockConfig+0x278>)
 80021d4:	430a      	orrs	r2, r1
 80021d6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021d8:	f000 f832 	bl	8002240 <HAL_RCC_GetSysClockFreq>
 80021dc:	0001      	movs	r1, r0
 80021de:	4b12      	ldr	r3, [pc, #72]	@ (8002228 <HAL_RCC_ClockConfig+0x278>)
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	091b      	lsrs	r3, r3, #4
 80021e4:	220f      	movs	r2, #15
 80021e6:	4013      	ands	r3, r2
 80021e8:	4a12      	ldr	r2, [pc, #72]	@ (8002234 <HAL_RCC_ClockConfig+0x284>)
 80021ea:	5cd3      	ldrb	r3, [r2, r3]
 80021ec:	000a      	movs	r2, r1
 80021ee:	40da      	lsrs	r2, r3
 80021f0:	4b11      	ldr	r3, [pc, #68]	@ (8002238 <HAL_RCC_ClockConfig+0x288>)
 80021f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021f4:	4b11      	ldr	r3, [pc, #68]	@ (800223c <HAL_RCC_ClockConfig+0x28c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	250b      	movs	r5, #11
 80021fa:	197c      	adds	r4, r7, r5
 80021fc:	0018      	movs	r0, r3
 80021fe:	f7fe fe8d 	bl	8000f1c <HAL_InitTick>
 8002202:	0003      	movs	r3, r0
 8002204:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002206:	197b      	adds	r3, r7, r5
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d002      	beq.n	8002214 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800220e:	197b      	adds	r3, r7, r5
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	e000      	b.n	8002216 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	0018      	movs	r0, r3
 8002218:	46bd      	mov	sp, r7
 800221a:	b004      	add	sp, #16
 800221c:	bdb0      	pop	{r4, r5, r7, pc}
 800221e:	46c0      	nop			@ (mov r8, r8)
 8002220:	40022000 	.word	0x40022000
 8002224:	00001388 	.word	0x00001388
 8002228:	40021000 	.word	0x40021000
 800222c:	fffff8ff 	.word	0xfffff8ff
 8002230:	ffffc7ff 	.word	0xffffc7ff
 8002234:	080044ec 	.word	0x080044ec
 8002238:	20000000 	.word	0x20000000
 800223c:	20000004 	.word	0x20000004

08002240 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002246:	4b3c      	ldr	r3, [pc, #240]	@ (8002338 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	220c      	movs	r2, #12
 8002250:	4013      	ands	r3, r2
 8002252:	2b0c      	cmp	r3, #12
 8002254:	d013      	beq.n	800227e <HAL_RCC_GetSysClockFreq+0x3e>
 8002256:	d85c      	bhi.n	8002312 <HAL_RCC_GetSysClockFreq+0xd2>
 8002258:	2b04      	cmp	r3, #4
 800225a:	d002      	beq.n	8002262 <HAL_RCC_GetSysClockFreq+0x22>
 800225c:	2b08      	cmp	r3, #8
 800225e:	d00b      	beq.n	8002278 <HAL_RCC_GetSysClockFreq+0x38>
 8002260:	e057      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002262:	4b35      	ldr	r3, [pc, #212]	@ (8002338 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2210      	movs	r2, #16
 8002268:	4013      	ands	r3, r2
 800226a:	d002      	beq.n	8002272 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800226c:	4b33      	ldr	r3, [pc, #204]	@ (800233c <HAL_RCC_GetSysClockFreq+0xfc>)
 800226e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002270:	e05d      	b.n	800232e <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8002272:	4b33      	ldr	r3, [pc, #204]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x100>)
 8002274:	613b      	str	r3, [r7, #16]
      break;
 8002276:	e05a      	b.n	800232e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002278:	4b32      	ldr	r3, [pc, #200]	@ (8002344 <HAL_RCC_GetSysClockFreq+0x104>)
 800227a:	613b      	str	r3, [r7, #16]
      break;
 800227c:	e057      	b.n	800232e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	0c9b      	lsrs	r3, r3, #18
 8002282:	220f      	movs	r2, #15
 8002284:	4013      	ands	r3, r2
 8002286:	4a30      	ldr	r2, [pc, #192]	@ (8002348 <HAL_RCC_GetSysClockFreq+0x108>)
 8002288:	5cd3      	ldrb	r3, [r2, r3]
 800228a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	0d9b      	lsrs	r3, r3, #22
 8002290:	2203      	movs	r2, #3
 8002292:	4013      	ands	r3, r2
 8002294:	3301      	adds	r3, #1
 8002296:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002298:	4b27      	ldr	r3, [pc, #156]	@ (8002338 <HAL_RCC_GetSysClockFreq+0xf8>)
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	2380      	movs	r3, #128	@ 0x80
 800229e:	025b      	lsls	r3, r3, #9
 80022a0:	4013      	ands	r3, r2
 80022a2:	d00f      	beq.n	80022c4 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	000a      	movs	r2, r1
 80022a8:	0152      	lsls	r2, r2, #5
 80022aa:	1a52      	subs	r2, r2, r1
 80022ac:	0193      	lsls	r3, r2, #6
 80022ae:	1a9b      	subs	r3, r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	185b      	adds	r3, r3, r1
 80022b4:	025b      	lsls	r3, r3, #9
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	0018      	movs	r0, r3
 80022ba:	f7fd ff37 	bl	800012c <__udivsi3>
 80022be:	0003      	movs	r3, r0
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	e023      	b.n	800230c <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80022c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002338 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2210      	movs	r2, #16
 80022ca:	4013      	ands	r3, r2
 80022cc:	d00f      	beq.n	80022ee <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 80022ce:	68b9      	ldr	r1, [r7, #8]
 80022d0:	000a      	movs	r2, r1
 80022d2:	0152      	lsls	r2, r2, #5
 80022d4:	1a52      	subs	r2, r2, r1
 80022d6:	0193      	lsls	r3, r2, #6
 80022d8:	1a9b      	subs	r3, r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	185b      	adds	r3, r3, r1
 80022de:	021b      	lsls	r3, r3, #8
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	0018      	movs	r0, r3
 80022e4:	f7fd ff22 	bl	800012c <__udivsi3>
 80022e8:	0003      	movs	r3, r0
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	e00e      	b.n	800230c <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80022ee:	68b9      	ldr	r1, [r7, #8]
 80022f0:	000a      	movs	r2, r1
 80022f2:	0152      	lsls	r2, r2, #5
 80022f4:	1a52      	subs	r2, r2, r1
 80022f6:	0193      	lsls	r3, r2, #6
 80022f8:	1a9b      	subs	r3, r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	185b      	adds	r3, r3, r1
 80022fe:	029b      	lsls	r3, r3, #10
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	0018      	movs	r0, r3
 8002304:	f7fd ff12 	bl	800012c <__udivsi3>
 8002308:	0003      	movs	r3, r0
 800230a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	613b      	str	r3, [r7, #16]
      break;
 8002310:	e00d      	b.n	800232e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002312:	4b09      	ldr	r3, [pc, #36]	@ (8002338 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	0b5b      	lsrs	r3, r3, #13
 8002318:	2207      	movs	r2, #7
 800231a:	4013      	ands	r3, r2
 800231c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	3301      	adds	r3, #1
 8002322:	2280      	movs	r2, #128	@ 0x80
 8002324:	0212      	lsls	r2, r2, #8
 8002326:	409a      	lsls	r2, r3
 8002328:	0013      	movs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
      break;
 800232c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800232e:	693b      	ldr	r3, [r7, #16]
}
 8002330:	0018      	movs	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	b006      	add	sp, #24
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40021000 	.word	0x40021000
 800233c:	003d0900 	.word	0x003d0900
 8002340:	00f42400 	.word	0x00f42400
 8002344:	007a1200 	.word	0x007a1200
 8002348:	08004504 	.word	0x08004504

0800234c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002350:	4b02      	ldr	r3, [pc, #8]	@ (800235c <HAL_RCC_GetHCLKFreq+0x10>)
 8002352:	681b      	ldr	r3, [r3, #0]
}
 8002354:	0018      	movs	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	46c0      	nop			@ (mov r8, r8)
 800235c:	20000000 	.word	0x20000000

08002360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002364:	f7ff fff2 	bl	800234c <HAL_RCC_GetHCLKFreq>
 8002368:	0001      	movs	r1, r0
 800236a:	4b06      	ldr	r3, [pc, #24]	@ (8002384 <HAL_RCC_GetPCLK1Freq+0x24>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	0a1b      	lsrs	r3, r3, #8
 8002370:	2207      	movs	r2, #7
 8002372:	4013      	ands	r3, r2
 8002374:	4a04      	ldr	r2, [pc, #16]	@ (8002388 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002376:	5cd3      	ldrb	r3, [r2, r3]
 8002378:	40d9      	lsrs	r1, r3
 800237a:	000b      	movs	r3, r1
}
 800237c:	0018      	movs	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	46c0      	nop			@ (mov r8, r8)
 8002384:	40021000 	.word	0x40021000
 8002388:	080044fc 	.word	0x080044fc

0800238c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002390:	f7ff ffdc 	bl	800234c <HAL_RCC_GetHCLKFreq>
 8002394:	0001      	movs	r1, r0
 8002396:	4b06      	ldr	r3, [pc, #24]	@ (80023b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	0adb      	lsrs	r3, r3, #11
 800239c:	2207      	movs	r2, #7
 800239e:	4013      	ands	r3, r2
 80023a0:	4a04      	ldr	r2, [pc, #16]	@ (80023b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023a2:	5cd3      	ldrb	r3, [r2, r3]
 80023a4:	40d9      	lsrs	r1, r3
 80023a6:	000b      	movs	r3, r1
}
 80023a8:	0018      	movs	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	46c0      	nop			@ (mov r8, r8)
 80023b0:	40021000 	.word	0x40021000
 80023b4:	080044fc 	.word	0x080044fc

080023b8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80023c0:	2017      	movs	r0, #23
 80023c2:	183b      	adds	r3, r7, r0
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2220      	movs	r2, #32
 80023ce:	4013      	ands	r3, r2
 80023d0:	d100      	bne.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80023d2:	e0c7      	b.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d4:	4b84      	ldr	r3, [pc, #528]	@ (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80023d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023d8:	2380      	movs	r3, #128	@ 0x80
 80023da:	055b      	lsls	r3, r3, #21
 80023dc:	4013      	ands	r3, r2
 80023de:	d109      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e0:	4b81      	ldr	r3, [pc, #516]	@ (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80023e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023e4:	4b80      	ldr	r3, [pc, #512]	@ (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80023e6:	2180      	movs	r1, #128	@ 0x80
 80023e8:	0549      	lsls	r1, r1, #21
 80023ea:	430a      	orrs	r2, r1
 80023ec:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80023ee:	183b      	adds	r3, r7, r0
 80023f0:	2201      	movs	r2, #1
 80023f2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f4:	4b7d      	ldr	r3, [pc, #500]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	2380      	movs	r3, #128	@ 0x80
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	4013      	ands	r3, r2
 80023fe:	d11a      	bne.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002400:	4b7a      	ldr	r3, [pc, #488]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4b79      	ldr	r3, [pc, #484]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002406:	2180      	movs	r1, #128	@ 0x80
 8002408:	0049      	lsls	r1, r1, #1
 800240a:	430a      	orrs	r2, r1
 800240c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800240e:	f7fe fdcb 	bl	8000fa8 <HAL_GetTick>
 8002412:	0003      	movs	r3, r0
 8002414:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002416:	e008      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002418:	f7fe fdc6 	bl	8000fa8 <HAL_GetTick>
 800241c:	0002      	movs	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b64      	cmp	r3, #100	@ 0x64
 8002424:	d901      	bls.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e0d9      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242a:	4b70      	ldr	r3, [pc, #448]	@ (80025ec <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	2380      	movs	r3, #128	@ 0x80
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	4013      	ands	r3, r2
 8002434:	d0f0      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002436:	4b6c      	ldr	r3, [pc, #432]	@ (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	23c0      	movs	r3, #192	@ 0xc0
 800243c:	039b      	lsls	r3, r3, #14
 800243e:	4013      	ands	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	23c0      	movs	r3, #192	@ 0xc0
 8002448:	039b      	lsls	r3, r3, #14
 800244a:	4013      	ands	r3, r2
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	429a      	cmp	r2, r3
 8002450:	d013      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	23c0      	movs	r3, #192	@ 0xc0
 8002458:	029b      	lsls	r3, r3, #10
 800245a:	401a      	ands	r2, r3
 800245c:	23c0      	movs	r3, #192	@ 0xc0
 800245e:	029b      	lsls	r3, r3, #10
 8002460:	429a      	cmp	r2, r3
 8002462:	d10a      	bne.n	800247a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002464:	4b60      	ldr	r3, [pc, #384]	@ (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	2380      	movs	r3, #128	@ 0x80
 800246a:	029b      	lsls	r3, r3, #10
 800246c:	401a      	ands	r2, r3
 800246e:	2380      	movs	r3, #128	@ 0x80
 8002470:	029b      	lsls	r3, r3, #10
 8002472:	429a      	cmp	r2, r3
 8002474:	d101      	bne.n	800247a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e0b1      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800247a:	4b5b      	ldr	r3, [pc, #364]	@ (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800247c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800247e:	23c0      	movs	r3, #192	@ 0xc0
 8002480:	029b      	lsls	r3, r3, #10
 8002482:	4013      	ands	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d03b      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	23c0      	movs	r3, #192	@ 0xc0
 8002492:	029b      	lsls	r3, r3, #10
 8002494:	4013      	ands	r3, r2
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	429a      	cmp	r2, r3
 800249a:	d033      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2220      	movs	r2, #32
 80024a2:	4013      	ands	r3, r2
 80024a4:	d02e      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80024a6:	4b50      	ldr	r3, [pc, #320]	@ (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024aa:	4a51      	ldr	r2, [pc, #324]	@ (80025f0 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024b0:	4b4d      	ldr	r3, [pc, #308]	@ (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80024b4:	4b4c      	ldr	r3, [pc, #304]	@ (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024b6:	2180      	movs	r1, #128	@ 0x80
 80024b8:	0309      	lsls	r1, r1, #12
 80024ba:	430a      	orrs	r2, r1
 80024bc:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024be:	4b4a      	ldr	r3, [pc, #296]	@ (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80024c2:	4b49      	ldr	r3, [pc, #292]	@ (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024c4:	494b      	ldr	r1, [pc, #300]	@ (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80024c6:	400a      	ands	r2, r1
 80024c8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80024ca:	4b47      	ldr	r3, [pc, #284]	@ (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	2380      	movs	r3, #128	@ 0x80
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	4013      	ands	r3, r2
 80024d8:	d014      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024da:	f7fe fd65 	bl	8000fa8 <HAL_GetTick>
 80024de:	0003      	movs	r3, r0
 80024e0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024e2:	e009      	b.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e4:	f7fe fd60 	bl	8000fa8 <HAL_GetTick>
 80024e8:	0002      	movs	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	4a42      	ldr	r2, [pc, #264]	@ (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e072      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024f8:	4b3b      	ldr	r3, [pc, #236]	@ (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80024fc:	2380      	movs	r3, #128	@ 0x80
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4013      	ands	r3, r2
 8002502:	d0ef      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2220      	movs	r2, #32
 800250a:	4013      	ands	r3, r2
 800250c:	d01f      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	23c0      	movs	r3, #192	@ 0xc0
 8002514:	029b      	lsls	r3, r3, #10
 8002516:	401a      	ands	r2, r3
 8002518:	23c0      	movs	r3, #192	@ 0xc0
 800251a:	029b      	lsls	r3, r3, #10
 800251c:	429a      	cmp	r2, r3
 800251e:	d10c      	bne.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002520:	4b31      	ldr	r3, [pc, #196]	@ (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a35      	ldr	r2, [pc, #212]	@ (80025fc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002526:	4013      	ands	r3, r2
 8002528:	0019      	movs	r1, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	23c0      	movs	r3, #192	@ 0xc0
 8002530:	039b      	lsls	r3, r3, #14
 8002532:	401a      	ands	r2, r3
 8002534:	4b2c      	ldr	r3, [pc, #176]	@ (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002536:	430a      	orrs	r2, r1
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	4b2b      	ldr	r3, [pc, #172]	@ (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800253c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	23c0      	movs	r3, #192	@ 0xc0
 8002544:	029b      	lsls	r3, r3, #10
 8002546:	401a      	ands	r2, r3
 8002548:	4b27      	ldr	r3, [pc, #156]	@ (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800254a:	430a      	orrs	r2, r1
 800254c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800254e:	2317      	movs	r3, #23
 8002550:	18fb      	adds	r3, r7, r3
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d105      	bne.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002558:	4b23      	ldr	r3, [pc, #140]	@ (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800255a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800255c:	4b22      	ldr	r3, [pc, #136]	@ (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800255e:	4928      	ldr	r1, [pc, #160]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002560:	400a      	ands	r2, r1
 8002562:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2202      	movs	r2, #2
 800256a:	4013      	ands	r3, r2
 800256c:	d009      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800256e:	4b1e      	ldr	r3, [pc, #120]	@ (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002572:	220c      	movs	r2, #12
 8002574:	4393      	bics	r3, r2
 8002576:	0019      	movs	r1, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	4b1a      	ldr	r3, [pc, #104]	@ (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800257e:	430a      	orrs	r2, r1
 8002580:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2204      	movs	r2, #4
 8002588:	4013      	ands	r3, r2
 800258a:	d009      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800258c:	4b16      	ldr	r3, [pc, #88]	@ (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800258e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002590:	4a1c      	ldr	r2, [pc, #112]	@ (8002604 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002592:	4013      	ands	r3, r2
 8002594:	0019      	movs	r1, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68da      	ldr	r2, [r3, #12]
 800259a:	4b13      	ldr	r3, [pc, #76]	@ (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800259c:	430a      	orrs	r2, r1
 800259e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2208      	movs	r2, #8
 80025a6:	4013      	ands	r3, r2
 80025a8:	d009      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025aa:	4b0f      	ldr	r3, [pc, #60]	@ (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ae:	4a16      	ldr	r2, [pc, #88]	@ (8002608 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80025b0:	4013      	ands	r3, r2
 80025b2:	0019      	movs	r1, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	4b0b      	ldr	r3, [pc, #44]	@ (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025ba:	430a      	orrs	r2, r1
 80025bc:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2280      	movs	r2, #128	@ 0x80
 80025c4:	4013      	ands	r3, r2
 80025c6:	d009      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80025c8:	4b07      	ldr	r3, [pc, #28]	@ (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025cc:	4a0f      	ldr	r2, [pc, #60]	@ (800260c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	0019      	movs	r1, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	695a      	ldr	r2, [r3, #20]
 80025d6:	4b04      	ldr	r3, [pc, #16]	@ (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80025d8:	430a      	orrs	r2, r1
 80025da:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	0018      	movs	r0, r3
 80025e0:	46bd      	mov	sp, r7
 80025e2:	b006      	add	sp, #24
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	46c0      	nop			@ (mov r8, r8)
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40007000 	.word	0x40007000
 80025f0:	fffcffff 	.word	0xfffcffff
 80025f4:	fff7ffff 	.word	0xfff7ffff
 80025f8:	00001388 	.word	0x00001388
 80025fc:	ffcfffff 	.word	0xffcfffff
 8002600:	efffffff 	.word	0xefffffff
 8002604:	fffff3ff 	.word	0xfffff3ff
 8002608:	ffffcfff 	.word	0xffffcfff
 800260c:	fff3ffff 	.word	0xfff3ffff

08002610 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e032      	b.n	8002688 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2239      	movs	r2, #57	@ 0x39
 8002626:	5c9b      	ldrb	r3, [r3, r2]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d107      	bne.n	800263e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2238      	movs	r2, #56	@ 0x38
 8002632:	2100      	movs	r1, #0
 8002634:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	0018      	movs	r0, r3
 800263a:	f7fe fb2d 	bl	8000c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2239      	movs	r2, #57	@ 0x39
 8002642:	2102      	movs	r1, #2
 8002644:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3304      	adds	r3, #4
 800264e:	0019      	movs	r1, r3
 8002650:	0010      	movs	r0, r2
 8002652:	f000 fa45 	bl	8002ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	223e      	movs	r2, #62	@ 0x3e
 800265a:	2101      	movs	r1, #1
 800265c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	223a      	movs	r2, #58	@ 0x3a
 8002662:	2101      	movs	r1, #1
 8002664:	5499      	strb	r1, [r3, r2]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	223b      	movs	r2, #59	@ 0x3b
 800266a:	2101      	movs	r1, #1
 800266c:	5499      	strb	r1, [r3, r2]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	223c      	movs	r2, #60	@ 0x3c
 8002672:	2101      	movs	r1, #1
 8002674:	5499      	strb	r1, [r3, r2]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	223d      	movs	r2, #61	@ 0x3d
 800267a:	2101      	movs	r1, #1
 800267c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2239      	movs	r2, #57	@ 0x39
 8002682:	2101      	movs	r1, #1
 8002684:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	0018      	movs	r0, r3
 800268a:	46bd      	mov	sp, r7
 800268c:	b002      	add	sp, #8
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e032      	b.n	8002708 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2239      	movs	r2, #57	@ 0x39
 80026a6:	5c9b      	ldrb	r3, [r3, r2]
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d107      	bne.n	80026be <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2238      	movs	r2, #56	@ 0x38
 80026b2:	2100      	movs	r1, #0
 80026b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	0018      	movs	r0, r3
 80026ba:	f000 f829 	bl	8002710 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2239      	movs	r2, #57	@ 0x39
 80026c2:	2102      	movs	r1, #2
 80026c4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3304      	adds	r3, #4
 80026ce:	0019      	movs	r1, r3
 80026d0:	0010      	movs	r0, r2
 80026d2:	f000 fa05 	bl	8002ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	223e      	movs	r2, #62	@ 0x3e
 80026da:	2101      	movs	r1, #1
 80026dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	223a      	movs	r2, #58	@ 0x3a
 80026e2:	2101      	movs	r1, #1
 80026e4:	5499      	strb	r1, [r3, r2]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	223b      	movs	r2, #59	@ 0x3b
 80026ea:	2101      	movs	r1, #1
 80026ec:	5499      	strb	r1, [r3, r2]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	223c      	movs	r2, #60	@ 0x3c
 80026f2:	2101      	movs	r1, #1
 80026f4:	5499      	strb	r1, [r3, r2]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	223d      	movs	r2, #61	@ 0x3d
 80026fa:	2101      	movs	r1, #1
 80026fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2239      	movs	r2, #57	@ 0x39
 8002702:	2101      	movs	r1, #1
 8002704:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	0018      	movs	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	b002      	add	sp, #8
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002718:	46c0      	nop			@ (mov r8, r8)
 800271a:	46bd      	mov	sp, r7
 800271c:	b002      	add	sp, #8
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800272c:	2317      	movs	r3, #23
 800272e:	18fb      	adds	r3, r7, r3
 8002730:	2200      	movs	r2, #0
 8002732:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2238      	movs	r2, #56	@ 0x38
 8002738:	5c9b      	ldrb	r3, [r3, r2]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <HAL_TIM_PWM_ConfigChannel+0x22>
 800273e:	2302      	movs	r3, #2
 8002740:	e0ad      	b.n	800289e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2238      	movs	r2, #56	@ 0x38
 8002746:	2101      	movs	r1, #1
 8002748:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b0c      	cmp	r3, #12
 800274e:	d100      	bne.n	8002752 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002750:	e076      	b.n	8002840 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b0c      	cmp	r3, #12
 8002756:	d900      	bls.n	800275a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002758:	e095      	b.n	8002886 <HAL_TIM_PWM_ConfigChannel+0x166>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b08      	cmp	r3, #8
 800275e:	d04e      	beq.n	80027fe <HAL_TIM_PWM_ConfigChannel+0xde>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b08      	cmp	r3, #8
 8002764:	d900      	bls.n	8002768 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002766:	e08e      	b.n	8002886 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_TIM_PWM_ConfigChannel+0x56>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b04      	cmp	r3, #4
 8002772:	d021      	beq.n	80027b8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002774:	e087      	b.n	8002886 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	0011      	movs	r1, r2
 800277e:	0018      	movs	r0, r3
 8002780:	f000 fa08 	bl	8002b94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	699a      	ldr	r2, [r3, #24]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2108      	movs	r1, #8
 8002790:	430a      	orrs	r2, r1
 8002792:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	699a      	ldr	r2, [r3, #24]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2104      	movs	r1, #4
 80027a0:	438a      	bics	r2, r1
 80027a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6999      	ldr	r1, [r3, #24]
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	619a      	str	r2, [r3, #24]
      break;
 80027b6:	e06b      	b.n	8002890 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	0011      	movs	r1, r2
 80027c0:	0018      	movs	r0, r3
 80027c2:	f000 fa23 	bl	8002c0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	699a      	ldr	r2, [r3, #24]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2180      	movs	r1, #128	@ 0x80
 80027d2:	0109      	lsls	r1, r1, #4
 80027d4:	430a      	orrs	r2, r1
 80027d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	699a      	ldr	r2, [r3, #24]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4931      	ldr	r1, [pc, #196]	@ (80028a8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80027e4:	400a      	ands	r2, r1
 80027e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6999      	ldr	r1, [r3, #24]
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	021a      	lsls	r2, r3, #8
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	619a      	str	r2, [r3, #24]
      break;
 80027fc:	e048      	b.n	8002890 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	0011      	movs	r1, r2
 8002806:	0018      	movs	r0, r3
 8002808:	f000 fa42 	bl	8002c90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	69da      	ldr	r2, [r3, #28]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2108      	movs	r1, #8
 8002818:	430a      	orrs	r2, r1
 800281a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	69da      	ldr	r2, [r3, #28]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2104      	movs	r1, #4
 8002828:	438a      	bics	r2, r1
 800282a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	69d9      	ldr	r1, [r3, #28]
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	61da      	str	r2, [r3, #28]
      break;
 800283e:	e027      	b.n	8002890 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	0011      	movs	r1, r2
 8002848:	0018      	movs	r0, r3
 800284a:	f000 fa61 	bl	8002d10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	69da      	ldr	r2, [r3, #28]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2180      	movs	r1, #128	@ 0x80
 800285a:	0109      	lsls	r1, r1, #4
 800285c:	430a      	orrs	r2, r1
 800285e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	69da      	ldr	r2, [r3, #28]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	490f      	ldr	r1, [pc, #60]	@ (80028a8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800286c:	400a      	ands	r2, r1
 800286e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	69d9      	ldr	r1, [r3, #28]
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	021a      	lsls	r2, r3, #8
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	430a      	orrs	r2, r1
 8002882:	61da      	str	r2, [r3, #28]
      break;
 8002884:	e004      	b.n	8002890 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002886:	2317      	movs	r3, #23
 8002888:	18fb      	adds	r3, r7, r3
 800288a:	2201      	movs	r2, #1
 800288c:	701a      	strb	r2, [r3, #0]
      break;
 800288e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2238      	movs	r2, #56	@ 0x38
 8002894:	2100      	movs	r1, #0
 8002896:	5499      	strb	r1, [r3, r2]

  return status;
 8002898:	2317      	movs	r3, #23
 800289a:	18fb      	adds	r3, r7, r3
 800289c:	781b      	ldrb	r3, [r3, #0]
}
 800289e:	0018      	movs	r0, r3
 80028a0:	46bd      	mov	sp, r7
 80028a2:	b006      	add	sp, #24
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	46c0      	nop			@ (mov r8, r8)
 80028a8:	fffffbff 	.word	0xfffffbff

080028ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028b6:	230f      	movs	r3, #15
 80028b8:	18fb      	adds	r3, r7, r3
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2238      	movs	r2, #56	@ 0x38
 80028c2:	5c9b      	ldrb	r3, [r3, r2]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d101      	bne.n	80028cc <HAL_TIM_ConfigClockSource+0x20>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e0bc      	b.n	8002a46 <HAL_TIM_ConfigClockSource+0x19a>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2238      	movs	r2, #56	@ 0x38
 80028d0:	2101      	movs	r1, #1
 80028d2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2239      	movs	r2, #57	@ 0x39
 80028d8:	2102      	movs	r1, #2
 80028da:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	2277      	movs	r2, #119	@ 0x77
 80028e8:	4393      	bics	r3, r2
 80028ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4a58      	ldr	r2, [pc, #352]	@ (8002a50 <HAL_TIM_ConfigClockSource+0x1a4>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2280      	movs	r2, #128	@ 0x80
 8002902:	0192      	lsls	r2, r2, #6
 8002904:	4293      	cmp	r3, r2
 8002906:	d040      	beq.n	800298a <HAL_TIM_ConfigClockSource+0xde>
 8002908:	2280      	movs	r2, #128	@ 0x80
 800290a:	0192      	lsls	r2, r2, #6
 800290c:	4293      	cmp	r3, r2
 800290e:	d900      	bls.n	8002912 <HAL_TIM_ConfigClockSource+0x66>
 8002910:	e088      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0x178>
 8002912:	2280      	movs	r2, #128	@ 0x80
 8002914:	0152      	lsls	r2, r2, #5
 8002916:	4293      	cmp	r3, r2
 8002918:	d100      	bne.n	800291c <HAL_TIM_ConfigClockSource+0x70>
 800291a:	e088      	b.n	8002a2e <HAL_TIM_ConfigClockSource+0x182>
 800291c:	2280      	movs	r2, #128	@ 0x80
 800291e:	0152      	lsls	r2, r2, #5
 8002920:	4293      	cmp	r3, r2
 8002922:	d900      	bls.n	8002926 <HAL_TIM_ConfigClockSource+0x7a>
 8002924:	e07e      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0x178>
 8002926:	2b70      	cmp	r3, #112	@ 0x70
 8002928:	d018      	beq.n	800295c <HAL_TIM_ConfigClockSource+0xb0>
 800292a:	d900      	bls.n	800292e <HAL_TIM_ConfigClockSource+0x82>
 800292c:	e07a      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0x178>
 800292e:	2b60      	cmp	r3, #96	@ 0x60
 8002930:	d04f      	beq.n	80029d2 <HAL_TIM_ConfigClockSource+0x126>
 8002932:	d900      	bls.n	8002936 <HAL_TIM_ConfigClockSource+0x8a>
 8002934:	e076      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0x178>
 8002936:	2b50      	cmp	r3, #80	@ 0x50
 8002938:	d03b      	beq.n	80029b2 <HAL_TIM_ConfigClockSource+0x106>
 800293a:	d900      	bls.n	800293e <HAL_TIM_ConfigClockSource+0x92>
 800293c:	e072      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0x178>
 800293e:	2b40      	cmp	r3, #64	@ 0x40
 8002940:	d057      	beq.n	80029f2 <HAL_TIM_ConfigClockSource+0x146>
 8002942:	d900      	bls.n	8002946 <HAL_TIM_ConfigClockSource+0x9a>
 8002944:	e06e      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0x178>
 8002946:	2b30      	cmp	r3, #48	@ 0x30
 8002948:	d063      	beq.n	8002a12 <HAL_TIM_ConfigClockSource+0x166>
 800294a:	d86b      	bhi.n	8002a24 <HAL_TIM_ConfigClockSource+0x178>
 800294c:	2b20      	cmp	r3, #32
 800294e:	d060      	beq.n	8002a12 <HAL_TIM_ConfigClockSource+0x166>
 8002950:	d868      	bhi.n	8002a24 <HAL_TIM_ConfigClockSource+0x178>
 8002952:	2b00      	cmp	r3, #0
 8002954:	d05d      	beq.n	8002a12 <HAL_TIM_ConfigClockSource+0x166>
 8002956:	2b10      	cmp	r3, #16
 8002958:	d05b      	beq.n	8002a12 <HAL_TIM_ConfigClockSource+0x166>
 800295a:	e063      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800296c:	f000 fb22 	bl	8002fb4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2277      	movs	r2, #119	@ 0x77
 800297c:	4313      	orrs	r3, r2
 800297e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	609a      	str	r2, [r3, #8]
      break;
 8002988:	e052      	b.n	8002a30 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800299a:	f000 fb0b 	bl	8002fb4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2180      	movs	r1, #128	@ 0x80
 80029aa:	01c9      	lsls	r1, r1, #7
 80029ac:	430a      	orrs	r2, r1
 80029ae:	609a      	str	r2, [r3, #8]
      break;
 80029b0:	e03e      	b.n	8002a30 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029be:	001a      	movs	r2, r3
 80029c0:	f000 fa7e 	bl	8002ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2150      	movs	r1, #80	@ 0x50
 80029ca:	0018      	movs	r0, r3
 80029cc:	f000 fad8 	bl	8002f80 <TIM_ITRx_SetConfig>
      break;
 80029d0:	e02e      	b.n	8002a30 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029de:	001a      	movs	r2, r3
 80029e0:	f000 fa9c 	bl	8002f1c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2160      	movs	r1, #96	@ 0x60
 80029ea:	0018      	movs	r0, r3
 80029ec:	f000 fac8 	bl	8002f80 <TIM_ITRx_SetConfig>
      break;
 80029f0:	e01e      	b.n	8002a30 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029fe:	001a      	movs	r2, r3
 8002a00:	f000 fa5e 	bl	8002ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2140      	movs	r1, #64	@ 0x40
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f000 fab8 	bl	8002f80 <TIM_ITRx_SetConfig>
      break;
 8002a10:	e00e      	b.n	8002a30 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	0019      	movs	r1, r3
 8002a1c:	0010      	movs	r0, r2
 8002a1e:	f000 faaf 	bl	8002f80 <TIM_ITRx_SetConfig>
      break;
 8002a22:	e005      	b.n	8002a30 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002a24:	230f      	movs	r3, #15
 8002a26:	18fb      	adds	r3, r7, r3
 8002a28:	2201      	movs	r2, #1
 8002a2a:	701a      	strb	r2, [r3, #0]
      break;
 8002a2c:	e000      	b.n	8002a30 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002a2e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2239      	movs	r2, #57	@ 0x39
 8002a34:	2101      	movs	r1, #1
 8002a36:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2238      	movs	r2, #56	@ 0x38
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	5499      	strb	r1, [r3, r2]

  return status;
 8002a40:	230f      	movs	r3, #15
 8002a42:	18fb      	adds	r3, r7, r3
 8002a44:	781b      	ldrb	r3, [r3, #0]
}
 8002a46:	0018      	movs	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b004      	add	sp, #16
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	46c0      	nop			@ (mov r8, r8)
 8002a50:	ffff00ff 	.word	0xffff00ff

08002a54 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2238      	movs	r2, #56	@ 0x38
 8002a62:	5c9b      	ldrb	r3, [r3, r2]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d101      	bne.n	8002a6c <HAL_TIM_SlaveConfigSynchro+0x18>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e032      	b.n	8002ad2 <HAL_TIM_SlaveConfigSynchro+0x7e>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2238      	movs	r2, #56	@ 0x38
 8002a70:	2101      	movs	r1, #1
 8002a72:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2239      	movs	r2, #57	@ 0x39
 8002a78:	2102      	movs	r1, #2
 8002a7a:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	0011      	movs	r1, r2
 8002a82:	0018      	movs	r0, r3
 8002a84:	f000 f98a 	bl	8002d9c <TIM_SlaveTimer_SetConfig>
 8002a88:	1e03      	subs	r3, r0, #0
 8002a8a:	d009      	beq.n	8002aa0 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2239      	movs	r2, #57	@ 0x39
 8002a90:	2101      	movs	r1, #1
 8002a92:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2238      	movs	r2, #56	@ 0x38
 8002a98:	2100      	movs	r1, #0
 8002a9a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e018      	b.n	8002ad2 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68da      	ldr	r2, [r3, #12]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2140      	movs	r1, #64	@ 0x40
 8002aac:	438a      	bics	r2, r1
 8002aae:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68da      	ldr	r2, [r3, #12]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4908      	ldr	r1, [pc, #32]	@ (8002adc <HAL_TIM_SlaveConfigSynchro+0x88>)
 8002abc:	400a      	ands	r2, r1
 8002abe:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2239      	movs	r2, #57	@ 0x39
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2238      	movs	r2, #56	@ 0x38
 8002acc:	2100      	movs	r1, #0
 8002ace:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	b002      	add	sp, #8
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	46c0      	nop			@ (mov r8, r8)
 8002adc:	ffffbfff 	.word	0xffffbfff

08002ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	2380      	movs	r3, #128	@ 0x80
 8002af4:	05db      	lsls	r3, r3, #23
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d007      	beq.n	8002b0a <TIM_Base_SetConfig+0x2a>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a22      	ldr	r2, [pc, #136]	@ (8002b88 <TIM_Base_SetConfig+0xa8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d003      	beq.n	8002b0a <TIM_Base_SetConfig+0x2a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a21      	ldr	r2, [pc, #132]	@ (8002b8c <TIM_Base_SetConfig+0xac>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d108      	bne.n	8002b1c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2270      	movs	r2, #112	@ 0x70
 8002b0e:	4393      	bics	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	2380      	movs	r3, #128	@ 0x80
 8002b20:	05db      	lsls	r3, r3, #23
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d007      	beq.n	8002b36 <TIM_Base_SetConfig+0x56>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a17      	ldr	r2, [pc, #92]	@ (8002b88 <TIM_Base_SetConfig+0xa8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d003      	beq.n	8002b36 <TIM_Base_SetConfig+0x56>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a16      	ldr	r2, [pc, #88]	@ (8002b8c <TIM_Base_SetConfig+0xac>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d108      	bne.n	8002b48 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4a15      	ldr	r2, [pc, #84]	@ (8002b90 <TIM_Base_SetConfig+0xb0>)
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2280      	movs	r2, #128	@ 0x80
 8002b4c:	4393      	bics	r3, r2
 8002b4e:	001a      	movs	r2, r3
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2204      	movs	r2, #4
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	601a      	str	r2, [r3, #0]
}
 8002b80:	46c0      	nop			@ (mov r8, r8)
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b004      	add	sp, #16
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40010800 	.word	0x40010800
 8002b8c:	40011400 	.word	0x40011400
 8002b90:	fffffcff 	.word	0xfffffcff

08002b94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	4393      	bics	r3, r2
 8002bac:	001a      	movs	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2270      	movs	r2, #112	@ 0x70
 8002bc2:	4393      	bics	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2203      	movs	r2, #3
 8002bca:	4393      	bics	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	4393      	bics	r3, r2
 8002bde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	621a      	str	r2, [r3, #32]
}
 8002c04:	46c0      	nop			@ (mov r8, r8)
 8002c06:	46bd      	mov	sp, r7
 8002c08:	b006      	add	sp, #24
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	2210      	movs	r2, #16
 8002c22:	4393      	bics	r3, r2
 8002c24:	001a      	movs	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	4a13      	ldr	r2, [pc, #76]	@ (8002c88 <TIM_OC2_SetConfig+0x7c>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	4a12      	ldr	r2, [pc, #72]	@ (8002c8c <TIM_OC2_SetConfig+0x80>)
 8002c42:	4013      	ands	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	021b      	lsls	r3, r3, #8
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	2220      	movs	r2, #32
 8002c56:	4393      	bics	r3, r2
 8002c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	621a      	str	r2, [r3, #32]
}
 8002c80:	46c0      	nop			@ (mov r8, r8)
 8002c82:	46bd      	mov	sp, r7
 8002c84:	b006      	add	sp, #24
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	ffff8fff 	.word	0xffff8fff
 8002c8c:	fffffcff 	.word	0xfffffcff

08002c90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	4a18      	ldr	r2, [pc, #96]	@ (8002d08 <TIM_OC3_SetConfig+0x78>)
 8002ca6:	401a      	ands	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2270      	movs	r2, #112	@ 0x70
 8002cbc:	4393      	bics	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	4393      	bics	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8002d0c <TIM_OC3_SetConfig+0x7c>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	021b      	lsls	r3, r3, #8
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	621a      	str	r2, [r3, #32]
}
 8002d00:	46c0      	nop			@ (mov r8, r8)
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b006      	add	sp, #24
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	fffffeff 	.word	0xfffffeff
 8002d0c:	fffffdff 	.word	0xfffffdff

08002d10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	4a19      	ldr	r2, [pc, #100]	@ (8002d8c <TIM_OC4_SetConfig+0x7c>)
 8002d26:	401a      	ands	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4a15      	ldr	r2, [pc, #84]	@ (8002d90 <TIM_OC4_SetConfig+0x80>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	4a14      	ldr	r2, [pc, #80]	@ (8002d94 <TIM_OC4_SetConfig+0x84>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	021b      	lsls	r3, r3, #8
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	4a10      	ldr	r2, [pc, #64]	@ (8002d98 <TIM_OC4_SetConfig+0x88>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	031b      	lsls	r3, r3, #12
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	621a      	str	r2, [r3, #32]
}
 8002d82:	46c0      	nop			@ (mov r8, r8)
 8002d84:	46bd      	mov	sp, r7
 8002d86:	b006      	add	sp, #24
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	46c0      	nop			@ (mov r8, r8)
 8002d8c:	ffffefff 	.word	0xffffefff
 8002d90:	ffff8fff 	.word	0xffff8fff
 8002d94:	fffffcff 	.word	0xfffffcff
 8002d98:	ffffdfff 	.word	0xffffdfff

08002d9c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002da6:	2317      	movs	r3, #23
 8002da8:	18fb      	adds	r3, r7, r3
 8002daa:	2200      	movs	r2, #0
 8002dac:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	2270      	movs	r2, #112	@ 0x70
 8002dba:	4393      	bics	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	2207      	movs	r2, #7
 8002dcc:	4393      	bics	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b70      	cmp	r3, #112	@ 0x70
 8002de8:	d015      	beq.n	8002e16 <TIM_SlaveTimer_SetConfig+0x7a>
 8002dea:	d900      	bls.n	8002dee <TIM_SlaveTimer_SetConfig+0x52>
 8002dec:	e05b      	b.n	8002ea6 <TIM_SlaveTimer_SetConfig+0x10a>
 8002dee:	2b60      	cmp	r3, #96	@ 0x60
 8002df0:	d04f      	beq.n	8002e92 <TIM_SlaveTimer_SetConfig+0xf6>
 8002df2:	d858      	bhi.n	8002ea6 <TIM_SlaveTimer_SetConfig+0x10a>
 8002df4:	2b50      	cmp	r3, #80	@ 0x50
 8002df6:	d042      	beq.n	8002e7e <TIM_SlaveTimer_SetConfig+0xe2>
 8002df8:	d855      	bhi.n	8002ea6 <TIM_SlaveTimer_SetConfig+0x10a>
 8002dfa:	2b40      	cmp	r3, #64	@ 0x40
 8002dfc:	d016      	beq.n	8002e2c <TIM_SlaveTimer_SetConfig+0x90>
 8002dfe:	d852      	bhi.n	8002ea6 <TIM_SlaveTimer_SetConfig+0x10a>
 8002e00:	2b30      	cmp	r3, #48	@ 0x30
 8002e02:	d055      	beq.n	8002eb0 <TIM_SlaveTimer_SetConfig+0x114>
 8002e04:	d84f      	bhi.n	8002ea6 <TIM_SlaveTimer_SetConfig+0x10a>
 8002e06:	2b20      	cmp	r3, #32
 8002e08:	d052      	beq.n	8002eb0 <TIM_SlaveTimer_SetConfig+0x114>
 8002e0a:	d84c      	bhi.n	8002ea6 <TIM_SlaveTimer_SetConfig+0x10a>
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d04f      	beq.n	8002eb0 <TIM_SlaveTimer_SetConfig+0x114>
 8002e10:	2b10      	cmp	r3, #16
 8002e12:	d04d      	beq.n	8002eb0 <TIM_SlaveTimer_SetConfig+0x114>
 8002e14:	e047      	b.n	8002ea6 <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8002e26:	f000 f8c5 	bl	8002fb4 <TIM_ETR_SetConfig>
      break;
 8002e2a:	e042      	b.n	8002eb2 <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b05      	cmp	r3, #5
 8002e32:	d101      	bne.n	8002e38 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e03f      	b.n	8002eb8 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6a1a      	ldr	r2, [r3, #32]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	438a      	bics	r2, r1
 8002e4e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	22f0      	movs	r2, #240	@ 0xf0
 8002e5c:	4393      	bics	r3, r2
 8002e5e:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	621a      	str	r2, [r3, #32]
      break;
 8002e7c:	e019      	b.n	8002eb2 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e8a:	001a      	movs	r2, r3
 8002e8c:	f000 f818 	bl	8002ec0 <TIM_TI1_ConfigInputStage>
      break;
 8002e90:	e00f      	b.n	8002eb2 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e9e:	001a      	movs	r2, r3
 8002ea0:	f000 f83c 	bl	8002f1c <TIM_TI2_ConfigInputStage>
      break;
 8002ea4:	e005      	b.n	8002eb2 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8002ea6:	2317      	movs	r3, #23
 8002ea8:	18fb      	adds	r3, r7, r3
 8002eaa:	2201      	movs	r2, #1
 8002eac:	701a      	strb	r2, [r3, #0]
      break;
 8002eae:	e000      	b.n	8002eb2 <TIM_SlaveTimer_SetConfig+0x116>
      break;
 8002eb0:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 8002eb2:	2317      	movs	r3, #23
 8002eb4:	18fb      	adds	r3, r7, r3
 8002eb6:	781b      	ldrb	r3, [r3, #0]
}
 8002eb8:	0018      	movs	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	b006      	add	sp, #24
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	4393      	bics	r3, r2
 8002eda:	001a      	movs	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	22f0      	movs	r2, #240	@ 0xf0
 8002eea:	4393      	bics	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	220a      	movs	r2, #10
 8002efc:	4393      	bics	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	621a      	str	r2, [r3, #32]
}
 8002f14:	46c0      	nop			@ (mov r8, r8)
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b006      	add	sp, #24
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	2210      	movs	r2, #16
 8002f34:	4393      	bics	r3, r2
 8002f36:	001a      	movs	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	4a0d      	ldr	r2, [pc, #52]	@ (8002f7c <TIM_TI2_ConfigInputStage+0x60>)
 8002f46:	4013      	ands	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	031b      	lsls	r3, r3, #12
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	22a0      	movs	r2, #160	@ 0xa0
 8002f58:	4393      	bics	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	621a      	str	r2, [r3, #32]
}
 8002f72:	46c0      	nop			@ (mov r8, r8)
 8002f74:	46bd      	mov	sp, r7
 8002f76:	b006      	add	sp, #24
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	46c0      	nop			@ (mov r8, r8)
 8002f7c:	ffff0fff 	.word	0xffff0fff

08002f80 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2270      	movs	r2, #112	@ 0x70
 8002f94:	4393      	bics	r3, r2
 8002f96:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	2207      	movs	r2, #7
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	609a      	str	r2, [r3, #8]
}
 8002faa:	46c0      	nop			@ (mov r8, r8)
 8002fac:	46bd      	mov	sp, r7
 8002fae:	b004      	add	sp, #16
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
 8002fc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	4a09      	ldr	r2, [pc, #36]	@ (8002ff0 <TIM_ETR_SetConfig+0x3c>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	021a      	lsls	r2, r3, #8
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	609a      	str	r2, [r3, #8]
}
 8002fe8:	46c0      	nop			@ (mov r8, r8)
 8002fea:	46bd      	mov	sp, r7
 8002fec:	b006      	add	sp, #24
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	ffff00ff 	.word	0xffff00ff

08002ff4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2238      	movs	r2, #56	@ 0x38
 8003002:	5c9b      	ldrb	r3, [r3, r2]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003008:	2302      	movs	r3, #2
 800300a:	e042      	b.n	8003092 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2238      	movs	r2, #56	@ 0x38
 8003010:	2101      	movs	r1, #1
 8003012:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2239      	movs	r2, #57	@ 0x39
 8003018:	2102      	movs	r1, #2
 800301a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2270      	movs	r2, #112	@ 0x70
 8003030:	4393      	bics	r3, r2
 8003032:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	4313      	orrs	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	2380      	movs	r3, #128	@ 0x80
 800304c:	05db      	lsls	r3, r3, #23
 800304e:	429a      	cmp	r2, r3
 8003050:	d009      	beq.n	8003066 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a11      	ldr	r2, [pc, #68]	@ (800309c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d004      	beq.n	8003066 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a0f      	ldr	r2, [pc, #60]	@ (80030a0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d10c      	bne.n	8003080 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2280      	movs	r2, #128	@ 0x80
 800306a:	4393      	bics	r3, r2
 800306c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	4313      	orrs	r3, r2
 8003076:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2239      	movs	r2, #57	@ 0x39
 8003084:	2101      	movs	r1, #1
 8003086:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2238      	movs	r2, #56	@ 0x38
 800308c:	2100      	movs	r1, #0
 800308e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	0018      	movs	r0, r3
 8003094:	46bd      	mov	sp, r7
 8003096:	b004      	add	sp, #16
 8003098:	bd80      	pop	{r7, pc}
 800309a:	46c0      	nop			@ (mov r8, r8)
 800309c:	40010800 	.word	0x40010800
 80030a0:	40011400 	.word	0x40011400

080030a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e044      	b.n	8003140 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d107      	bne.n	80030ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2278      	movs	r2, #120	@ 0x78
 80030c2:	2100      	movs	r1, #0
 80030c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	0018      	movs	r0, r3
 80030ca:	f7fd fda1 	bl	8000c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2224      	movs	r2, #36	@ 0x24
 80030d2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2101      	movs	r1, #1
 80030e0:	438a      	bics	r2, r1
 80030e2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	0018      	movs	r0, r3
 80030f0:	f000 fb16 	bl	8003720 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	0018      	movs	r0, r3
 80030f8:	f000 f8c8 	bl	800328c <UART_SetConfig>
 80030fc:	0003      	movs	r3, r0
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e01c      	b.n	8003140 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	490d      	ldr	r1, [pc, #52]	@ (8003148 <HAL_UART_Init+0xa4>)
 8003112:	400a      	ands	r2, r1
 8003114:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	212a      	movs	r1, #42	@ 0x2a
 8003122:	438a      	bics	r2, r1
 8003124:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2101      	movs	r1, #1
 8003132:	430a      	orrs	r2, r1
 8003134:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	0018      	movs	r0, r3
 800313a:	f000 fba5 	bl	8003888 <UART_CheckIdleState>
 800313e:	0003      	movs	r3, r0
}
 8003140:	0018      	movs	r0, r3
 8003142:	46bd      	mov	sp, r7
 8003144:	b002      	add	sp, #8
 8003146:	bd80      	pop	{r7, pc}
 8003148:	ffffb7ff 	.word	0xffffb7ff

0800314c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b08a      	sub	sp, #40	@ 0x28
 8003150:	af02      	add	r7, sp, #8
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	1dbb      	adds	r3, r7, #6
 800315a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003160:	2b20      	cmp	r3, #32
 8003162:	d000      	beq.n	8003166 <HAL_UART_Transmit+0x1a>
 8003164:	e08c      	b.n	8003280 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <HAL_UART_Transmit+0x28>
 800316c:	1dbb      	adds	r3, r7, #6
 800316e:	881b      	ldrh	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e084      	b.n	8003282 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	2380      	movs	r3, #128	@ 0x80
 800317e:	015b      	lsls	r3, r3, #5
 8003180:	429a      	cmp	r2, r3
 8003182:	d109      	bne.n	8003198 <HAL_UART_Transmit+0x4c>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d105      	bne.n	8003198 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2201      	movs	r2, #1
 8003190:	4013      	ands	r3, r2
 8003192:	d001      	beq.n	8003198 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e074      	b.n	8003282 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2284      	movs	r2, #132	@ 0x84
 800319c:	2100      	movs	r1, #0
 800319e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2221      	movs	r2, #33	@ 0x21
 80031a4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031a6:	f7fd feff 	bl	8000fa8 <HAL_GetTick>
 80031aa:	0003      	movs	r3, r0
 80031ac:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	1dba      	adds	r2, r7, #6
 80031b2:	2150      	movs	r1, #80	@ 0x50
 80031b4:	8812      	ldrh	r2, [r2, #0]
 80031b6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	1dba      	adds	r2, r7, #6
 80031bc:	2152      	movs	r1, #82	@ 0x52
 80031be:	8812      	ldrh	r2, [r2, #0]
 80031c0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	2380      	movs	r3, #128	@ 0x80
 80031c8:	015b      	lsls	r3, r3, #5
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d108      	bne.n	80031e0 <HAL_UART_Transmit+0x94>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d104      	bne.n	80031e0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80031d6:	2300      	movs	r3, #0
 80031d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	61bb      	str	r3, [r7, #24]
 80031de:	e003      	b.n	80031e8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031e8:	e02f      	b.n	800324a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	0013      	movs	r3, r2
 80031f4:	2200      	movs	r2, #0
 80031f6:	2180      	movs	r1, #128	@ 0x80
 80031f8:	f000 fbee 	bl	80039d8 <UART_WaitOnFlagUntilTimeout>
 80031fc:	1e03      	subs	r3, r0, #0
 80031fe:	d004      	beq.n	800320a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2220      	movs	r2, #32
 8003204:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e03b      	b.n	8003282 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10b      	bne.n	8003228 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	001a      	movs	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	05d2      	lsls	r2, r2, #23
 800321c:	0dd2      	lsrs	r2, r2, #23
 800321e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	3302      	adds	r3, #2
 8003224:	61bb      	str	r3, [r7, #24]
 8003226:	e007      	b.n	8003238 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	781a      	ldrb	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3301      	adds	r3, #1
 8003236:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2252      	movs	r2, #82	@ 0x52
 800323c:	5a9b      	ldrh	r3, [r3, r2]
 800323e:	b29b      	uxth	r3, r3
 8003240:	3b01      	subs	r3, #1
 8003242:	b299      	uxth	r1, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2252      	movs	r2, #82	@ 0x52
 8003248:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2252      	movs	r2, #82	@ 0x52
 800324e:	5a9b      	ldrh	r3, [r3, r2]
 8003250:	b29b      	uxth	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1c9      	bne.n	80031ea <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	0013      	movs	r3, r2
 8003260:	2200      	movs	r2, #0
 8003262:	2140      	movs	r1, #64	@ 0x40
 8003264:	f000 fbb8 	bl	80039d8 <UART_WaitOnFlagUntilTimeout>
 8003268:	1e03      	subs	r3, r0, #0
 800326a:	d004      	beq.n	8003276 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2220      	movs	r2, #32
 8003270:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e005      	b.n	8003282 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2220      	movs	r2, #32
 800327a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	e000      	b.n	8003282 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003280:	2302      	movs	r3, #2
  }
}
 8003282:	0018      	movs	r0, r3
 8003284:	46bd      	mov	sp, r7
 8003286:	b008      	add	sp, #32
 8003288:	bd80      	pop	{r7, pc}
	...

0800328c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800328c:	b5b0      	push	{r4, r5, r7, lr}
 800328e:	b08e      	sub	sp, #56	@ 0x38
 8003290:	af00      	add	r7, sp, #0
 8003292:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003294:	231a      	movs	r3, #26
 8003296:	2218      	movs	r2, #24
 8003298:	189b      	adds	r3, r3, r2
 800329a:	19db      	adds	r3, r3, r7
 800329c:	2200      	movs	r2, #0
 800329e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	431a      	orrs	r2, r3
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	431a      	orrs	r2, r3
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4ab4      	ldr	r2, [pc, #720]	@ (8003590 <UART_SetConfig+0x304>)
 80032c0:	4013      	ands	r3, r2
 80032c2:	0019      	movs	r1, r3
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80032ca:	430a      	orrs	r2, r1
 80032cc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	4aaf      	ldr	r2, [pc, #700]	@ (8003594 <UART_SetConfig+0x308>)
 80032d6:	4013      	ands	r3, r2
 80032d8:	0019      	movs	r1, r3
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4aa9      	ldr	r2, [pc, #676]	@ (8003598 <UART_SetConfig+0x30c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d004      	beq.n	8003300 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80032fc:	4313      	orrs	r3, r2
 80032fe:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	4aa5      	ldr	r2, [pc, #660]	@ (800359c <UART_SetConfig+0x310>)
 8003308:	4013      	ands	r3, r2
 800330a:	0019      	movs	r1, r3
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003312:	430a      	orrs	r2, r1
 8003314:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4aa1      	ldr	r2, [pc, #644]	@ (80035a0 <UART_SetConfig+0x314>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d131      	bne.n	8003384 <UART_SetConfig+0xf8>
 8003320:	4ba0      	ldr	r3, [pc, #640]	@ (80035a4 <UART_SetConfig+0x318>)
 8003322:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003324:	220c      	movs	r2, #12
 8003326:	4013      	ands	r3, r2
 8003328:	2b0c      	cmp	r3, #12
 800332a:	d01d      	beq.n	8003368 <UART_SetConfig+0xdc>
 800332c:	d823      	bhi.n	8003376 <UART_SetConfig+0xea>
 800332e:	2b08      	cmp	r3, #8
 8003330:	d00c      	beq.n	800334c <UART_SetConfig+0xc0>
 8003332:	d820      	bhi.n	8003376 <UART_SetConfig+0xea>
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <UART_SetConfig+0xb2>
 8003338:	2b04      	cmp	r3, #4
 800333a:	d00e      	beq.n	800335a <UART_SetConfig+0xce>
 800333c:	e01b      	b.n	8003376 <UART_SetConfig+0xea>
 800333e:	231b      	movs	r3, #27
 8003340:	2218      	movs	r2, #24
 8003342:	189b      	adds	r3, r3, r2
 8003344:	19db      	adds	r3, r3, r7
 8003346:	2200      	movs	r2, #0
 8003348:	701a      	strb	r2, [r3, #0]
 800334a:	e065      	b.n	8003418 <UART_SetConfig+0x18c>
 800334c:	231b      	movs	r3, #27
 800334e:	2218      	movs	r2, #24
 8003350:	189b      	adds	r3, r3, r2
 8003352:	19db      	adds	r3, r3, r7
 8003354:	2202      	movs	r2, #2
 8003356:	701a      	strb	r2, [r3, #0]
 8003358:	e05e      	b.n	8003418 <UART_SetConfig+0x18c>
 800335a:	231b      	movs	r3, #27
 800335c:	2218      	movs	r2, #24
 800335e:	189b      	adds	r3, r3, r2
 8003360:	19db      	adds	r3, r3, r7
 8003362:	2204      	movs	r2, #4
 8003364:	701a      	strb	r2, [r3, #0]
 8003366:	e057      	b.n	8003418 <UART_SetConfig+0x18c>
 8003368:	231b      	movs	r3, #27
 800336a:	2218      	movs	r2, #24
 800336c:	189b      	adds	r3, r3, r2
 800336e:	19db      	adds	r3, r3, r7
 8003370:	2208      	movs	r2, #8
 8003372:	701a      	strb	r2, [r3, #0]
 8003374:	e050      	b.n	8003418 <UART_SetConfig+0x18c>
 8003376:	231b      	movs	r3, #27
 8003378:	2218      	movs	r2, #24
 800337a:	189b      	adds	r3, r3, r2
 800337c:	19db      	adds	r3, r3, r7
 800337e:	2210      	movs	r2, #16
 8003380:	701a      	strb	r2, [r3, #0]
 8003382:	e049      	b.n	8003418 <UART_SetConfig+0x18c>
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a83      	ldr	r2, [pc, #524]	@ (8003598 <UART_SetConfig+0x30c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d13e      	bne.n	800340c <UART_SetConfig+0x180>
 800338e:	4b85      	ldr	r3, [pc, #532]	@ (80035a4 <UART_SetConfig+0x318>)
 8003390:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003392:	23c0      	movs	r3, #192	@ 0xc0
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	4013      	ands	r3, r2
 8003398:	22c0      	movs	r2, #192	@ 0xc0
 800339a:	0112      	lsls	r2, r2, #4
 800339c:	4293      	cmp	r3, r2
 800339e:	d027      	beq.n	80033f0 <UART_SetConfig+0x164>
 80033a0:	22c0      	movs	r2, #192	@ 0xc0
 80033a2:	0112      	lsls	r2, r2, #4
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d82a      	bhi.n	80033fe <UART_SetConfig+0x172>
 80033a8:	2280      	movs	r2, #128	@ 0x80
 80033aa:	0112      	lsls	r2, r2, #4
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d011      	beq.n	80033d4 <UART_SetConfig+0x148>
 80033b0:	2280      	movs	r2, #128	@ 0x80
 80033b2:	0112      	lsls	r2, r2, #4
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d822      	bhi.n	80033fe <UART_SetConfig+0x172>
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d004      	beq.n	80033c6 <UART_SetConfig+0x13a>
 80033bc:	2280      	movs	r2, #128	@ 0x80
 80033be:	00d2      	lsls	r2, r2, #3
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d00e      	beq.n	80033e2 <UART_SetConfig+0x156>
 80033c4:	e01b      	b.n	80033fe <UART_SetConfig+0x172>
 80033c6:	231b      	movs	r3, #27
 80033c8:	2218      	movs	r2, #24
 80033ca:	189b      	adds	r3, r3, r2
 80033cc:	19db      	adds	r3, r3, r7
 80033ce:	2200      	movs	r2, #0
 80033d0:	701a      	strb	r2, [r3, #0]
 80033d2:	e021      	b.n	8003418 <UART_SetConfig+0x18c>
 80033d4:	231b      	movs	r3, #27
 80033d6:	2218      	movs	r2, #24
 80033d8:	189b      	adds	r3, r3, r2
 80033da:	19db      	adds	r3, r3, r7
 80033dc:	2202      	movs	r2, #2
 80033de:	701a      	strb	r2, [r3, #0]
 80033e0:	e01a      	b.n	8003418 <UART_SetConfig+0x18c>
 80033e2:	231b      	movs	r3, #27
 80033e4:	2218      	movs	r2, #24
 80033e6:	189b      	adds	r3, r3, r2
 80033e8:	19db      	adds	r3, r3, r7
 80033ea:	2204      	movs	r2, #4
 80033ec:	701a      	strb	r2, [r3, #0]
 80033ee:	e013      	b.n	8003418 <UART_SetConfig+0x18c>
 80033f0:	231b      	movs	r3, #27
 80033f2:	2218      	movs	r2, #24
 80033f4:	189b      	adds	r3, r3, r2
 80033f6:	19db      	adds	r3, r3, r7
 80033f8:	2208      	movs	r2, #8
 80033fa:	701a      	strb	r2, [r3, #0]
 80033fc:	e00c      	b.n	8003418 <UART_SetConfig+0x18c>
 80033fe:	231b      	movs	r3, #27
 8003400:	2218      	movs	r2, #24
 8003402:	189b      	adds	r3, r3, r2
 8003404:	19db      	adds	r3, r3, r7
 8003406:	2210      	movs	r2, #16
 8003408:	701a      	strb	r2, [r3, #0]
 800340a:	e005      	b.n	8003418 <UART_SetConfig+0x18c>
 800340c:	231b      	movs	r3, #27
 800340e:	2218      	movs	r2, #24
 8003410:	189b      	adds	r3, r3, r2
 8003412:	19db      	adds	r3, r3, r7
 8003414:	2210      	movs	r2, #16
 8003416:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a5e      	ldr	r2, [pc, #376]	@ (8003598 <UART_SetConfig+0x30c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d000      	beq.n	8003424 <UART_SetConfig+0x198>
 8003422:	e084      	b.n	800352e <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003424:	231b      	movs	r3, #27
 8003426:	2218      	movs	r2, #24
 8003428:	189b      	adds	r3, r3, r2
 800342a:	19db      	adds	r3, r3, r7
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b08      	cmp	r3, #8
 8003430:	d01d      	beq.n	800346e <UART_SetConfig+0x1e2>
 8003432:	dc20      	bgt.n	8003476 <UART_SetConfig+0x1ea>
 8003434:	2b04      	cmp	r3, #4
 8003436:	d015      	beq.n	8003464 <UART_SetConfig+0x1d8>
 8003438:	dc1d      	bgt.n	8003476 <UART_SetConfig+0x1ea>
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <UART_SetConfig+0x1b8>
 800343e:	2b02      	cmp	r3, #2
 8003440:	d005      	beq.n	800344e <UART_SetConfig+0x1c2>
 8003442:	e018      	b.n	8003476 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003444:	f7fe ff8c 	bl	8002360 <HAL_RCC_GetPCLK1Freq>
 8003448:	0003      	movs	r3, r0
 800344a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800344c:	e01c      	b.n	8003488 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800344e:	4b55      	ldr	r3, [pc, #340]	@ (80035a4 <UART_SetConfig+0x318>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2210      	movs	r2, #16
 8003454:	4013      	ands	r3, r2
 8003456:	d002      	beq.n	800345e <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003458:	4b53      	ldr	r3, [pc, #332]	@ (80035a8 <UART_SetConfig+0x31c>)
 800345a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800345c:	e014      	b.n	8003488 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 800345e:	4b53      	ldr	r3, [pc, #332]	@ (80035ac <UART_SetConfig+0x320>)
 8003460:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003462:	e011      	b.n	8003488 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003464:	f7fe feec 	bl	8002240 <HAL_RCC_GetSysClockFreq>
 8003468:	0003      	movs	r3, r0
 800346a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800346c:	e00c      	b.n	8003488 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800346e:	2380      	movs	r3, #128	@ 0x80
 8003470:	021b      	lsls	r3, r3, #8
 8003472:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003474:	e008      	b.n	8003488 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8003476:	2300      	movs	r3, #0
 8003478:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800347a:	231a      	movs	r3, #26
 800347c:	2218      	movs	r2, #24
 800347e:	189b      	adds	r3, r3, r2
 8003480:	19db      	adds	r3, r3, r7
 8003482:	2201      	movs	r2, #1
 8003484:	701a      	strb	r2, [r3, #0]
        break;
 8003486:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800348a:	2b00      	cmp	r3, #0
 800348c:	d100      	bne.n	8003490 <UART_SetConfig+0x204>
 800348e:	e12f      	b.n	80036f0 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	0013      	movs	r3, r2
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	189b      	adds	r3, r3, r2
 800349a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800349c:	429a      	cmp	r2, r3
 800349e:	d305      	bcc.n	80034ac <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80034a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d906      	bls.n	80034ba <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 80034ac:	231a      	movs	r3, #26
 80034ae:	2218      	movs	r2, #24
 80034b0:	189b      	adds	r3, r3, r2
 80034b2:	19db      	adds	r3, r3, r7
 80034b4:	2201      	movs	r2, #1
 80034b6:	701a      	strb	r2, [r3, #0]
 80034b8:	e11a      	b.n	80036f0 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80034ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034bc:	613b      	str	r3, [r7, #16]
 80034be:	2300      	movs	r3, #0
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	6939      	ldr	r1, [r7, #16]
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	000b      	movs	r3, r1
 80034c8:	0e1b      	lsrs	r3, r3, #24
 80034ca:	0010      	movs	r0, r2
 80034cc:	0205      	lsls	r5, r0, #8
 80034ce:	431d      	orrs	r5, r3
 80034d0:	000b      	movs	r3, r1
 80034d2:	021c      	lsls	r4, r3, #8
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	085b      	lsrs	r3, r3, #1
 80034da:	60bb      	str	r3, [r7, #8]
 80034dc:	2300      	movs	r3, #0
 80034de:	60fb      	str	r3, [r7, #12]
 80034e0:	68b8      	ldr	r0, [r7, #8]
 80034e2:	68f9      	ldr	r1, [r7, #12]
 80034e4:	1900      	adds	r0, r0, r4
 80034e6:	4169      	adcs	r1, r5
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	603b      	str	r3, [r7, #0]
 80034ee:	2300      	movs	r3, #0
 80034f0:	607b      	str	r3, [r7, #4]
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f7fc fea5 	bl	8000244 <__aeabi_uldivmod>
 80034fa:	0002      	movs	r2, r0
 80034fc:	000b      	movs	r3, r1
 80034fe:	0013      	movs	r3, r2
 8003500:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003502:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003504:	23c0      	movs	r3, #192	@ 0xc0
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	429a      	cmp	r2, r3
 800350a:	d309      	bcc.n	8003520 <UART_SetConfig+0x294>
 800350c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800350e:	2380      	movs	r3, #128	@ 0x80
 8003510:	035b      	lsls	r3, r3, #13
 8003512:	429a      	cmp	r2, r3
 8003514:	d204      	bcs.n	8003520 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800351c:	60da      	str	r2, [r3, #12]
 800351e:	e0e7      	b.n	80036f0 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8003520:	231a      	movs	r3, #26
 8003522:	2218      	movs	r2, #24
 8003524:	189b      	adds	r3, r3, r2
 8003526:	19db      	adds	r3, r3, r7
 8003528:	2201      	movs	r2, #1
 800352a:	701a      	strb	r2, [r3, #0]
 800352c:	e0e0      	b.n	80036f0 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	69da      	ldr	r2, [r3, #28]
 8003532:	2380      	movs	r3, #128	@ 0x80
 8003534:	021b      	lsls	r3, r3, #8
 8003536:	429a      	cmp	r2, r3
 8003538:	d000      	beq.n	800353c <UART_SetConfig+0x2b0>
 800353a:	e082      	b.n	8003642 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 800353c:	231b      	movs	r3, #27
 800353e:	2218      	movs	r2, #24
 8003540:	189b      	adds	r3, r3, r2
 8003542:	19db      	adds	r3, r3, r7
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b08      	cmp	r3, #8
 8003548:	d834      	bhi.n	80035b4 <UART_SetConfig+0x328>
 800354a:	009a      	lsls	r2, r3, #2
 800354c:	4b18      	ldr	r3, [pc, #96]	@ (80035b0 <UART_SetConfig+0x324>)
 800354e:	18d3      	adds	r3, r2, r3
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003554:	f7fe ff04 	bl	8002360 <HAL_RCC_GetPCLK1Freq>
 8003558:	0003      	movs	r3, r0
 800355a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800355c:	e033      	b.n	80035c6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800355e:	f7fe ff15 	bl	800238c <HAL_RCC_GetPCLK2Freq>
 8003562:	0003      	movs	r3, r0
 8003564:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003566:	e02e      	b.n	80035c6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003568:	4b0e      	ldr	r3, [pc, #56]	@ (80035a4 <UART_SetConfig+0x318>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2210      	movs	r2, #16
 800356e:	4013      	ands	r3, r2
 8003570:	d002      	beq.n	8003578 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003572:	4b0d      	ldr	r3, [pc, #52]	@ (80035a8 <UART_SetConfig+0x31c>)
 8003574:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003576:	e026      	b.n	80035c6 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8003578:	4b0c      	ldr	r3, [pc, #48]	@ (80035ac <UART_SetConfig+0x320>)
 800357a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800357c:	e023      	b.n	80035c6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800357e:	f7fe fe5f 	bl	8002240 <HAL_RCC_GetSysClockFreq>
 8003582:	0003      	movs	r3, r0
 8003584:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003586:	e01e      	b.n	80035c6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003588:	2380      	movs	r3, #128	@ 0x80
 800358a:	021b      	lsls	r3, r3, #8
 800358c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800358e:	e01a      	b.n	80035c6 <UART_SetConfig+0x33a>
 8003590:	efff69f3 	.word	0xefff69f3
 8003594:	ffffcfff 	.word	0xffffcfff
 8003598:	40004800 	.word	0x40004800
 800359c:	fffff4ff 	.word	0xfffff4ff
 80035a0:	40004400 	.word	0x40004400
 80035a4:	40021000 	.word	0x40021000
 80035a8:	003d0900 	.word	0x003d0900
 80035ac:	00f42400 	.word	0x00f42400
 80035b0:	08004510 	.word	0x08004510
      default:
        pclk = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80035b8:	231a      	movs	r3, #26
 80035ba:	2218      	movs	r2, #24
 80035bc:	189b      	adds	r3, r3, r2
 80035be:	19db      	adds	r3, r3, r7
 80035c0:	2201      	movs	r2, #1
 80035c2:	701a      	strb	r2, [r3, #0]
        break;
 80035c4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d100      	bne.n	80035ce <UART_SetConfig+0x342>
 80035cc:	e090      	b.n	80036f0 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035d0:	005a      	lsls	r2, r3, #1
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	085b      	lsrs	r3, r3, #1
 80035d8:	18d2      	adds	r2, r2, r3
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	0019      	movs	r1, r3
 80035e0:	0010      	movs	r0, r2
 80035e2:	f7fc fda3 	bl	800012c <__udivsi3>
 80035e6:	0003      	movs	r3, r0
 80035e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ec:	2b0f      	cmp	r3, #15
 80035ee:	d921      	bls.n	8003634 <UART_SetConfig+0x3a8>
 80035f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035f2:	2380      	movs	r3, #128	@ 0x80
 80035f4:	025b      	lsls	r3, r3, #9
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d21c      	bcs.n	8003634 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	200e      	movs	r0, #14
 8003600:	2418      	movs	r4, #24
 8003602:	1903      	adds	r3, r0, r4
 8003604:	19db      	adds	r3, r3, r7
 8003606:	210f      	movs	r1, #15
 8003608:	438a      	bics	r2, r1
 800360a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800360c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800360e:	085b      	lsrs	r3, r3, #1
 8003610:	b29b      	uxth	r3, r3
 8003612:	2207      	movs	r2, #7
 8003614:	4013      	ands	r3, r2
 8003616:	b299      	uxth	r1, r3
 8003618:	1903      	adds	r3, r0, r4
 800361a:	19db      	adds	r3, r3, r7
 800361c:	1902      	adds	r2, r0, r4
 800361e:	19d2      	adds	r2, r2, r7
 8003620:	8812      	ldrh	r2, [r2, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	1902      	adds	r2, r0, r4
 800362c:	19d2      	adds	r2, r2, r7
 800362e:	8812      	ldrh	r2, [r2, #0]
 8003630:	60da      	str	r2, [r3, #12]
 8003632:	e05d      	b.n	80036f0 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003634:	231a      	movs	r3, #26
 8003636:	2218      	movs	r2, #24
 8003638:	189b      	adds	r3, r3, r2
 800363a:	19db      	adds	r3, r3, r7
 800363c:	2201      	movs	r2, #1
 800363e:	701a      	strb	r2, [r3, #0]
 8003640:	e056      	b.n	80036f0 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003642:	231b      	movs	r3, #27
 8003644:	2218      	movs	r2, #24
 8003646:	189b      	adds	r3, r3, r2
 8003648:	19db      	adds	r3, r3, r7
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b08      	cmp	r3, #8
 800364e:	d822      	bhi.n	8003696 <UART_SetConfig+0x40a>
 8003650:	009a      	lsls	r2, r3, #2
 8003652:	4b2f      	ldr	r3, [pc, #188]	@ (8003710 <UART_SetConfig+0x484>)
 8003654:	18d3      	adds	r3, r2, r3
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800365a:	f7fe fe81 	bl	8002360 <HAL_RCC_GetPCLK1Freq>
 800365e:	0003      	movs	r3, r0
 8003660:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003662:	e021      	b.n	80036a8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003664:	f7fe fe92 	bl	800238c <HAL_RCC_GetPCLK2Freq>
 8003668:	0003      	movs	r3, r0
 800366a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800366c:	e01c      	b.n	80036a8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800366e:	4b29      	ldr	r3, [pc, #164]	@ (8003714 <UART_SetConfig+0x488>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2210      	movs	r2, #16
 8003674:	4013      	ands	r3, r2
 8003676:	d002      	beq.n	800367e <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003678:	4b27      	ldr	r3, [pc, #156]	@ (8003718 <UART_SetConfig+0x48c>)
 800367a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800367c:	e014      	b.n	80036a8 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 800367e:	4b27      	ldr	r3, [pc, #156]	@ (800371c <UART_SetConfig+0x490>)
 8003680:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003682:	e011      	b.n	80036a8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003684:	f7fe fddc 	bl	8002240 <HAL_RCC_GetSysClockFreq>
 8003688:	0003      	movs	r3, r0
 800368a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800368c:	e00c      	b.n	80036a8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800368e:	2380      	movs	r3, #128	@ 0x80
 8003690:	021b      	lsls	r3, r3, #8
 8003692:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003694:	e008      	b.n	80036a8 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8003696:	2300      	movs	r3, #0
 8003698:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800369a:	231a      	movs	r3, #26
 800369c:	2218      	movs	r2, #24
 800369e:	189b      	adds	r3, r3, r2
 80036a0:	19db      	adds	r3, r3, r7
 80036a2:	2201      	movs	r2, #1
 80036a4:	701a      	strb	r2, [r3, #0]
        break;
 80036a6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80036a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d020      	beq.n	80036f0 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	085a      	lsrs	r2, r3, #1
 80036b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b6:	18d2      	adds	r2, r2, r3
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	0019      	movs	r1, r3
 80036be:	0010      	movs	r0, r2
 80036c0:	f7fc fd34 	bl	800012c <__udivsi3>
 80036c4:	0003      	movs	r3, r0
 80036c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ca:	2b0f      	cmp	r3, #15
 80036cc:	d90a      	bls.n	80036e4 <UART_SetConfig+0x458>
 80036ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80036d0:	2380      	movs	r3, #128	@ 0x80
 80036d2:	025b      	lsls	r3, r3, #9
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d205      	bcs.n	80036e4 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036da:	b29a      	uxth	r2, r3
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	60da      	str	r2, [r3, #12]
 80036e2:	e005      	b.n	80036f0 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80036e4:	231a      	movs	r3, #26
 80036e6:	2218      	movs	r2, #24
 80036e8:	189b      	adds	r3, r3, r2
 80036ea:	19db      	adds	r3, r3, r7
 80036ec:	2201      	movs	r2, #1
 80036ee:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	2200      	movs	r2, #0
 80036f4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	2200      	movs	r2, #0
 80036fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80036fc:	231a      	movs	r3, #26
 80036fe:	2218      	movs	r2, #24
 8003700:	189b      	adds	r3, r3, r2
 8003702:	19db      	adds	r3, r3, r7
 8003704:	781b      	ldrb	r3, [r3, #0]
}
 8003706:	0018      	movs	r0, r3
 8003708:	46bd      	mov	sp, r7
 800370a:	b00e      	add	sp, #56	@ 0x38
 800370c:	bdb0      	pop	{r4, r5, r7, pc}
 800370e:	46c0      	nop			@ (mov r8, r8)
 8003710:	08004534 	.word	0x08004534
 8003714:	40021000 	.word	0x40021000
 8003718:	003d0900 	.word	0x003d0900
 800371c:	00f42400 	.word	0x00f42400

08003720 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372c:	2208      	movs	r2, #8
 800372e:	4013      	ands	r3, r2
 8003730:	d00b      	beq.n	800374a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	4a4a      	ldr	r2, [pc, #296]	@ (8003864 <UART_AdvFeatureConfig+0x144>)
 800373a:	4013      	ands	r3, r2
 800373c:	0019      	movs	r1, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374e:	2201      	movs	r2, #1
 8003750:	4013      	ands	r3, r2
 8003752:	d00b      	beq.n	800376c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	4a43      	ldr	r2, [pc, #268]	@ (8003868 <UART_AdvFeatureConfig+0x148>)
 800375c:	4013      	ands	r3, r2
 800375e:	0019      	movs	r1, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003770:	2202      	movs	r2, #2
 8003772:	4013      	ands	r3, r2
 8003774:	d00b      	beq.n	800378e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	4a3b      	ldr	r2, [pc, #236]	@ (800386c <UART_AdvFeatureConfig+0x14c>)
 800377e:	4013      	ands	r3, r2
 8003780:	0019      	movs	r1, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003792:	2204      	movs	r2, #4
 8003794:	4013      	ands	r3, r2
 8003796:	d00b      	beq.n	80037b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	4a34      	ldr	r2, [pc, #208]	@ (8003870 <UART_AdvFeatureConfig+0x150>)
 80037a0:	4013      	ands	r3, r2
 80037a2:	0019      	movs	r1, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b4:	2210      	movs	r2, #16
 80037b6:	4013      	ands	r3, r2
 80037b8:	d00b      	beq.n	80037d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	4a2c      	ldr	r2, [pc, #176]	@ (8003874 <UART_AdvFeatureConfig+0x154>)
 80037c2:	4013      	ands	r3, r2
 80037c4:	0019      	movs	r1, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d6:	2220      	movs	r2, #32
 80037d8:	4013      	ands	r3, r2
 80037da:	d00b      	beq.n	80037f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	4a25      	ldr	r2, [pc, #148]	@ (8003878 <UART_AdvFeatureConfig+0x158>)
 80037e4:	4013      	ands	r3, r2
 80037e6:	0019      	movs	r1, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f8:	2240      	movs	r2, #64	@ 0x40
 80037fa:	4013      	ands	r3, r2
 80037fc:	d01d      	beq.n	800383a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	4a1d      	ldr	r2, [pc, #116]	@ (800387c <UART_AdvFeatureConfig+0x15c>)
 8003806:	4013      	ands	r3, r2
 8003808:	0019      	movs	r1, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800381a:	2380      	movs	r3, #128	@ 0x80
 800381c:	035b      	lsls	r3, r3, #13
 800381e:	429a      	cmp	r2, r3
 8003820:	d10b      	bne.n	800383a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	4a15      	ldr	r2, [pc, #84]	@ (8003880 <UART_AdvFeatureConfig+0x160>)
 800382a:	4013      	ands	r3, r2
 800382c:	0019      	movs	r1, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383e:	2280      	movs	r2, #128	@ 0x80
 8003840:	4013      	ands	r3, r2
 8003842:	d00b      	beq.n	800385c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	4a0e      	ldr	r2, [pc, #56]	@ (8003884 <UART_AdvFeatureConfig+0x164>)
 800384c:	4013      	ands	r3, r2
 800384e:	0019      	movs	r1, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	605a      	str	r2, [r3, #4]
  }
}
 800385c:	46c0      	nop			@ (mov r8, r8)
 800385e:	46bd      	mov	sp, r7
 8003860:	b002      	add	sp, #8
 8003862:	bd80      	pop	{r7, pc}
 8003864:	ffff7fff 	.word	0xffff7fff
 8003868:	fffdffff 	.word	0xfffdffff
 800386c:	fffeffff 	.word	0xfffeffff
 8003870:	fffbffff 	.word	0xfffbffff
 8003874:	ffffefff 	.word	0xffffefff
 8003878:	ffffdfff 	.word	0xffffdfff
 800387c:	ffefffff 	.word	0xffefffff
 8003880:	ff9fffff 	.word	0xff9fffff
 8003884:	fff7ffff 	.word	0xfff7ffff

08003888 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b092      	sub	sp, #72	@ 0x48
 800388c:	af02      	add	r7, sp, #8
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2284      	movs	r2, #132	@ 0x84
 8003894:	2100      	movs	r1, #0
 8003896:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003898:	f7fd fb86 	bl	8000fa8 <HAL_GetTick>
 800389c:	0003      	movs	r3, r0
 800389e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2208      	movs	r2, #8
 80038a8:	4013      	ands	r3, r2
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d12c      	bne.n	8003908 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038b0:	2280      	movs	r2, #128	@ 0x80
 80038b2:	0391      	lsls	r1, r2, #14
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	4a46      	ldr	r2, [pc, #280]	@ (80039d0 <UART_CheckIdleState+0x148>)
 80038b8:	9200      	str	r2, [sp, #0]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f000 f88c 	bl	80039d8 <UART_WaitOnFlagUntilTimeout>
 80038c0:	1e03      	subs	r3, r0, #0
 80038c2:	d021      	beq.n	8003908 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038c4:	f3ef 8310 	mrs	r3, PRIMASK
 80038c8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80038ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80038cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038ce:	2301      	movs	r3, #1
 80038d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d4:	f383 8810 	msr	PRIMASK, r3
}
 80038d8:	46c0      	nop			@ (mov r8, r8)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2180      	movs	r1, #128	@ 0x80
 80038e6:	438a      	bics	r2, r1
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f0:	f383 8810 	msr	PRIMASK, r3
}
 80038f4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2220      	movs	r2, #32
 80038fa:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2278      	movs	r2, #120	@ 0x78
 8003900:	2100      	movs	r1, #0
 8003902:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e05f      	b.n	80039c8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2204      	movs	r2, #4
 8003910:	4013      	ands	r3, r2
 8003912:	2b04      	cmp	r3, #4
 8003914:	d146      	bne.n	80039a4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003918:	2280      	movs	r2, #128	@ 0x80
 800391a:	03d1      	lsls	r1, r2, #15
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	4a2c      	ldr	r2, [pc, #176]	@ (80039d0 <UART_CheckIdleState+0x148>)
 8003920:	9200      	str	r2, [sp, #0]
 8003922:	2200      	movs	r2, #0
 8003924:	f000 f858 	bl	80039d8 <UART_WaitOnFlagUntilTimeout>
 8003928:	1e03      	subs	r3, r0, #0
 800392a:	d03b      	beq.n	80039a4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800392c:	f3ef 8310 	mrs	r3, PRIMASK
 8003930:	60fb      	str	r3, [r7, #12]
  return(result);
 8003932:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003934:	637b      	str	r3, [r7, #52]	@ 0x34
 8003936:	2301      	movs	r3, #1
 8003938:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	f383 8810 	msr	PRIMASK, r3
}
 8003940:	46c0      	nop			@ (mov r8, r8)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4921      	ldr	r1, [pc, #132]	@ (80039d4 <UART_CheckIdleState+0x14c>)
 800394e:	400a      	ands	r2, r1
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003954:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f383 8810 	msr	PRIMASK, r3
}
 800395c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800395e:	f3ef 8310 	mrs	r3, PRIMASK
 8003962:	61bb      	str	r3, [r7, #24]
  return(result);
 8003964:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003966:	633b      	str	r3, [r7, #48]	@ 0x30
 8003968:	2301      	movs	r3, #1
 800396a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f383 8810 	msr	PRIMASK, r3
}
 8003972:	46c0      	nop			@ (mov r8, r8)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689a      	ldr	r2, [r3, #8]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2101      	movs	r1, #1
 8003980:	438a      	bics	r2, r1
 8003982:	609a      	str	r2, [r3, #8]
 8003984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003986:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	f383 8810 	msr	PRIMASK, r3
}
 800398e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2280      	movs	r2, #128	@ 0x80
 8003994:	2120      	movs	r1, #32
 8003996:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2278      	movs	r2, #120	@ 0x78
 800399c:	2100      	movs	r1, #0
 800399e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e011      	b.n	80039c8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2220      	movs	r2, #32
 80039a8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2280      	movs	r2, #128	@ 0x80
 80039ae:	2120      	movs	r1, #32
 80039b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2278      	movs	r2, #120	@ 0x78
 80039c2:	2100      	movs	r1, #0
 80039c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	0018      	movs	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b010      	add	sp, #64	@ 0x40
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	01ffffff 	.word	0x01ffffff
 80039d4:	fffffedf 	.word	0xfffffedf

080039d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	603b      	str	r3, [r7, #0]
 80039e4:	1dfb      	adds	r3, r7, #7
 80039e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039e8:	e051      	b.n	8003a8e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	3301      	adds	r3, #1
 80039ee:	d04e      	beq.n	8003a8e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039f0:	f7fd fada 	bl	8000fa8 <HAL_GetTick>
 80039f4:	0002      	movs	r2, r0
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d302      	bcc.n	8003a06 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e051      	b.n	8003aae <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2204      	movs	r2, #4
 8003a12:	4013      	ands	r3, r2
 8003a14:	d03b      	beq.n	8003a8e <UART_WaitOnFlagUntilTimeout+0xb6>
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	2b80      	cmp	r3, #128	@ 0x80
 8003a1a:	d038      	beq.n	8003a8e <UART_WaitOnFlagUntilTimeout+0xb6>
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2b40      	cmp	r3, #64	@ 0x40
 8003a20:	d035      	beq.n	8003a8e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	2208      	movs	r2, #8
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d111      	bne.n	8003a54 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2208      	movs	r2, #8
 8003a36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	f000 f83c 	bl	8003ab8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2284      	movs	r2, #132	@ 0x84
 8003a44:	2108      	movs	r1, #8
 8003a46:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2278      	movs	r2, #120	@ 0x78
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e02c      	b.n	8003aae <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	69da      	ldr	r2, [r3, #28]
 8003a5a:	2380      	movs	r3, #128	@ 0x80
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	401a      	ands	r2, r3
 8003a60:	2380      	movs	r3, #128	@ 0x80
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d112      	bne.n	8003a8e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2280      	movs	r2, #128	@ 0x80
 8003a6e:	0112      	lsls	r2, r2, #4
 8003a70:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	0018      	movs	r0, r3
 8003a76:	f000 f81f 	bl	8003ab8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2284      	movs	r2, #132	@ 0x84
 8003a7e:	2120      	movs	r1, #32
 8003a80:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2278      	movs	r2, #120	@ 0x78
 8003a86:	2100      	movs	r1, #0
 8003a88:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e00f      	b.n	8003aae <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	68ba      	ldr	r2, [r7, #8]
 8003a96:	4013      	ands	r3, r2
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	425a      	negs	r2, r3
 8003a9e:	4153      	adcs	r3, r2
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	001a      	movs	r2, r3
 8003aa4:	1dfb      	adds	r3, r7, #7
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d09e      	beq.n	80039ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	0018      	movs	r0, r3
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	b004      	add	sp, #16
 8003ab4:	bd80      	pop	{r7, pc}
	...

08003ab8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b08e      	sub	sp, #56	@ 0x38
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ac4:	617b      	str	r3, [r7, #20]
  return(result);
 8003ac6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ac8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003aca:	2301      	movs	r3, #1
 8003acc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	f383 8810 	msr	PRIMASK, r3
}
 8003ad4:	46c0      	nop			@ (mov r8, r8)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4926      	ldr	r1, [pc, #152]	@ (8003b7c <UART_EndRxTransfer+0xc4>)
 8003ae2:	400a      	ands	r2, r1
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ae8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	f383 8810 	msr	PRIMASK, r3
}
 8003af0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003af2:	f3ef 8310 	mrs	r3, PRIMASK
 8003af6:	623b      	str	r3, [r7, #32]
  return(result);
 8003af8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afa:	633b      	str	r3, [r7, #48]	@ 0x30
 8003afc:	2301      	movs	r3, #1
 8003afe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b02:	f383 8810 	msr	PRIMASK, r3
}
 8003b06:	46c0      	nop			@ (mov r8, r8)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2101      	movs	r1, #1
 8003b14:	438a      	bics	r2, r1
 8003b16:	609a      	str	r2, [r3, #8]
 8003b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b1e:	f383 8810 	msr	PRIMASK, r3
}
 8003b22:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d118      	bne.n	8003b5e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b2c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b30:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b32:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b36:	2301      	movs	r3, #1
 8003b38:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f383 8810 	msr	PRIMASK, r3
}
 8003b40:	46c0      	nop			@ (mov r8, r8)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2110      	movs	r1, #16
 8003b4e:	438a      	bics	r2, r1
 8003b50:	601a      	str	r2, [r3, #0]
 8003b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f383 8810 	msr	PRIMASK, r3
}
 8003b5c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2280      	movs	r2, #128	@ 0x80
 8003b62:	2120      	movs	r1, #32
 8003b64:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003b72:	46c0      	nop			@ (mov r8, r8)
 8003b74:	46bd      	mov	sp, r7
 8003b76:	b00e      	add	sp, #56	@ 0x38
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	46c0      	nop			@ (mov r8, r8)
 8003b7c:	fffffedf 	.word	0xfffffedf

08003b80 <siprintf>:
 8003b80:	b40e      	push	{r1, r2, r3}
 8003b82:	b510      	push	{r4, lr}
 8003b84:	2400      	movs	r4, #0
 8003b86:	490c      	ldr	r1, [pc, #48]	@ (8003bb8 <siprintf+0x38>)
 8003b88:	b09d      	sub	sp, #116	@ 0x74
 8003b8a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003b8c:	9002      	str	r0, [sp, #8]
 8003b8e:	9006      	str	r0, [sp, #24]
 8003b90:	9107      	str	r1, [sp, #28]
 8003b92:	9104      	str	r1, [sp, #16]
 8003b94:	4809      	ldr	r0, [pc, #36]	@ (8003bbc <siprintf+0x3c>)
 8003b96:	490a      	ldr	r1, [pc, #40]	@ (8003bc0 <siprintf+0x40>)
 8003b98:	cb04      	ldmia	r3!, {r2}
 8003b9a:	9105      	str	r1, [sp, #20]
 8003b9c:	6800      	ldr	r0, [r0, #0]
 8003b9e:	a902      	add	r1, sp, #8
 8003ba0:	9301      	str	r3, [sp, #4]
 8003ba2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003ba4:	f000 f99e 	bl	8003ee4 <_svfiprintf_r>
 8003ba8:	9b02      	ldr	r3, [sp, #8]
 8003baa:	701c      	strb	r4, [r3, #0]
 8003bac:	b01d      	add	sp, #116	@ 0x74
 8003bae:	bc10      	pop	{r4}
 8003bb0:	bc08      	pop	{r3}
 8003bb2:	b003      	add	sp, #12
 8003bb4:	4718      	bx	r3
 8003bb6:	46c0      	nop			@ (mov r8, r8)
 8003bb8:	7fffffff 	.word	0x7fffffff
 8003bbc:	2000000c 	.word	0x2000000c
 8003bc0:	ffff0208 	.word	0xffff0208

08003bc4 <memset>:
 8003bc4:	0003      	movs	r3, r0
 8003bc6:	1882      	adds	r2, r0, r2
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d100      	bne.n	8003bce <memset+0xa>
 8003bcc:	4770      	bx	lr
 8003bce:	7019      	strb	r1, [r3, #0]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	e7f9      	b.n	8003bc8 <memset+0x4>

08003bd4 <__errno>:
 8003bd4:	4b01      	ldr	r3, [pc, #4]	@ (8003bdc <__errno+0x8>)
 8003bd6:	6818      	ldr	r0, [r3, #0]
 8003bd8:	4770      	bx	lr
 8003bda:	46c0      	nop			@ (mov r8, r8)
 8003bdc:	2000000c 	.word	0x2000000c

08003be0 <__libc_init_array>:
 8003be0:	b570      	push	{r4, r5, r6, lr}
 8003be2:	2600      	movs	r6, #0
 8003be4:	4c0c      	ldr	r4, [pc, #48]	@ (8003c18 <__libc_init_array+0x38>)
 8003be6:	4d0d      	ldr	r5, [pc, #52]	@ (8003c1c <__libc_init_array+0x3c>)
 8003be8:	1b64      	subs	r4, r4, r5
 8003bea:	10a4      	asrs	r4, r4, #2
 8003bec:	42a6      	cmp	r6, r4
 8003bee:	d109      	bne.n	8003c04 <__libc_init_array+0x24>
 8003bf0:	2600      	movs	r6, #0
 8003bf2:	f000 fc61 	bl	80044b8 <_init>
 8003bf6:	4c0a      	ldr	r4, [pc, #40]	@ (8003c20 <__libc_init_array+0x40>)
 8003bf8:	4d0a      	ldr	r5, [pc, #40]	@ (8003c24 <__libc_init_array+0x44>)
 8003bfa:	1b64      	subs	r4, r4, r5
 8003bfc:	10a4      	asrs	r4, r4, #2
 8003bfe:	42a6      	cmp	r6, r4
 8003c00:	d105      	bne.n	8003c0e <__libc_init_array+0x2e>
 8003c02:	bd70      	pop	{r4, r5, r6, pc}
 8003c04:	00b3      	lsls	r3, r6, #2
 8003c06:	58eb      	ldr	r3, [r5, r3]
 8003c08:	4798      	blx	r3
 8003c0a:	3601      	adds	r6, #1
 8003c0c:	e7ee      	b.n	8003bec <__libc_init_array+0xc>
 8003c0e:	00b3      	lsls	r3, r6, #2
 8003c10:	58eb      	ldr	r3, [r5, r3]
 8003c12:	4798      	blx	r3
 8003c14:	3601      	adds	r6, #1
 8003c16:	e7f2      	b.n	8003bfe <__libc_init_array+0x1e>
 8003c18:	08004594 	.word	0x08004594
 8003c1c:	08004594 	.word	0x08004594
 8003c20:	08004598 	.word	0x08004598
 8003c24:	08004594 	.word	0x08004594

08003c28 <__retarget_lock_acquire_recursive>:
 8003c28:	4770      	bx	lr

08003c2a <__retarget_lock_release_recursive>:
 8003c2a:	4770      	bx	lr

08003c2c <_free_r>:
 8003c2c:	b570      	push	{r4, r5, r6, lr}
 8003c2e:	0005      	movs	r5, r0
 8003c30:	1e0c      	subs	r4, r1, #0
 8003c32:	d010      	beq.n	8003c56 <_free_r+0x2a>
 8003c34:	3c04      	subs	r4, #4
 8003c36:	6823      	ldr	r3, [r4, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	da00      	bge.n	8003c3e <_free_r+0x12>
 8003c3c:	18e4      	adds	r4, r4, r3
 8003c3e:	0028      	movs	r0, r5
 8003c40:	f000 f8e0 	bl	8003e04 <__malloc_lock>
 8003c44:	4a1d      	ldr	r2, [pc, #116]	@ (8003cbc <_free_r+0x90>)
 8003c46:	6813      	ldr	r3, [r2, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d105      	bne.n	8003c58 <_free_r+0x2c>
 8003c4c:	6063      	str	r3, [r4, #4]
 8003c4e:	6014      	str	r4, [r2, #0]
 8003c50:	0028      	movs	r0, r5
 8003c52:	f000 f8df 	bl	8003e14 <__malloc_unlock>
 8003c56:	bd70      	pop	{r4, r5, r6, pc}
 8003c58:	42a3      	cmp	r3, r4
 8003c5a:	d908      	bls.n	8003c6e <_free_r+0x42>
 8003c5c:	6820      	ldr	r0, [r4, #0]
 8003c5e:	1821      	adds	r1, r4, r0
 8003c60:	428b      	cmp	r3, r1
 8003c62:	d1f3      	bne.n	8003c4c <_free_r+0x20>
 8003c64:	6819      	ldr	r1, [r3, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	1809      	adds	r1, r1, r0
 8003c6a:	6021      	str	r1, [r4, #0]
 8003c6c:	e7ee      	b.n	8003c4c <_free_r+0x20>
 8003c6e:	001a      	movs	r2, r3
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <_free_r+0x4e>
 8003c76:	42a3      	cmp	r3, r4
 8003c78:	d9f9      	bls.n	8003c6e <_free_r+0x42>
 8003c7a:	6811      	ldr	r1, [r2, #0]
 8003c7c:	1850      	adds	r0, r2, r1
 8003c7e:	42a0      	cmp	r0, r4
 8003c80:	d10b      	bne.n	8003c9a <_free_r+0x6e>
 8003c82:	6820      	ldr	r0, [r4, #0]
 8003c84:	1809      	adds	r1, r1, r0
 8003c86:	1850      	adds	r0, r2, r1
 8003c88:	6011      	str	r1, [r2, #0]
 8003c8a:	4283      	cmp	r3, r0
 8003c8c:	d1e0      	bne.n	8003c50 <_free_r+0x24>
 8003c8e:	6818      	ldr	r0, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	1841      	adds	r1, r0, r1
 8003c94:	6011      	str	r1, [r2, #0]
 8003c96:	6053      	str	r3, [r2, #4]
 8003c98:	e7da      	b.n	8003c50 <_free_r+0x24>
 8003c9a:	42a0      	cmp	r0, r4
 8003c9c:	d902      	bls.n	8003ca4 <_free_r+0x78>
 8003c9e:	230c      	movs	r3, #12
 8003ca0:	602b      	str	r3, [r5, #0]
 8003ca2:	e7d5      	b.n	8003c50 <_free_r+0x24>
 8003ca4:	6820      	ldr	r0, [r4, #0]
 8003ca6:	1821      	adds	r1, r4, r0
 8003ca8:	428b      	cmp	r3, r1
 8003caa:	d103      	bne.n	8003cb4 <_free_r+0x88>
 8003cac:	6819      	ldr	r1, [r3, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	1809      	adds	r1, r1, r0
 8003cb2:	6021      	str	r1, [r4, #0]
 8003cb4:	6063      	str	r3, [r4, #4]
 8003cb6:	6054      	str	r4, [r2, #4]
 8003cb8:	e7ca      	b.n	8003c50 <_free_r+0x24>
 8003cba:	46c0      	nop			@ (mov r8, r8)
 8003cbc:	20000364 	.word	0x20000364

08003cc0 <sbrk_aligned>:
 8003cc0:	b570      	push	{r4, r5, r6, lr}
 8003cc2:	4e0f      	ldr	r6, [pc, #60]	@ (8003d00 <sbrk_aligned+0x40>)
 8003cc4:	000d      	movs	r5, r1
 8003cc6:	6831      	ldr	r1, [r6, #0]
 8003cc8:	0004      	movs	r4, r0
 8003cca:	2900      	cmp	r1, #0
 8003ccc:	d102      	bne.n	8003cd4 <sbrk_aligned+0x14>
 8003cce:	f000 fb95 	bl	80043fc <_sbrk_r>
 8003cd2:	6030      	str	r0, [r6, #0]
 8003cd4:	0029      	movs	r1, r5
 8003cd6:	0020      	movs	r0, r4
 8003cd8:	f000 fb90 	bl	80043fc <_sbrk_r>
 8003cdc:	1c43      	adds	r3, r0, #1
 8003cde:	d103      	bne.n	8003ce8 <sbrk_aligned+0x28>
 8003ce0:	2501      	movs	r5, #1
 8003ce2:	426d      	negs	r5, r5
 8003ce4:	0028      	movs	r0, r5
 8003ce6:	bd70      	pop	{r4, r5, r6, pc}
 8003ce8:	2303      	movs	r3, #3
 8003cea:	1cc5      	adds	r5, r0, #3
 8003cec:	439d      	bics	r5, r3
 8003cee:	42a8      	cmp	r0, r5
 8003cf0:	d0f8      	beq.n	8003ce4 <sbrk_aligned+0x24>
 8003cf2:	1a29      	subs	r1, r5, r0
 8003cf4:	0020      	movs	r0, r4
 8003cf6:	f000 fb81 	bl	80043fc <_sbrk_r>
 8003cfa:	3001      	adds	r0, #1
 8003cfc:	d1f2      	bne.n	8003ce4 <sbrk_aligned+0x24>
 8003cfe:	e7ef      	b.n	8003ce0 <sbrk_aligned+0x20>
 8003d00:	20000360 	.word	0x20000360

08003d04 <_malloc_r>:
 8003d04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d06:	2203      	movs	r2, #3
 8003d08:	1ccb      	adds	r3, r1, #3
 8003d0a:	4393      	bics	r3, r2
 8003d0c:	3308      	adds	r3, #8
 8003d0e:	0005      	movs	r5, r0
 8003d10:	001f      	movs	r7, r3
 8003d12:	2b0c      	cmp	r3, #12
 8003d14:	d234      	bcs.n	8003d80 <_malloc_r+0x7c>
 8003d16:	270c      	movs	r7, #12
 8003d18:	42b9      	cmp	r1, r7
 8003d1a:	d833      	bhi.n	8003d84 <_malloc_r+0x80>
 8003d1c:	0028      	movs	r0, r5
 8003d1e:	f000 f871 	bl	8003e04 <__malloc_lock>
 8003d22:	4e37      	ldr	r6, [pc, #220]	@ (8003e00 <_malloc_r+0xfc>)
 8003d24:	6833      	ldr	r3, [r6, #0]
 8003d26:	001c      	movs	r4, r3
 8003d28:	2c00      	cmp	r4, #0
 8003d2a:	d12f      	bne.n	8003d8c <_malloc_r+0x88>
 8003d2c:	0039      	movs	r1, r7
 8003d2e:	0028      	movs	r0, r5
 8003d30:	f7ff ffc6 	bl	8003cc0 <sbrk_aligned>
 8003d34:	0004      	movs	r4, r0
 8003d36:	1c43      	adds	r3, r0, #1
 8003d38:	d15f      	bne.n	8003dfa <_malloc_r+0xf6>
 8003d3a:	6834      	ldr	r4, [r6, #0]
 8003d3c:	9400      	str	r4, [sp, #0]
 8003d3e:	9b00      	ldr	r3, [sp, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d14a      	bne.n	8003dda <_malloc_r+0xd6>
 8003d44:	2c00      	cmp	r4, #0
 8003d46:	d052      	beq.n	8003dee <_malloc_r+0xea>
 8003d48:	6823      	ldr	r3, [r4, #0]
 8003d4a:	0028      	movs	r0, r5
 8003d4c:	18e3      	adds	r3, r4, r3
 8003d4e:	9900      	ldr	r1, [sp, #0]
 8003d50:	9301      	str	r3, [sp, #4]
 8003d52:	f000 fb53 	bl	80043fc <_sbrk_r>
 8003d56:	9b01      	ldr	r3, [sp, #4]
 8003d58:	4283      	cmp	r3, r0
 8003d5a:	d148      	bne.n	8003dee <_malloc_r+0xea>
 8003d5c:	6823      	ldr	r3, [r4, #0]
 8003d5e:	0028      	movs	r0, r5
 8003d60:	1aff      	subs	r7, r7, r3
 8003d62:	0039      	movs	r1, r7
 8003d64:	f7ff ffac 	bl	8003cc0 <sbrk_aligned>
 8003d68:	3001      	adds	r0, #1
 8003d6a:	d040      	beq.n	8003dee <_malloc_r+0xea>
 8003d6c:	6823      	ldr	r3, [r4, #0]
 8003d6e:	19db      	adds	r3, r3, r7
 8003d70:	6023      	str	r3, [r4, #0]
 8003d72:	6833      	ldr	r3, [r6, #0]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	2a00      	cmp	r2, #0
 8003d78:	d133      	bne.n	8003de2 <_malloc_r+0xde>
 8003d7a:	9b00      	ldr	r3, [sp, #0]
 8003d7c:	6033      	str	r3, [r6, #0]
 8003d7e:	e019      	b.n	8003db4 <_malloc_r+0xb0>
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	dac9      	bge.n	8003d18 <_malloc_r+0x14>
 8003d84:	230c      	movs	r3, #12
 8003d86:	602b      	str	r3, [r5, #0]
 8003d88:	2000      	movs	r0, #0
 8003d8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003d8c:	6821      	ldr	r1, [r4, #0]
 8003d8e:	1bc9      	subs	r1, r1, r7
 8003d90:	d420      	bmi.n	8003dd4 <_malloc_r+0xd0>
 8003d92:	290b      	cmp	r1, #11
 8003d94:	d90a      	bls.n	8003dac <_malloc_r+0xa8>
 8003d96:	19e2      	adds	r2, r4, r7
 8003d98:	6027      	str	r7, [r4, #0]
 8003d9a:	42a3      	cmp	r3, r4
 8003d9c:	d104      	bne.n	8003da8 <_malloc_r+0xa4>
 8003d9e:	6032      	str	r2, [r6, #0]
 8003da0:	6863      	ldr	r3, [r4, #4]
 8003da2:	6011      	str	r1, [r2, #0]
 8003da4:	6053      	str	r3, [r2, #4]
 8003da6:	e005      	b.n	8003db4 <_malloc_r+0xb0>
 8003da8:	605a      	str	r2, [r3, #4]
 8003daa:	e7f9      	b.n	8003da0 <_malloc_r+0x9c>
 8003dac:	6862      	ldr	r2, [r4, #4]
 8003dae:	42a3      	cmp	r3, r4
 8003db0:	d10e      	bne.n	8003dd0 <_malloc_r+0xcc>
 8003db2:	6032      	str	r2, [r6, #0]
 8003db4:	0028      	movs	r0, r5
 8003db6:	f000 f82d 	bl	8003e14 <__malloc_unlock>
 8003dba:	0020      	movs	r0, r4
 8003dbc:	2207      	movs	r2, #7
 8003dbe:	300b      	adds	r0, #11
 8003dc0:	1d23      	adds	r3, r4, #4
 8003dc2:	4390      	bics	r0, r2
 8003dc4:	1ac2      	subs	r2, r0, r3
 8003dc6:	4298      	cmp	r0, r3
 8003dc8:	d0df      	beq.n	8003d8a <_malloc_r+0x86>
 8003dca:	1a1b      	subs	r3, r3, r0
 8003dcc:	50a3      	str	r3, [r4, r2]
 8003dce:	e7dc      	b.n	8003d8a <_malloc_r+0x86>
 8003dd0:	605a      	str	r2, [r3, #4]
 8003dd2:	e7ef      	b.n	8003db4 <_malloc_r+0xb0>
 8003dd4:	0023      	movs	r3, r4
 8003dd6:	6864      	ldr	r4, [r4, #4]
 8003dd8:	e7a6      	b.n	8003d28 <_malloc_r+0x24>
 8003dda:	9c00      	ldr	r4, [sp, #0]
 8003ddc:	6863      	ldr	r3, [r4, #4]
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	e7ad      	b.n	8003d3e <_malloc_r+0x3a>
 8003de2:	001a      	movs	r2, r3
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	42a3      	cmp	r3, r4
 8003de8:	d1fb      	bne.n	8003de2 <_malloc_r+0xde>
 8003dea:	2300      	movs	r3, #0
 8003dec:	e7da      	b.n	8003da4 <_malloc_r+0xa0>
 8003dee:	230c      	movs	r3, #12
 8003df0:	0028      	movs	r0, r5
 8003df2:	602b      	str	r3, [r5, #0]
 8003df4:	f000 f80e 	bl	8003e14 <__malloc_unlock>
 8003df8:	e7c6      	b.n	8003d88 <_malloc_r+0x84>
 8003dfa:	6007      	str	r7, [r0, #0]
 8003dfc:	e7da      	b.n	8003db4 <_malloc_r+0xb0>
 8003dfe:	46c0      	nop			@ (mov r8, r8)
 8003e00:	20000364 	.word	0x20000364

08003e04 <__malloc_lock>:
 8003e04:	b510      	push	{r4, lr}
 8003e06:	4802      	ldr	r0, [pc, #8]	@ (8003e10 <__malloc_lock+0xc>)
 8003e08:	f7ff ff0e 	bl	8003c28 <__retarget_lock_acquire_recursive>
 8003e0c:	bd10      	pop	{r4, pc}
 8003e0e:	46c0      	nop			@ (mov r8, r8)
 8003e10:	2000035c 	.word	0x2000035c

08003e14 <__malloc_unlock>:
 8003e14:	b510      	push	{r4, lr}
 8003e16:	4802      	ldr	r0, [pc, #8]	@ (8003e20 <__malloc_unlock+0xc>)
 8003e18:	f7ff ff07 	bl	8003c2a <__retarget_lock_release_recursive>
 8003e1c:	bd10      	pop	{r4, pc}
 8003e1e:	46c0      	nop			@ (mov r8, r8)
 8003e20:	2000035c 	.word	0x2000035c

08003e24 <__ssputs_r>:
 8003e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e26:	688e      	ldr	r6, [r1, #8]
 8003e28:	b085      	sub	sp, #20
 8003e2a:	001f      	movs	r7, r3
 8003e2c:	000c      	movs	r4, r1
 8003e2e:	680b      	ldr	r3, [r1, #0]
 8003e30:	9002      	str	r0, [sp, #8]
 8003e32:	9203      	str	r2, [sp, #12]
 8003e34:	42be      	cmp	r6, r7
 8003e36:	d830      	bhi.n	8003e9a <__ssputs_r+0x76>
 8003e38:	210c      	movs	r1, #12
 8003e3a:	5e62      	ldrsh	r2, [r4, r1]
 8003e3c:	2190      	movs	r1, #144	@ 0x90
 8003e3e:	00c9      	lsls	r1, r1, #3
 8003e40:	420a      	tst	r2, r1
 8003e42:	d028      	beq.n	8003e96 <__ssputs_r+0x72>
 8003e44:	2003      	movs	r0, #3
 8003e46:	6921      	ldr	r1, [r4, #16]
 8003e48:	1a5b      	subs	r3, r3, r1
 8003e4a:	9301      	str	r3, [sp, #4]
 8003e4c:	6963      	ldr	r3, [r4, #20]
 8003e4e:	4343      	muls	r3, r0
 8003e50:	9801      	ldr	r0, [sp, #4]
 8003e52:	0fdd      	lsrs	r5, r3, #31
 8003e54:	18ed      	adds	r5, r5, r3
 8003e56:	1c7b      	adds	r3, r7, #1
 8003e58:	181b      	adds	r3, r3, r0
 8003e5a:	106d      	asrs	r5, r5, #1
 8003e5c:	42ab      	cmp	r3, r5
 8003e5e:	d900      	bls.n	8003e62 <__ssputs_r+0x3e>
 8003e60:	001d      	movs	r5, r3
 8003e62:	0552      	lsls	r2, r2, #21
 8003e64:	d528      	bpl.n	8003eb8 <__ssputs_r+0x94>
 8003e66:	0029      	movs	r1, r5
 8003e68:	9802      	ldr	r0, [sp, #8]
 8003e6a:	f7ff ff4b 	bl	8003d04 <_malloc_r>
 8003e6e:	1e06      	subs	r6, r0, #0
 8003e70:	d02c      	beq.n	8003ecc <__ssputs_r+0xa8>
 8003e72:	9a01      	ldr	r2, [sp, #4]
 8003e74:	6921      	ldr	r1, [r4, #16]
 8003e76:	f000 fade 	bl	8004436 <memcpy>
 8003e7a:	89a2      	ldrh	r2, [r4, #12]
 8003e7c:	4b18      	ldr	r3, [pc, #96]	@ (8003ee0 <__ssputs_r+0xbc>)
 8003e7e:	401a      	ands	r2, r3
 8003e80:	2380      	movs	r3, #128	@ 0x80
 8003e82:	4313      	orrs	r3, r2
 8003e84:	81a3      	strh	r3, [r4, #12]
 8003e86:	9b01      	ldr	r3, [sp, #4]
 8003e88:	6126      	str	r6, [r4, #16]
 8003e8a:	18f6      	adds	r6, r6, r3
 8003e8c:	6026      	str	r6, [r4, #0]
 8003e8e:	003e      	movs	r6, r7
 8003e90:	6165      	str	r5, [r4, #20]
 8003e92:	1aed      	subs	r5, r5, r3
 8003e94:	60a5      	str	r5, [r4, #8]
 8003e96:	42be      	cmp	r6, r7
 8003e98:	d900      	bls.n	8003e9c <__ssputs_r+0x78>
 8003e9a:	003e      	movs	r6, r7
 8003e9c:	0032      	movs	r2, r6
 8003e9e:	9903      	ldr	r1, [sp, #12]
 8003ea0:	6820      	ldr	r0, [r4, #0]
 8003ea2:	f000 fa99 	bl	80043d8 <memmove>
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	68a3      	ldr	r3, [r4, #8]
 8003eaa:	1b9b      	subs	r3, r3, r6
 8003eac:	60a3      	str	r3, [r4, #8]
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	199b      	adds	r3, r3, r6
 8003eb2:	6023      	str	r3, [r4, #0]
 8003eb4:	b005      	add	sp, #20
 8003eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eb8:	002a      	movs	r2, r5
 8003eba:	9802      	ldr	r0, [sp, #8]
 8003ebc:	f000 fac4 	bl	8004448 <_realloc_r>
 8003ec0:	1e06      	subs	r6, r0, #0
 8003ec2:	d1e0      	bne.n	8003e86 <__ssputs_r+0x62>
 8003ec4:	6921      	ldr	r1, [r4, #16]
 8003ec6:	9802      	ldr	r0, [sp, #8]
 8003ec8:	f7ff feb0 	bl	8003c2c <_free_r>
 8003ecc:	230c      	movs	r3, #12
 8003ece:	2001      	movs	r0, #1
 8003ed0:	9a02      	ldr	r2, [sp, #8]
 8003ed2:	4240      	negs	r0, r0
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	89a2      	ldrh	r2, [r4, #12]
 8003ed8:	3334      	adds	r3, #52	@ 0x34
 8003eda:	4313      	orrs	r3, r2
 8003edc:	81a3      	strh	r3, [r4, #12]
 8003ede:	e7e9      	b.n	8003eb4 <__ssputs_r+0x90>
 8003ee0:	fffffb7f 	.word	0xfffffb7f

08003ee4 <_svfiprintf_r>:
 8003ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ee6:	b0a1      	sub	sp, #132	@ 0x84
 8003ee8:	9003      	str	r0, [sp, #12]
 8003eea:	001d      	movs	r5, r3
 8003eec:	898b      	ldrh	r3, [r1, #12]
 8003eee:	000f      	movs	r7, r1
 8003ef0:	0016      	movs	r6, r2
 8003ef2:	061b      	lsls	r3, r3, #24
 8003ef4:	d511      	bpl.n	8003f1a <_svfiprintf_r+0x36>
 8003ef6:	690b      	ldr	r3, [r1, #16]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10e      	bne.n	8003f1a <_svfiprintf_r+0x36>
 8003efc:	2140      	movs	r1, #64	@ 0x40
 8003efe:	f7ff ff01 	bl	8003d04 <_malloc_r>
 8003f02:	6038      	str	r0, [r7, #0]
 8003f04:	6138      	str	r0, [r7, #16]
 8003f06:	2800      	cmp	r0, #0
 8003f08:	d105      	bne.n	8003f16 <_svfiprintf_r+0x32>
 8003f0a:	230c      	movs	r3, #12
 8003f0c:	9a03      	ldr	r2, [sp, #12]
 8003f0e:	6013      	str	r3, [r2, #0]
 8003f10:	2001      	movs	r0, #1
 8003f12:	4240      	negs	r0, r0
 8003f14:	e0cf      	b.n	80040b6 <_svfiprintf_r+0x1d2>
 8003f16:	2340      	movs	r3, #64	@ 0x40
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	ac08      	add	r4, sp, #32
 8003f1e:	6163      	str	r3, [r4, #20]
 8003f20:	3320      	adds	r3, #32
 8003f22:	7663      	strb	r3, [r4, #25]
 8003f24:	3310      	adds	r3, #16
 8003f26:	76a3      	strb	r3, [r4, #26]
 8003f28:	9507      	str	r5, [sp, #28]
 8003f2a:	0035      	movs	r5, r6
 8003f2c:	782b      	ldrb	r3, [r5, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <_svfiprintf_r+0x52>
 8003f32:	2b25      	cmp	r3, #37	@ 0x25
 8003f34:	d148      	bne.n	8003fc8 <_svfiprintf_r+0xe4>
 8003f36:	1bab      	subs	r3, r5, r6
 8003f38:	9305      	str	r3, [sp, #20]
 8003f3a:	42b5      	cmp	r5, r6
 8003f3c:	d00b      	beq.n	8003f56 <_svfiprintf_r+0x72>
 8003f3e:	0032      	movs	r2, r6
 8003f40:	0039      	movs	r1, r7
 8003f42:	9803      	ldr	r0, [sp, #12]
 8003f44:	f7ff ff6e 	bl	8003e24 <__ssputs_r>
 8003f48:	3001      	adds	r0, #1
 8003f4a:	d100      	bne.n	8003f4e <_svfiprintf_r+0x6a>
 8003f4c:	e0ae      	b.n	80040ac <_svfiprintf_r+0x1c8>
 8003f4e:	6963      	ldr	r3, [r4, #20]
 8003f50:	9a05      	ldr	r2, [sp, #20]
 8003f52:	189b      	adds	r3, r3, r2
 8003f54:	6163      	str	r3, [r4, #20]
 8003f56:	782b      	ldrb	r3, [r5, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d100      	bne.n	8003f5e <_svfiprintf_r+0x7a>
 8003f5c:	e0a6      	b.n	80040ac <_svfiprintf_r+0x1c8>
 8003f5e:	2201      	movs	r2, #1
 8003f60:	2300      	movs	r3, #0
 8003f62:	4252      	negs	r2, r2
 8003f64:	6062      	str	r2, [r4, #4]
 8003f66:	a904      	add	r1, sp, #16
 8003f68:	3254      	adds	r2, #84	@ 0x54
 8003f6a:	1852      	adds	r2, r2, r1
 8003f6c:	1c6e      	adds	r6, r5, #1
 8003f6e:	6023      	str	r3, [r4, #0]
 8003f70:	60e3      	str	r3, [r4, #12]
 8003f72:	60a3      	str	r3, [r4, #8]
 8003f74:	7013      	strb	r3, [r2, #0]
 8003f76:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003f78:	4b54      	ldr	r3, [pc, #336]	@ (80040cc <_svfiprintf_r+0x1e8>)
 8003f7a:	2205      	movs	r2, #5
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	7831      	ldrb	r1, [r6, #0]
 8003f80:	9305      	str	r3, [sp, #20]
 8003f82:	f000 fa4d 	bl	8004420 <memchr>
 8003f86:	1c75      	adds	r5, r6, #1
 8003f88:	2800      	cmp	r0, #0
 8003f8a:	d11f      	bne.n	8003fcc <_svfiprintf_r+0xe8>
 8003f8c:	6822      	ldr	r2, [r4, #0]
 8003f8e:	06d3      	lsls	r3, r2, #27
 8003f90:	d504      	bpl.n	8003f9c <_svfiprintf_r+0xb8>
 8003f92:	2353      	movs	r3, #83	@ 0x53
 8003f94:	a904      	add	r1, sp, #16
 8003f96:	185b      	adds	r3, r3, r1
 8003f98:	2120      	movs	r1, #32
 8003f9a:	7019      	strb	r1, [r3, #0]
 8003f9c:	0713      	lsls	r3, r2, #28
 8003f9e:	d504      	bpl.n	8003faa <_svfiprintf_r+0xc6>
 8003fa0:	2353      	movs	r3, #83	@ 0x53
 8003fa2:	a904      	add	r1, sp, #16
 8003fa4:	185b      	adds	r3, r3, r1
 8003fa6:	212b      	movs	r1, #43	@ 0x2b
 8003fa8:	7019      	strb	r1, [r3, #0]
 8003faa:	7833      	ldrb	r3, [r6, #0]
 8003fac:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fae:	d016      	beq.n	8003fde <_svfiprintf_r+0xfa>
 8003fb0:	0035      	movs	r5, r6
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	200a      	movs	r0, #10
 8003fb6:	68e3      	ldr	r3, [r4, #12]
 8003fb8:	782a      	ldrb	r2, [r5, #0]
 8003fba:	1c6e      	adds	r6, r5, #1
 8003fbc:	3a30      	subs	r2, #48	@ 0x30
 8003fbe:	2a09      	cmp	r2, #9
 8003fc0:	d950      	bls.n	8004064 <_svfiprintf_r+0x180>
 8003fc2:	2900      	cmp	r1, #0
 8003fc4:	d111      	bne.n	8003fea <_svfiprintf_r+0x106>
 8003fc6:	e017      	b.n	8003ff8 <_svfiprintf_r+0x114>
 8003fc8:	3501      	adds	r5, #1
 8003fca:	e7af      	b.n	8003f2c <_svfiprintf_r+0x48>
 8003fcc:	9b05      	ldr	r3, [sp, #20]
 8003fce:	6822      	ldr	r2, [r4, #0]
 8003fd0:	1ac0      	subs	r0, r0, r3
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	4083      	lsls	r3, r0
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	002e      	movs	r6, r5
 8003fda:	6023      	str	r3, [r4, #0]
 8003fdc:	e7cc      	b.n	8003f78 <_svfiprintf_r+0x94>
 8003fde:	9b07      	ldr	r3, [sp, #28]
 8003fe0:	1d19      	adds	r1, r3, #4
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	9107      	str	r1, [sp, #28]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	db01      	blt.n	8003fee <_svfiprintf_r+0x10a>
 8003fea:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003fec:	e004      	b.n	8003ff8 <_svfiprintf_r+0x114>
 8003fee:	425b      	negs	r3, r3
 8003ff0:	60e3      	str	r3, [r4, #12]
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	6023      	str	r3, [r4, #0]
 8003ff8:	782b      	ldrb	r3, [r5, #0]
 8003ffa:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ffc:	d10c      	bne.n	8004018 <_svfiprintf_r+0x134>
 8003ffe:	786b      	ldrb	r3, [r5, #1]
 8004000:	2b2a      	cmp	r3, #42	@ 0x2a
 8004002:	d134      	bne.n	800406e <_svfiprintf_r+0x18a>
 8004004:	9b07      	ldr	r3, [sp, #28]
 8004006:	3502      	adds	r5, #2
 8004008:	1d1a      	adds	r2, r3, #4
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	9207      	str	r2, [sp, #28]
 800400e:	2b00      	cmp	r3, #0
 8004010:	da01      	bge.n	8004016 <_svfiprintf_r+0x132>
 8004012:	2301      	movs	r3, #1
 8004014:	425b      	negs	r3, r3
 8004016:	9309      	str	r3, [sp, #36]	@ 0x24
 8004018:	4e2d      	ldr	r6, [pc, #180]	@ (80040d0 <_svfiprintf_r+0x1ec>)
 800401a:	2203      	movs	r2, #3
 800401c:	0030      	movs	r0, r6
 800401e:	7829      	ldrb	r1, [r5, #0]
 8004020:	f000 f9fe 	bl	8004420 <memchr>
 8004024:	2800      	cmp	r0, #0
 8004026:	d006      	beq.n	8004036 <_svfiprintf_r+0x152>
 8004028:	2340      	movs	r3, #64	@ 0x40
 800402a:	1b80      	subs	r0, r0, r6
 800402c:	4083      	lsls	r3, r0
 800402e:	6822      	ldr	r2, [r4, #0]
 8004030:	3501      	adds	r5, #1
 8004032:	4313      	orrs	r3, r2
 8004034:	6023      	str	r3, [r4, #0]
 8004036:	7829      	ldrb	r1, [r5, #0]
 8004038:	2206      	movs	r2, #6
 800403a:	4826      	ldr	r0, [pc, #152]	@ (80040d4 <_svfiprintf_r+0x1f0>)
 800403c:	1c6e      	adds	r6, r5, #1
 800403e:	7621      	strb	r1, [r4, #24]
 8004040:	f000 f9ee 	bl	8004420 <memchr>
 8004044:	2800      	cmp	r0, #0
 8004046:	d038      	beq.n	80040ba <_svfiprintf_r+0x1d6>
 8004048:	4b23      	ldr	r3, [pc, #140]	@ (80040d8 <_svfiprintf_r+0x1f4>)
 800404a:	2b00      	cmp	r3, #0
 800404c:	d122      	bne.n	8004094 <_svfiprintf_r+0x1b0>
 800404e:	2207      	movs	r2, #7
 8004050:	9b07      	ldr	r3, [sp, #28]
 8004052:	3307      	adds	r3, #7
 8004054:	4393      	bics	r3, r2
 8004056:	3308      	adds	r3, #8
 8004058:	9307      	str	r3, [sp, #28]
 800405a:	6963      	ldr	r3, [r4, #20]
 800405c:	9a04      	ldr	r2, [sp, #16]
 800405e:	189b      	adds	r3, r3, r2
 8004060:	6163      	str	r3, [r4, #20]
 8004062:	e762      	b.n	8003f2a <_svfiprintf_r+0x46>
 8004064:	4343      	muls	r3, r0
 8004066:	0035      	movs	r5, r6
 8004068:	2101      	movs	r1, #1
 800406a:	189b      	adds	r3, r3, r2
 800406c:	e7a4      	b.n	8003fb8 <_svfiprintf_r+0xd4>
 800406e:	2300      	movs	r3, #0
 8004070:	200a      	movs	r0, #10
 8004072:	0019      	movs	r1, r3
 8004074:	3501      	adds	r5, #1
 8004076:	6063      	str	r3, [r4, #4]
 8004078:	782a      	ldrb	r2, [r5, #0]
 800407a:	1c6e      	adds	r6, r5, #1
 800407c:	3a30      	subs	r2, #48	@ 0x30
 800407e:	2a09      	cmp	r2, #9
 8004080:	d903      	bls.n	800408a <_svfiprintf_r+0x1a6>
 8004082:	2b00      	cmp	r3, #0
 8004084:	d0c8      	beq.n	8004018 <_svfiprintf_r+0x134>
 8004086:	9109      	str	r1, [sp, #36]	@ 0x24
 8004088:	e7c6      	b.n	8004018 <_svfiprintf_r+0x134>
 800408a:	4341      	muls	r1, r0
 800408c:	0035      	movs	r5, r6
 800408e:	2301      	movs	r3, #1
 8004090:	1889      	adds	r1, r1, r2
 8004092:	e7f1      	b.n	8004078 <_svfiprintf_r+0x194>
 8004094:	aa07      	add	r2, sp, #28
 8004096:	9200      	str	r2, [sp, #0]
 8004098:	0021      	movs	r1, r4
 800409a:	003a      	movs	r2, r7
 800409c:	4b0f      	ldr	r3, [pc, #60]	@ (80040dc <_svfiprintf_r+0x1f8>)
 800409e:	9803      	ldr	r0, [sp, #12]
 80040a0:	e000      	b.n	80040a4 <_svfiprintf_r+0x1c0>
 80040a2:	bf00      	nop
 80040a4:	9004      	str	r0, [sp, #16]
 80040a6:	9b04      	ldr	r3, [sp, #16]
 80040a8:	3301      	adds	r3, #1
 80040aa:	d1d6      	bne.n	800405a <_svfiprintf_r+0x176>
 80040ac:	89bb      	ldrh	r3, [r7, #12]
 80040ae:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80040b0:	065b      	lsls	r3, r3, #25
 80040b2:	d500      	bpl.n	80040b6 <_svfiprintf_r+0x1d2>
 80040b4:	e72c      	b.n	8003f10 <_svfiprintf_r+0x2c>
 80040b6:	b021      	add	sp, #132	@ 0x84
 80040b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040ba:	aa07      	add	r2, sp, #28
 80040bc:	9200      	str	r2, [sp, #0]
 80040be:	0021      	movs	r1, r4
 80040c0:	003a      	movs	r2, r7
 80040c2:	4b06      	ldr	r3, [pc, #24]	@ (80040dc <_svfiprintf_r+0x1f8>)
 80040c4:	9803      	ldr	r0, [sp, #12]
 80040c6:	f000 f87b 	bl	80041c0 <_printf_i>
 80040ca:	e7eb      	b.n	80040a4 <_svfiprintf_r+0x1c0>
 80040cc:	08004558 	.word	0x08004558
 80040d0:	0800455e 	.word	0x0800455e
 80040d4:	08004562 	.word	0x08004562
 80040d8:	00000000 	.word	0x00000000
 80040dc:	08003e25 	.word	0x08003e25

080040e0 <_printf_common>:
 80040e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040e2:	0016      	movs	r6, r2
 80040e4:	9301      	str	r3, [sp, #4]
 80040e6:	688a      	ldr	r2, [r1, #8]
 80040e8:	690b      	ldr	r3, [r1, #16]
 80040ea:	000c      	movs	r4, r1
 80040ec:	9000      	str	r0, [sp, #0]
 80040ee:	4293      	cmp	r3, r2
 80040f0:	da00      	bge.n	80040f4 <_printf_common+0x14>
 80040f2:	0013      	movs	r3, r2
 80040f4:	0022      	movs	r2, r4
 80040f6:	6033      	str	r3, [r6, #0]
 80040f8:	3243      	adds	r2, #67	@ 0x43
 80040fa:	7812      	ldrb	r2, [r2, #0]
 80040fc:	2a00      	cmp	r2, #0
 80040fe:	d001      	beq.n	8004104 <_printf_common+0x24>
 8004100:	3301      	adds	r3, #1
 8004102:	6033      	str	r3, [r6, #0]
 8004104:	6823      	ldr	r3, [r4, #0]
 8004106:	069b      	lsls	r3, r3, #26
 8004108:	d502      	bpl.n	8004110 <_printf_common+0x30>
 800410a:	6833      	ldr	r3, [r6, #0]
 800410c:	3302      	adds	r3, #2
 800410e:	6033      	str	r3, [r6, #0]
 8004110:	6822      	ldr	r2, [r4, #0]
 8004112:	2306      	movs	r3, #6
 8004114:	0015      	movs	r5, r2
 8004116:	401d      	ands	r5, r3
 8004118:	421a      	tst	r2, r3
 800411a:	d027      	beq.n	800416c <_printf_common+0x8c>
 800411c:	0023      	movs	r3, r4
 800411e:	3343      	adds	r3, #67	@ 0x43
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	1e5a      	subs	r2, r3, #1
 8004124:	4193      	sbcs	r3, r2
 8004126:	6822      	ldr	r2, [r4, #0]
 8004128:	0692      	lsls	r2, r2, #26
 800412a:	d430      	bmi.n	800418e <_printf_common+0xae>
 800412c:	0022      	movs	r2, r4
 800412e:	9901      	ldr	r1, [sp, #4]
 8004130:	9800      	ldr	r0, [sp, #0]
 8004132:	9d08      	ldr	r5, [sp, #32]
 8004134:	3243      	adds	r2, #67	@ 0x43
 8004136:	47a8      	blx	r5
 8004138:	3001      	adds	r0, #1
 800413a:	d025      	beq.n	8004188 <_printf_common+0xa8>
 800413c:	2206      	movs	r2, #6
 800413e:	6823      	ldr	r3, [r4, #0]
 8004140:	2500      	movs	r5, #0
 8004142:	4013      	ands	r3, r2
 8004144:	2b04      	cmp	r3, #4
 8004146:	d105      	bne.n	8004154 <_printf_common+0x74>
 8004148:	6833      	ldr	r3, [r6, #0]
 800414a:	68e5      	ldr	r5, [r4, #12]
 800414c:	1aed      	subs	r5, r5, r3
 800414e:	43eb      	mvns	r3, r5
 8004150:	17db      	asrs	r3, r3, #31
 8004152:	401d      	ands	r5, r3
 8004154:	68a3      	ldr	r3, [r4, #8]
 8004156:	6922      	ldr	r2, [r4, #16]
 8004158:	4293      	cmp	r3, r2
 800415a:	dd01      	ble.n	8004160 <_printf_common+0x80>
 800415c:	1a9b      	subs	r3, r3, r2
 800415e:	18ed      	adds	r5, r5, r3
 8004160:	2600      	movs	r6, #0
 8004162:	42b5      	cmp	r5, r6
 8004164:	d120      	bne.n	80041a8 <_printf_common+0xc8>
 8004166:	2000      	movs	r0, #0
 8004168:	e010      	b.n	800418c <_printf_common+0xac>
 800416a:	3501      	adds	r5, #1
 800416c:	68e3      	ldr	r3, [r4, #12]
 800416e:	6832      	ldr	r2, [r6, #0]
 8004170:	1a9b      	subs	r3, r3, r2
 8004172:	42ab      	cmp	r3, r5
 8004174:	ddd2      	ble.n	800411c <_printf_common+0x3c>
 8004176:	0022      	movs	r2, r4
 8004178:	2301      	movs	r3, #1
 800417a:	9901      	ldr	r1, [sp, #4]
 800417c:	9800      	ldr	r0, [sp, #0]
 800417e:	9f08      	ldr	r7, [sp, #32]
 8004180:	3219      	adds	r2, #25
 8004182:	47b8      	blx	r7
 8004184:	3001      	adds	r0, #1
 8004186:	d1f0      	bne.n	800416a <_printf_common+0x8a>
 8004188:	2001      	movs	r0, #1
 800418a:	4240      	negs	r0, r0
 800418c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800418e:	2030      	movs	r0, #48	@ 0x30
 8004190:	18e1      	adds	r1, r4, r3
 8004192:	3143      	adds	r1, #67	@ 0x43
 8004194:	7008      	strb	r0, [r1, #0]
 8004196:	0021      	movs	r1, r4
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	3145      	adds	r1, #69	@ 0x45
 800419c:	7809      	ldrb	r1, [r1, #0]
 800419e:	18a2      	adds	r2, r4, r2
 80041a0:	3243      	adds	r2, #67	@ 0x43
 80041a2:	3302      	adds	r3, #2
 80041a4:	7011      	strb	r1, [r2, #0]
 80041a6:	e7c1      	b.n	800412c <_printf_common+0x4c>
 80041a8:	0022      	movs	r2, r4
 80041aa:	2301      	movs	r3, #1
 80041ac:	9901      	ldr	r1, [sp, #4]
 80041ae:	9800      	ldr	r0, [sp, #0]
 80041b0:	9f08      	ldr	r7, [sp, #32]
 80041b2:	321a      	adds	r2, #26
 80041b4:	47b8      	blx	r7
 80041b6:	3001      	adds	r0, #1
 80041b8:	d0e6      	beq.n	8004188 <_printf_common+0xa8>
 80041ba:	3601      	adds	r6, #1
 80041bc:	e7d1      	b.n	8004162 <_printf_common+0x82>
	...

080041c0 <_printf_i>:
 80041c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041c2:	b08b      	sub	sp, #44	@ 0x2c
 80041c4:	9206      	str	r2, [sp, #24]
 80041c6:	000a      	movs	r2, r1
 80041c8:	3243      	adds	r2, #67	@ 0x43
 80041ca:	9307      	str	r3, [sp, #28]
 80041cc:	9005      	str	r0, [sp, #20]
 80041ce:	9203      	str	r2, [sp, #12]
 80041d0:	7e0a      	ldrb	r2, [r1, #24]
 80041d2:	000c      	movs	r4, r1
 80041d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80041d6:	2a78      	cmp	r2, #120	@ 0x78
 80041d8:	d809      	bhi.n	80041ee <_printf_i+0x2e>
 80041da:	2a62      	cmp	r2, #98	@ 0x62
 80041dc:	d80b      	bhi.n	80041f6 <_printf_i+0x36>
 80041de:	2a00      	cmp	r2, #0
 80041e0:	d100      	bne.n	80041e4 <_printf_i+0x24>
 80041e2:	e0ba      	b.n	800435a <_printf_i+0x19a>
 80041e4:	497a      	ldr	r1, [pc, #488]	@ (80043d0 <_printf_i+0x210>)
 80041e6:	9104      	str	r1, [sp, #16]
 80041e8:	2a58      	cmp	r2, #88	@ 0x58
 80041ea:	d100      	bne.n	80041ee <_printf_i+0x2e>
 80041ec:	e08e      	b.n	800430c <_printf_i+0x14c>
 80041ee:	0025      	movs	r5, r4
 80041f0:	3542      	adds	r5, #66	@ 0x42
 80041f2:	702a      	strb	r2, [r5, #0]
 80041f4:	e022      	b.n	800423c <_printf_i+0x7c>
 80041f6:	0010      	movs	r0, r2
 80041f8:	3863      	subs	r0, #99	@ 0x63
 80041fa:	2815      	cmp	r0, #21
 80041fc:	d8f7      	bhi.n	80041ee <_printf_i+0x2e>
 80041fe:	f7fb ff8b 	bl	8000118 <__gnu_thumb1_case_shi>
 8004202:	0016      	.short	0x0016
 8004204:	fff6001f 	.word	0xfff6001f
 8004208:	fff6fff6 	.word	0xfff6fff6
 800420c:	001ffff6 	.word	0x001ffff6
 8004210:	fff6fff6 	.word	0xfff6fff6
 8004214:	fff6fff6 	.word	0xfff6fff6
 8004218:	0036009f 	.word	0x0036009f
 800421c:	fff6007e 	.word	0xfff6007e
 8004220:	00b0fff6 	.word	0x00b0fff6
 8004224:	0036fff6 	.word	0x0036fff6
 8004228:	fff6fff6 	.word	0xfff6fff6
 800422c:	0082      	.short	0x0082
 800422e:	0025      	movs	r5, r4
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	3542      	adds	r5, #66	@ 0x42
 8004234:	1d11      	adds	r1, r2, #4
 8004236:	6019      	str	r1, [r3, #0]
 8004238:	6813      	ldr	r3, [r2, #0]
 800423a:	702b      	strb	r3, [r5, #0]
 800423c:	2301      	movs	r3, #1
 800423e:	e09e      	b.n	800437e <_printf_i+0x1be>
 8004240:	6818      	ldr	r0, [r3, #0]
 8004242:	6809      	ldr	r1, [r1, #0]
 8004244:	1d02      	adds	r2, r0, #4
 8004246:	060d      	lsls	r5, r1, #24
 8004248:	d50b      	bpl.n	8004262 <_printf_i+0xa2>
 800424a:	6806      	ldr	r6, [r0, #0]
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	2e00      	cmp	r6, #0
 8004250:	da03      	bge.n	800425a <_printf_i+0x9a>
 8004252:	232d      	movs	r3, #45	@ 0x2d
 8004254:	9a03      	ldr	r2, [sp, #12]
 8004256:	4276      	negs	r6, r6
 8004258:	7013      	strb	r3, [r2, #0]
 800425a:	4b5d      	ldr	r3, [pc, #372]	@ (80043d0 <_printf_i+0x210>)
 800425c:	270a      	movs	r7, #10
 800425e:	9304      	str	r3, [sp, #16]
 8004260:	e018      	b.n	8004294 <_printf_i+0xd4>
 8004262:	6806      	ldr	r6, [r0, #0]
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	0649      	lsls	r1, r1, #25
 8004268:	d5f1      	bpl.n	800424e <_printf_i+0x8e>
 800426a:	b236      	sxth	r6, r6
 800426c:	e7ef      	b.n	800424e <_printf_i+0x8e>
 800426e:	6808      	ldr	r0, [r1, #0]
 8004270:	6819      	ldr	r1, [r3, #0]
 8004272:	c940      	ldmia	r1!, {r6}
 8004274:	0605      	lsls	r5, r0, #24
 8004276:	d402      	bmi.n	800427e <_printf_i+0xbe>
 8004278:	0640      	lsls	r0, r0, #25
 800427a:	d500      	bpl.n	800427e <_printf_i+0xbe>
 800427c:	b2b6      	uxth	r6, r6
 800427e:	6019      	str	r1, [r3, #0]
 8004280:	4b53      	ldr	r3, [pc, #332]	@ (80043d0 <_printf_i+0x210>)
 8004282:	270a      	movs	r7, #10
 8004284:	9304      	str	r3, [sp, #16]
 8004286:	2a6f      	cmp	r2, #111	@ 0x6f
 8004288:	d100      	bne.n	800428c <_printf_i+0xcc>
 800428a:	3f02      	subs	r7, #2
 800428c:	0023      	movs	r3, r4
 800428e:	2200      	movs	r2, #0
 8004290:	3343      	adds	r3, #67	@ 0x43
 8004292:	701a      	strb	r2, [r3, #0]
 8004294:	6863      	ldr	r3, [r4, #4]
 8004296:	60a3      	str	r3, [r4, #8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	db06      	blt.n	80042aa <_printf_i+0xea>
 800429c:	2104      	movs	r1, #4
 800429e:	6822      	ldr	r2, [r4, #0]
 80042a0:	9d03      	ldr	r5, [sp, #12]
 80042a2:	438a      	bics	r2, r1
 80042a4:	6022      	str	r2, [r4, #0]
 80042a6:	4333      	orrs	r3, r6
 80042a8:	d00c      	beq.n	80042c4 <_printf_i+0x104>
 80042aa:	9d03      	ldr	r5, [sp, #12]
 80042ac:	0030      	movs	r0, r6
 80042ae:	0039      	movs	r1, r7
 80042b0:	f7fb ffc2 	bl	8000238 <__aeabi_uidivmod>
 80042b4:	9b04      	ldr	r3, [sp, #16]
 80042b6:	3d01      	subs	r5, #1
 80042b8:	5c5b      	ldrb	r3, [r3, r1]
 80042ba:	702b      	strb	r3, [r5, #0]
 80042bc:	0033      	movs	r3, r6
 80042be:	0006      	movs	r6, r0
 80042c0:	429f      	cmp	r7, r3
 80042c2:	d9f3      	bls.n	80042ac <_printf_i+0xec>
 80042c4:	2f08      	cmp	r7, #8
 80042c6:	d109      	bne.n	80042dc <_printf_i+0x11c>
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	07db      	lsls	r3, r3, #31
 80042cc:	d506      	bpl.n	80042dc <_printf_i+0x11c>
 80042ce:	6862      	ldr	r2, [r4, #4]
 80042d0:	6923      	ldr	r3, [r4, #16]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	dc02      	bgt.n	80042dc <_printf_i+0x11c>
 80042d6:	2330      	movs	r3, #48	@ 0x30
 80042d8:	3d01      	subs	r5, #1
 80042da:	702b      	strb	r3, [r5, #0]
 80042dc:	9b03      	ldr	r3, [sp, #12]
 80042de:	1b5b      	subs	r3, r3, r5
 80042e0:	6123      	str	r3, [r4, #16]
 80042e2:	9b07      	ldr	r3, [sp, #28]
 80042e4:	0021      	movs	r1, r4
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	9805      	ldr	r0, [sp, #20]
 80042ea:	9b06      	ldr	r3, [sp, #24]
 80042ec:	aa09      	add	r2, sp, #36	@ 0x24
 80042ee:	f7ff fef7 	bl	80040e0 <_printf_common>
 80042f2:	3001      	adds	r0, #1
 80042f4:	d148      	bne.n	8004388 <_printf_i+0x1c8>
 80042f6:	2001      	movs	r0, #1
 80042f8:	4240      	negs	r0, r0
 80042fa:	b00b      	add	sp, #44	@ 0x2c
 80042fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042fe:	2220      	movs	r2, #32
 8004300:	6809      	ldr	r1, [r1, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	6022      	str	r2, [r4, #0]
 8004306:	2278      	movs	r2, #120	@ 0x78
 8004308:	4932      	ldr	r1, [pc, #200]	@ (80043d4 <_printf_i+0x214>)
 800430a:	9104      	str	r1, [sp, #16]
 800430c:	0021      	movs	r1, r4
 800430e:	3145      	adds	r1, #69	@ 0x45
 8004310:	700a      	strb	r2, [r1, #0]
 8004312:	6819      	ldr	r1, [r3, #0]
 8004314:	6822      	ldr	r2, [r4, #0]
 8004316:	c940      	ldmia	r1!, {r6}
 8004318:	0610      	lsls	r0, r2, #24
 800431a:	d402      	bmi.n	8004322 <_printf_i+0x162>
 800431c:	0650      	lsls	r0, r2, #25
 800431e:	d500      	bpl.n	8004322 <_printf_i+0x162>
 8004320:	b2b6      	uxth	r6, r6
 8004322:	6019      	str	r1, [r3, #0]
 8004324:	07d3      	lsls	r3, r2, #31
 8004326:	d502      	bpl.n	800432e <_printf_i+0x16e>
 8004328:	2320      	movs	r3, #32
 800432a:	4313      	orrs	r3, r2
 800432c:	6023      	str	r3, [r4, #0]
 800432e:	2e00      	cmp	r6, #0
 8004330:	d001      	beq.n	8004336 <_printf_i+0x176>
 8004332:	2710      	movs	r7, #16
 8004334:	e7aa      	b.n	800428c <_printf_i+0xcc>
 8004336:	2220      	movs	r2, #32
 8004338:	6823      	ldr	r3, [r4, #0]
 800433a:	4393      	bics	r3, r2
 800433c:	6023      	str	r3, [r4, #0]
 800433e:	e7f8      	b.n	8004332 <_printf_i+0x172>
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	680d      	ldr	r5, [r1, #0]
 8004344:	1d10      	adds	r0, r2, #4
 8004346:	6949      	ldr	r1, [r1, #20]
 8004348:	6018      	str	r0, [r3, #0]
 800434a:	6813      	ldr	r3, [r2, #0]
 800434c:	062e      	lsls	r6, r5, #24
 800434e:	d501      	bpl.n	8004354 <_printf_i+0x194>
 8004350:	6019      	str	r1, [r3, #0]
 8004352:	e002      	b.n	800435a <_printf_i+0x19a>
 8004354:	066d      	lsls	r5, r5, #25
 8004356:	d5fb      	bpl.n	8004350 <_printf_i+0x190>
 8004358:	8019      	strh	r1, [r3, #0]
 800435a:	2300      	movs	r3, #0
 800435c:	9d03      	ldr	r5, [sp, #12]
 800435e:	6123      	str	r3, [r4, #16]
 8004360:	e7bf      	b.n	80042e2 <_printf_i+0x122>
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	1d11      	adds	r1, r2, #4
 8004366:	6019      	str	r1, [r3, #0]
 8004368:	6815      	ldr	r5, [r2, #0]
 800436a:	2100      	movs	r1, #0
 800436c:	0028      	movs	r0, r5
 800436e:	6862      	ldr	r2, [r4, #4]
 8004370:	f000 f856 	bl	8004420 <memchr>
 8004374:	2800      	cmp	r0, #0
 8004376:	d001      	beq.n	800437c <_printf_i+0x1bc>
 8004378:	1b40      	subs	r0, r0, r5
 800437a:	6060      	str	r0, [r4, #4]
 800437c:	6863      	ldr	r3, [r4, #4]
 800437e:	6123      	str	r3, [r4, #16]
 8004380:	2300      	movs	r3, #0
 8004382:	9a03      	ldr	r2, [sp, #12]
 8004384:	7013      	strb	r3, [r2, #0]
 8004386:	e7ac      	b.n	80042e2 <_printf_i+0x122>
 8004388:	002a      	movs	r2, r5
 800438a:	6923      	ldr	r3, [r4, #16]
 800438c:	9906      	ldr	r1, [sp, #24]
 800438e:	9805      	ldr	r0, [sp, #20]
 8004390:	9d07      	ldr	r5, [sp, #28]
 8004392:	47a8      	blx	r5
 8004394:	3001      	adds	r0, #1
 8004396:	d0ae      	beq.n	80042f6 <_printf_i+0x136>
 8004398:	6823      	ldr	r3, [r4, #0]
 800439a:	079b      	lsls	r3, r3, #30
 800439c:	d415      	bmi.n	80043ca <_printf_i+0x20a>
 800439e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043a0:	68e0      	ldr	r0, [r4, #12]
 80043a2:	4298      	cmp	r0, r3
 80043a4:	daa9      	bge.n	80042fa <_printf_i+0x13a>
 80043a6:	0018      	movs	r0, r3
 80043a8:	e7a7      	b.n	80042fa <_printf_i+0x13a>
 80043aa:	0022      	movs	r2, r4
 80043ac:	2301      	movs	r3, #1
 80043ae:	9906      	ldr	r1, [sp, #24]
 80043b0:	9805      	ldr	r0, [sp, #20]
 80043b2:	9e07      	ldr	r6, [sp, #28]
 80043b4:	3219      	adds	r2, #25
 80043b6:	47b0      	blx	r6
 80043b8:	3001      	adds	r0, #1
 80043ba:	d09c      	beq.n	80042f6 <_printf_i+0x136>
 80043bc:	3501      	adds	r5, #1
 80043be:	68e3      	ldr	r3, [r4, #12]
 80043c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80043c2:	1a9b      	subs	r3, r3, r2
 80043c4:	42ab      	cmp	r3, r5
 80043c6:	dcf0      	bgt.n	80043aa <_printf_i+0x1ea>
 80043c8:	e7e9      	b.n	800439e <_printf_i+0x1de>
 80043ca:	2500      	movs	r5, #0
 80043cc:	e7f7      	b.n	80043be <_printf_i+0x1fe>
 80043ce:	46c0      	nop			@ (mov r8, r8)
 80043d0:	08004569 	.word	0x08004569
 80043d4:	0800457a 	.word	0x0800457a

080043d8 <memmove>:
 80043d8:	b510      	push	{r4, lr}
 80043da:	4288      	cmp	r0, r1
 80043dc:	d902      	bls.n	80043e4 <memmove+0xc>
 80043de:	188b      	adds	r3, r1, r2
 80043e0:	4298      	cmp	r0, r3
 80043e2:	d308      	bcc.n	80043f6 <memmove+0x1e>
 80043e4:	2300      	movs	r3, #0
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d007      	beq.n	80043fa <memmove+0x22>
 80043ea:	5ccc      	ldrb	r4, [r1, r3]
 80043ec:	54c4      	strb	r4, [r0, r3]
 80043ee:	3301      	adds	r3, #1
 80043f0:	e7f9      	b.n	80043e6 <memmove+0xe>
 80043f2:	5c8b      	ldrb	r3, [r1, r2]
 80043f4:	5483      	strb	r3, [r0, r2]
 80043f6:	3a01      	subs	r2, #1
 80043f8:	d2fb      	bcs.n	80043f2 <memmove+0x1a>
 80043fa:	bd10      	pop	{r4, pc}

080043fc <_sbrk_r>:
 80043fc:	2300      	movs	r3, #0
 80043fe:	b570      	push	{r4, r5, r6, lr}
 8004400:	4d06      	ldr	r5, [pc, #24]	@ (800441c <_sbrk_r+0x20>)
 8004402:	0004      	movs	r4, r0
 8004404:	0008      	movs	r0, r1
 8004406:	602b      	str	r3, [r5, #0]
 8004408:	f7fc fd02 	bl	8000e10 <_sbrk>
 800440c:	1c43      	adds	r3, r0, #1
 800440e:	d103      	bne.n	8004418 <_sbrk_r+0x1c>
 8004410:	682b      	ldr	r3, [r5, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d000      	beq.n	8004418 <_sbrk_r+0x1c>
 8004416:	6023      	str	r3, [r4, #0]
 8004418:	bd70      	pop	{r4, r5, r6, pc}
 800441a:	46c0      	nop			@ (mov r8, r8)
 800441c:	20000358 	.word	0x20000358

08004420 <memchr>:
 8004420:	b2c9      	uxtb	r1, r1
 8004422:	1882      	adds	r2, r0, r2
 8004424:	4290      	cmp	r0, r2
 8004426:	d101      	bne.n	800442c <memchr+0xc>
 8004428:	2000      	movs	r0, #0
 800442a:	4770      	bx	lr
 800442c:	7803      	ldrb	r3, [r0, #0]
 800442e:	428b      	cmp	r3, r1
 8004430:	d0fb      	beq.n	800442a <memchr+0xa>
 8004432:	3001      	adds	r0, #1
 8004434:	e7f6      	b.n	8004424 <memchr+0x4>

08004436 <memcpy>:
 8004436:	2300      	movs	r3, #0
 8004438:	b510      	push	{r4, lr}
 800443a:	429a      	cmp	r2, r3
 800443c:	d100      	bne.n	8004440 <memcpy+0xa>
 800443e:	bd10      	pop	{r4, pc}
 8004440:	5ccc      	ldrb	r4, [r1, r3]
 8004442:	54c4      	strb	r4, [r0, r3]
 8004444:	3301      	adds	r3, #1
 8004446:	e7f8      	b.n	800443a <memcpy+0x4>

08004448 <_realloc_r>:
 8004448:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800444a:	0006      	movs	r6, r0
 800444c:	000c      	movs	r4, r1
 800444e:	0015      	movs	r5, r2
 8004450:	2900      	cmp	r1, #0
 8004452:	d105      	bne.n	8004460 <_realloc_r+0x18>
 8004454:	0011      	movs	r1, r2
 8004456:	f7ff fc55 	bl	8003d04 <_malloc_r>
 800445a:	0004      	movs	r4, r0
 800445c:	0020      	movs	r0, r4
 800445e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004460:	2a00      	cmp	r2, #0
 8004462:	d103      	bne.n	800446c <_realloc_r+0x24>
 8004464:	f7ff fbe2 	bl	8003c2c <_free_r>
 8004468:	002c      	movs	r4, r5
 800446a:	e7f7      	b.n	800445c <_realloc_r+0x14>
 800446c:	f000 f81c 	bl	80044a8 <_malloc_usable_size_r>
 8004470:	0007      	movs	r7, r0
 8004472:	4285      	cmp	r5, r0
 8004474:	d802      	bhi.n	800447c <_realloc_r+0x34>
 8004476:	0843      	lsrs	r3, r0, #1
 8004478:	42ab      	cmp	r3, r5
 800447a:	d3ef      	bcc.n	800445c <_realloc_r+0x14>
 800447c:	0029      	movs	r1, r5
 800447e:	0030      	movs	r0, r6
 8004480:	f7ff fc40 	bl	8003d04 <_malloc_r>
 8004484:	9001      	str	r0, [sp, #4]
 8004486:	2800      	cmp	r0, #0
 8004488:	d101      	bne.n	800448e <_realloc_r+0x46>
 800448a:	9c01      	ldr	r4, [sp, #4]
 800448c:	e7e6      	b.n	800445c <_realloc_r+0x14>
 800448e:	002a      	movs	r2, r5
 8004490:	42bd      	cmp	r5, r7
 8004492:	d900      	bls.n	8004496 <_realloc_r+0x4e>
 8004494:	003a      	movs	r2, r7
 8004496:	0021      	movs	r1, r4
 8004498:	9801      	ldr	r0, [sp, #4]
 800449a:	f7ff ffcc 	bl	8004436 <memcpy>
 800449e:	0021      	movs	r1, r4
 80044a0:	0030      	movs	r0, r6
 80044a2:	f7ff fbc3 	bl	8003c2c <_free_r>
 80044a6:	e7f0      	b.n	800448a <_realloc_r+0x42>

080044a8 <_malloc_usable_size_r>:
 80044a8:	1f0b      	subs	r3, r1, #4
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	1f18      	subs	r0, r3, #4
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	da01      	bge.n	80044b6 <_malloc_usable_size_r+0xe>
 80044b2:	580b      	ldr	r3, [r1, r0]
 80044b4:	18c0      	adds	r0, r0, r3
 80044b6:	4770      	bx	lr

080044b8 <_init>:
 80044b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ba:	46c0      	nop			@ (mov r8, r8)
 80044bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044be:	bc08      	pop	{r3}
 80044c0:	469e      	mov	lr, r3
 80044c2:	4770      	bx	lr

080044c4 <_fini>:
 80044c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c6:	46c0      	nop			@ (mov r8, r8)
 80044c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ca:	bc08      	pop	{r3}
 80044cc:	469e      	mov	lr, r3
 80044ce:	4770      	bx	lr
